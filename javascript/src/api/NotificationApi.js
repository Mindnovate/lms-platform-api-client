/**
 * Starfish Labz API
 * This page provides documentation on how to use the Starfish Labz API. Please contact us should you wish to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import InlineResponse2003 from '../model/InlineResponse2003';
import NotificationNotificationWrite from '../model/NotificationNotificationWrite';
import NotificationjsonldNotificationDetail from '../model/NotificationjsonldNotificationDetail';
import NotificationjsonldNotificationWrite from '../model/NotificationjsonldNotificationWrite';

/**
* Notification service.
* @module api/NotificationApi
* @version 1.0.0
*/
export default class NotificationApi {

    /**
    * Constructs a new NotificationApi. 
    * @alias module:api/NotificationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getNotificationCollection operation.
     * @callback module:api/NotificationApi~getNotificationCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of Notification resources.
     * @param {Object} opts Optional parameters
     * @param {module:api/NotificationApi~getNotificationCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2003}
     */
    getNotificationCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'itemsPerPage': opts['itemsPerPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/ld+json', 'application/json', 'text/html'];
      let returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/api/auth/v1/notifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getNotificationItem operation.
     * @callback module:api/NotificationApi~getNotificationItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationjsonldNotificationDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Notification resource.
     * @param {module:api/NotificationApi~getNotificationItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationjsonldNotificationDetail}
     */
    getNotificationItem(id, callback) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/ld+json', 'application/json', 'text/html'];
      let returnType = NotificationjsonldNotificationDetail;

      return this.apiClient.callApi(
        '/api/auth/v1/notification/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchNotificationItem operation.
     * @callback module:api/NotificationApi~patchNotificationItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationjsonldNotificationDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the Notification resource.
     * @param {Object} opts Optional parameters
     * @param {module:api/NotificationApi~patchNotificationItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationjsonldNotificationDetail}
     */
    patchNotificationItem(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/ld+json', 'application/json'];
      let accepts = ['application/ld+json', 'application/json', 'text/html'];
      let returnType = NotificationjsonldNotificationDetail;

      return this.apiClient.callApi(
        '/api/auth/v1/notification/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
