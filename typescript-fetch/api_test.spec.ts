/**
 * Starfish Labz API
 * This page provides documentation on how to use the Starfish Labz API. Please contact us should you wish to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("AuthenticationApi", () => {
  let instance: api.AuthenticationApi
  beforeEach(function() {
    instance = new api.AuthenticationApi(config)
  });

  test("apiPublicV1ForgotPasswordEmailGet", () => {
    const email: string = "email_example"
    return expect(instance.apiPublicV1ForgotPasswordEmailGet(email, {})).resolves.toBe(null)
  })
  test("apiPublicV1LoginApplePost", () => {
    return expect(instance.apiPublicV1LoginApplePost({})).resolves.toBe(null)
  })
  test("apiPublicV1LoginCheckPost", () => {
    return expect(instance.apiPublicV1LoginCheckPost({})).resolves.toBe(null)
  })
  test("apiPublicV1LoginFacebookPost", () => {
    return expect(instance.apiPublicV1LoginFacebookPost({})).resolves.toBe(null)
  })
  test("apiPublicV1TokenRefreshPost", () => {
    return expect(instance.apiPublicV1TokenRefreshPost({})).resolves.toBe(null)
  })
})

describe("EmailSubscriptionApi", () => {
  let instance: api.EmailSubscriptionApi
  beforeEach(function() {
    instance = new api.EmailSubscriptionApi(config)
  });

  test("getEmailSubscriptionCollection", () => {
    const userId: number = 56
    const userId: Array<number> = undefined
    const id: number = 56
    const id: Array<number> = undefined
    const page: number = 56
    const itemsPerPage: number = 56
    return expect(instance.getEmailSubscriptionCollection(userId, userId, id, id, page, itemsPerPage, {})).resolves.toBe(null)
  })
  test("getEmailSubscriptionItem", () => {
    const id: string = "id_example"
    return expect(instance.getEmailSubscriptionItem(id, {})).resolves.toBe(null)
  })
  test("patchEmailSubscriptionItem", () => {
    const id: string = "id_example"
    const body: api.EmailSubscriptionjsonldEmailSubscriptionPatch = undefined
    return expect(instance.patchEmailSubscriptionItem(id, body, {})).resolves.toBe(null)
  })
  test("postEmailSubscriptionCollection", () => {
    const body: api.EmailSubscriptionjsonldEmailSubscriptionWrite = undefined
    return expect(instance.postEmailSubscriptionCollection(body, {})).resolves.toBe(null)
  })
})

describe("FirebaseTokenApi", () => {
  let instance: api.FirebaseTokenApi
  beforeEach(function() {
    instance = new api.FirebaseTokenApi(config)
  });

  test("getFirebaseTokenItem", () => {
    const id: string = "id_example"
    return expect(instance.getFirebaseTokenItem(id, {})).resolves.toBe(null)
  })
  test("postFirebaseTokenCollection", () => {
    const body: api.FirebaseTokenjsonldFirebaseTokenCreate = undefined
    return expect(instance.postFirebaseTokenCollection(body, {})).resolves.toBe(null)
  })
})

describe("LearningSkillApi", () => {
  let instance: api.LearningSkillApi
  beforeEach(function() {
    instance = new api.LearningSkillApi(config)
  });

  test("getLearningSkillCollection", () => {
    const id: number = 56
    const id: Array<number> = undefined
    const isPublic: boolean = true
    const isPublic: Array<boolean> = undefined
    const creatorId: number = 56
    const creatorId: Array<number> = undefined
    const page: number = 56
    const itemsPerPage: number = 56
    return expect(instance.getLearningSkillCollection(id, id, isPublic, isPublic, creatorId, creatorId, page, itemsPerPage, {})).resolves.toBe(null)
  })
  test("getLearningSkillItem", () => {
    const id: string = "id_example"
    return expect(instance.getLearningSkillItem(id, {})).resolves.toBe(null)
  })
  test("postLearningSkillCollection", () => {
    const body: api.LearningSkilljsonldLearningSkillWrite = undefined
    return expect(instance.postLearningSkillCollection(body, {})).resolves.toBe(null)
  })
  test("putLearningSkillItem", () => {
    const id: string = "id_example"
    const body: api.LearningSkilljsonldLearningSkillWrite = undefined
    return expect(instance.putLearningSkillItem(id, body, {})).resolves.toBe(null)
  })
})

describe("MediaApi", () => {
  let instance: api.MediaApi
  beforeEach(function() {
    instance = new api.MediaApi(config)
  });

  test("getMediaCollection", () => {
    const mediaType: number = 56
    const mediaType: Array<number> = undefined
    const id: number = 56
    const id: Array<number> = undefined
    const existsCreator: boolean = true
    const page: number = 56
    const itemsPerPage: number = 56
    return expect(instance.getMediaCollection(mediaType, mediaType, id, id, existsCreator, page, itemsPerPage, {})).resolves.toBe(null)
  })
  test("getMediaItem", () => {
    const id: string = "id_example"
    return expect(instance.getMediaItem(id, {})).resolves.toBe(null)
  })
  test("postMediaCollection", () => {
    const body: api.MediajsonldMediaWrite = undefined
    return expect(instance.postMediaCollection(body, {})).resolves.toBe(null)
  })
})

describe("NotificationApi", () => {
  let instance: api.NotificationApi
  beforeEach(function() {
    instance = new api.NotificationApi(config)
  });

  test("getNotificationCollection", () => {
    const page: number = 56
    const itemsPerPage: number = 56
    return expect(instance.getNotificationCollection(page, itemsPerPage, {})).resolves.toBe(null)
  })
  test("getNotificationItem", () => {
    const id: string = "id_example"
    return expect(instance.getNotificationItem(id, {})).resolves.toBe(null)
  })
  test("patchNotificationItem", () => {
    const id: string = "id_example"
    const body: api.NotificationjsonldNotificationWrite = undefined
    return expect(instance.patchNotificationItem(id, body, {})).resolves.toBe(null)
  })
})

describe("OtherUserApi", () => {
  let instance: api.OtherUserApi
  beforeEach(function() {
    instance = new api.OtherUserApi(config)
  });

  test("getOtherUserCollection", () => {
    const schoolId: number = 56
    const schoolId: Array<number> = undefined
    const id: number = 56
    const id: Array<number> = undefined
    const page: number = 56
    const itemsPerPage: number = 56
    return expect(instance.getOtherUserCollection(schoolId, schoolId, id, id, page, itemsPerPage, {})).resolves.toBe(null)
  })
  test("getOtherUserItem", () => {
    const id: string = "id_example"
    return expect(instance.getOtherUserItem(id, {})).resolves.toBe(null)
  })
})

describe("ParentUserApi", () => {
  let instance: api.ParentUserApi
  beforeEach(function() {
    instance = new api.ParentUserApi(config)
  });

  test("getParentUserCollection", () => {
    const schoolId: number = 56
    const schoolId: Array<number> = undefined
    const id: number = 56
    const id: Array<number> = undefined
    const page: number = 56
    const itemsPerPage: number = 56
    return expect(instance.getParentUserCollection(schoolId, schoolId, id, id, page, itemsPerPage, {})).resolves.toBe(null)
  })
  test("getParentUserItem", () => {
    const id: string = "id_example"
    return expect(instance.getParentUserItem(id, {})).resolves.toBe(null)
  })
})

describe("PrivacyPolicyApi", () => {
  let instance: api.PrivacyPolicyApi
  beforeEach(function() {
    instance = new api.PrivacyPolicyApi(config)
  });

  test("apiAuthV1PrivacyPolicyAcceptPost", () => {
    return expect(instance.apiAuthV1PrivacyPolicyAcceptPost({})).resolves.toBe(null)
  })
})

describe("RatingApi", () => {
  let instance: api.RatingApi
  beforeEach(function() {
    instance = new api.RatingApi(config)
  });

  test("deleteRatingItem", () => {
    const id: string = "id_example"
    return expect(instance.deleteRatingItem(id, {})).resolves.toBe(null)
  })
  test("getRatingCollection", () => {
    const teachingClassId: number = 56
    const teachingClassId: Array<number> = undefined
    const ratingStudentsStudentId: number = 56
    const ratingStudentsStudentId: Array<number> = undefined
    const page: number = 56
    const itemsPerPage: number = 56
    return expect(instance.getRatingCollection(teachingClassId, teachingClassId, ratingStudentsStudentId, ratingStudentsStudentId, page, itemsPerPage, {})).resolves.toBe(null)
  })
  test("getRatingItem", () => {
    const id: string = "id_example"
    return expect(instance.getRatingItem(id, {})).resolves.toBe(null)
  })
  test("patchRatingItem", () => {
    const id: string = "id_example"
    const body: api.RatingjsonldRatingWrite = undefined
    return expect(instance.patchRatingItem(id, body, {})).resolves.toBe(null)
  })
  test("postRatingCollection", () => {
    const body: api.RatingjsonldRatingWrite = undefined
    return expect(instance.postRatingCollection(body, {})).resolves.toBe(null)
  })
})

describe("RatingMediaApi", () => {
  let instance: api.RatingMediaApi
  beforeEach(function() {
    instance = new api.RatingMediaApi(config)
  });

  test("deleteRatingMediaItem", () => {
    const id: string = "id_example"
    return expect(instance.deleteRatingMediaItem(id, {})).resolves.toBe(null)
  })
  test("getRatingMediaCollection", () => {
    const ratingId: number = 56
    const ratingId: Array<number> = undefined
    const page: number = 56
    const itemsPerPage: number = 56
    return expect(instance.getRatingMediaCollection(ratingId, ratingId, page, itemsPerPage, {})).resolves.toBe(null)
  })
  test("getRatingMediaItem", () => {
    const id: string = "id_example"
    return expect(instance.getRatingMediaItem(id, {})).resolves.toBe(null)
  })
  test("postRatingMediaCollection", () => {
    const body: api.RatingMediajsonldRatingMediaWrite = undefined
    return expect(instance.postRatingMediaCollection(body, {})).resolves.toBe(null)
  })
})

describe("RatingStudentApi", () => {
  let instance: api.RatingStudentApi
  beforeEach(function() {
    instance = new api.RatingStudentApi(config)
  });

  test("deleteRatingStudentItem", () => {
    const id: string = "id_example"
    return expect(instance.deleteRatingStudentItem(id, {})).resolves.toBe(null)
  })
  test("getRatingStudentCollection", () => {
    const ratingId: number = 56
    const ratingId: Array<number> = undefined
    const page: number = 56
    const itemsPerPage: number = 56
    return expect(instance.getRatingStudentCollection(ratingId, ratingId, page, itemsPerPage, {})).resolves.toBe(null)
  })
  test("getRatingStudentItem", () => {
    const id: string = "id_example"
    return expect(instance.getRatingStudentItem(id, {})).resolves.toBe(null)
  })
  test("postRatingStudentCollection", () => {
    const body: api.RatingStudentjsonldRatingStudentWrite = undefined
    return expect(instance.postRatingStudentCollection(body, {})).resolves.toBe(null)
  })
})

describe("ReportApi", () => {
  let instance: api.ReportApi
  beforeEach(function() {
    instance = new api.ReportApi(config)
  });

  test("apiAuthV1ReportPdfClassIdGet", () => {
    const id: number = 789
    const :  = undefined
    const :  = undefined
    return expect(instance.apiAuthV1ReportPdfClassIdGet(id, , , {})).resolves.toBe(null)
  })
  test("apiAuthV1ReportPdfStudentIdGet", () => {
    const id: number = 789
    const :  = undefined
    const :  = undefined
    const :  = undefined
    return expect(instance.apiAuthV1ReportPdfStudentIdGet(id, , , , {})).resolves.toBe(null)
  })
  test("apiAuthV1ReportSpreadsheetClassIdGet", () => {
    const id: number = 789
    const :  = undefined
    const :  = undefined
    return expect(instance.apiAuthV1ReportSpreadsheetClassIdGet(id, , , {})).resolves.toBe(null)
  })
  test("apiAuthV1ReportSpreadsheetStudentIdGet", () => {
    const id: number = 789
    const :  = undefined
    const :  = undefined
    const :  = undefined
    return expect(instance.apiAuthV1ReportSpreadsheetStudentIdGet(id, , , , {})).resolves.toBe(null)
  })
})

describe("SchoolApi", () => {
  let instance: api.SchoolApi
  beforeEach(function() {
    instance = new api.SchoolApi(config)
  });

  test("getPublicSchoolCollection", () => {
    const name: string = "name_example"
    const page: number = 56
    const itemsPerPage: number = 56
    return expect(instance.getPublicSchoolCollection(name, page, itemsPerPage, {})).resolves.toBe(null)
  })
  test("getSchoolCollection", () => {
    const name: string = "name_example"
    const page: number = 56
    const itemsPerPage: number = 56
    return expect(instance.getSchoolCollection(name, page, itemsPerPage, {})).resolves.toBe(null)
  })
  test("getSchoolItem", () => {
    const id: string = "id_example"
    return expect(instance.getSchoolItem(id, {})).resolves.toBe(null)
  })
  test("postSchoolCollection", () => {
    const body: api.SchooljsonldSchoolWrite = undefined
    return expect(instance.postSchoolCollection(body, {})).resolves.toBe(null)
  })
})

describe("SearchApi", () => {
  let instance: api.SearchApi
  beforeEach(function() {
    instance = new api.SearchApi(config)
  });

  test("apiPublicV1SearchContentGet", () => {
    const :  = undefined
    const :  = undefined
    return expect(instance.apiPublicV1SearchContentGet(, , {})).resolves.toBe(null)
  })
})

describe("StudentApi", () => {
  let instance: api.StudentApi
  beforeEach(function() {
    instance = new api.StudentApi(config)
  });

  test("getStudentCollection", () => {
    const teachingClassStudentsTeachingClassId: number = 56
    const teachingClassStudentsTeachingClassId: Array<number> = undefined
    const id: number = 56
    const id: Array<number> = undefined
    const page: number = 56
    const itemsPerPage: number = 56
    return expect(instance.getStudentCollection(teachingClassStudentsTeachingClassId, teachingClassStudentsTeachingClassId, id, id, page, itemsPerPage, {})).resolves.toBe(null)
  })
  test("getStudentItem", () => {
    const id: string = "id_example"
    return expect(instance.getStudentItem(id, {})).resolves.toBe(null)
  })
})

describe("StudentProfileUserApi", () => {
  let instance: api.StudentProfileUserApi
  beforeEach(function() {
    instance = new api.StudentProfileUserApi(config)
  });

  test("deleteStudentProfileUserItem", () => {
    const id: string = "id_example"
    return expect(instance.deleteStudentProfileUserItem(id, {})).resolves.toBe(null)
  })
  test("getStudentProfileUserCollection", () => {
    const teachingClassId: number = 56
    const teachingClassId: Array<number> = undefined
    const userId: number = 56
    const userId: Array<number> = undefined
    const studentId: number = 56
    const studentId: Array<number> = undefined
    const page: number = 56
    const itemsPerPage: number = 56
    return expect(instance.getStudentProfileUserCollection(teachingClassId, teachingClassId, userId, userId, studentId, studentId, page, itemsPerPage, {})).resolves.toBe(null)
  })
  test("getStudentProfileUserItem", () => {
    const id: string = "id_example"
    return expect(instance.getStudentProfileUserItem(id, {})).resolves.toBe(null)
  })
})

describe("StudentProfileUserInvitationApi", () => {
  let instance: api.StudentProfileUserInvitationApi
  beforeEach(function() {
    instance = new api.StudentProfileUserInvitationApi(config)
  });

  test("apiAuthV1StudentProfileUserInvitationPost", () => {
    return expect(instance.apiAuthV1StudentProfileUserInvitationPost({})).resolves.toBe(null)
  })
  test("apiAuthV1StudentProfileUserInvitationStudentProfileUserInvitationIdAcceptPost", () => {
    return expect(instance.apiAuthV1StudentProfileUserInvitationStudentProfileUserInvitationIdAcceptPost({})).resolves.toBe(null)
  })
  test("apiAuthV1StudentProfileUserInvitationStudentProfileUserInvitationIdRejectPost", () => {
    return expect(instance.apiAuthV1StudentProfileUserInvitationStudentProfileUserInvitationIdRejectPost({})).resolves.toBe(null)
  })
  test("getStudentProfileUserInvitationCollection", () => {
    const teachingClassId: number = 56
    const teachingClassId: Array<number> = undefined
    const studentId: number = 56
    const studentId: Array<number> = undefined
    const page: number = 56
    const itemsPerPage: number = 56
    return expect(instance.getStudentProfileUserInvitationCollection(teachingClassId, teachingClassId, studentId, studentId, page, itemsPerPage, {})).resolves.toBe(null)
  })
  test("getStudentProfileUserInvitationItem", () => {
    const id: string = "id_example"
    return expect(instance.getStudentProfileUserInvitationItem(id, {})).resolves.toBe(null)
  })
})

describe("StudentUserApi", () => {
  let instance: api.StudentUserApi
  beforeEach(function() {
    instance = new api.StudentUserApi(config)
  });

  test("getStudentUserCollection", () => {
    const schoolId: number = 56
    const schoolId: Array<number> = undefined
    const id: number = 56
    const id: Array<number> = undefined
    const page: number = 56
    const itemsPerPage: number = 56
    return expect(instance.getStudentUserCollection(schoolId, schoolId, id, id, page, itemsPerPage, {})).resolves.toBe(null)
  })
  test("getStudentUserItem", () => {
    const id: string = "id_example"
    return expect(instance.getStudentUserItem(id, {})).resolves.toBe(null)
  })
})

describe("TeacherApi", () => {
  let instance: api.TeacherApi
  beforeEach(function() {
    instance = new api.TeacherApi(config)
  });

  test("getTeacherCollection", () => {
    const schoolId: number = 56
    const schoolId: Array<number> = undefined
    const id: number = 56
    const id: Array<number> = undefined
    const page: number = 56
    const itemsPerPage: number = 56
    return expect(instance.getTeacherCollection(schoolId, schoolId, id, id, page, itemsPerPage, {})).resolves.toBe(null)
  })
  test("getTeacherItem", () => {
    const id: string = "id_example"
    return expect(instance.getTeacherItem(id, {})).resolves.toBe(null)
  })
})

describe("TeachingClassApi", () => {
  let instance: api.TeachingClassApi
  beforeEach(function() {
    instance = new api.TeachingClassApi(config)
  });

  test("getLearningSkillsTeachingClassItem", () => {
    const id: string = "id_example"
    return expect(instance.getLearningSkillsTeachingClassItem(id, {})).resolves.toBe(null)
  })
  test("getTeachingClassCollection", () => {
    const isFinished: boolean = true
    const isFinished: Array<boolean> = undefined
    const invitationCode: string = "invitationCode_example"
    const invitationCode: Array<string> = undefined
    const page: number = 56
    const itemsPerPage: number = 56
    const excludeCoteacherTeachingClasses: boolean = true
    const excludeEvaluatorTeachingClasses: boolean = true
    return expect(instance.getTeachingClassCollection(isFinished, isFinished, invitationCode, invitationCode, page, itemsPerPage, excludeCoteacherTeachingClasses, excludeEvaluatorTeachingClasses, {})).resolves.toBe(null)
  })
  test("getTeachingClassItem", () => {
    const id: string = "id_example"
    return expect(instance.getTeachingClassItem(id, {})).resolves.toBe(null)
  })
  test("patchTeachingClassItem", () => {
    const id: string = "id_example"
    const body: api.TeachingClassjsonldTeachingClassWrite = undefined
    return expect(instance.patchTeachingClassItem(id, body, {})).resolves.toBe(null)
  })
  test("postTeachingClassCollection", () => {
    const body: api.TeachingClassjsonldTeachingClassWrite = undefined
    return expect(instance.postTeachingClassCollection(body, {})).resolves.toBe(null)
  })
  test("putTeachingClassItem", () => {
    const id: string = "id_example"
    const body: api.TeachingClassjsonldTeachingClassWrite = undefined
    return expect(instance.putTeachingClassItem(id, body, {})).resolves.toBe(null)
  })
})

describe("TeachingClassLearningSkillApi", () => {
  let instance: api.TeachingClassLearningSkillApi
  beforeEach(function() {
    instance = new api.TeachingClassLearningSkillApi(config)
  });

  test("deleteTeachingClassLearningSkillItem", () => {
    const id: string = "id_example"
    return expect(instance.deleteTeachingClassLearningSkillItem(id, {})).resolves.toBe(null)
  })
  test("getTeachingClassLearningSkillCollection", () => {
    const teachingClassId: number = 56
    const teachingClassId: Array<number> = undefined
    const page: number = 56
    const itemsPerPage: number = 56
    return expect(instance.getTeachingClassLearningSkillCollection(teachingClassId, teachingClassId, page, itemsPerPage, {})).resolves.toBe(null)
  })
  test("getTeachingClassLearningSkillItem", () => {
    const id: string = "id_example"
    return expect(instance.getTeachingClassLearningSkillItem(id, {})).resolves.toBe(null)
  })
  test("postTeachingClassLearningSkillCollection", () => {
    const body: api.TeachingClassLearningSkilljsonldTeachingClassLearningSkillWrite = undefined
    return expect(instance.postTeachingClassLearningSkillCollection(body, {})).resolves.toBe(null)
  })
})

describe("TeachingClassStudentApi", () => {
  let instance: api.TeachingClassStudentApi
  beforeEach(function() {
    instance = new api.TeachingClassStudentApi(config)
  });

  test("apiAuthV1TeachingClassStudentCopyPost", () => {
    return expect(instance.apiAuthV1TeachingClassStudentCopyPost({})).resolves.toBe(null)
  })
  test("deleteTeachingClassStudentItem", () => {
    const id: string = "id_example"
    return expect(instance.deleteTeachingClassStudentItem(id, {})).resolves.toBe(null)
  })
  test("getTeachingClassStudentCollection", () => {
    const teachingClassId: number = 56
    const teachingClassId: Array<number> = undefined
    const studentId: number = 56
    const studentId: Array<number> = undefined
    const invitationCode: string = "invitationCode_example"
    const invitationCode: Array<string> = undefined
    const page: number = 56
    const itemsPerPage: number = 56
    return expect(instance.getTeachingClassStudentCollection(teachingClassId, teachingClassId, studentId, studentId, invitationCode, invitationCode, page, itemsPerPage, {})).resolves.toBe(null)
  })
  test("getTeachingClassStudentItem", () => {
    const id: string = "id_example"
    return expect(instance.getTeachingClassStudentItem(id, {})).resolves.toBe(null)
  })
  test("patchTeachingClassStudentItem", () => {
    const id: string = "id_example"
    const body: api.TeachingClassStudentjsonldTeachingClassStudentWrite = undefined
    return expect(instance.patchTeachingClassStudentItem(id, body, {})).resolves.toBe(null)
  })
  test("postTeachingClassStudentCollection", () => {
    const body: api.TeachingClassStudentjsonldTeachingClassStudentWrite = undefined
    return expect(instance.postTeachingClassStudentCollection(body, {})).resolves.toBe(null)
  })
  test("putTeachingClassStudentItem", () => {
    const id: string = "id_example"
    const body: api.TeachingClassStudentjsonldTeachingClassStudentWrite = undefined
    return expect(instance.putTeachingClassStudentItem(id, body, {})).resolves.toBe(null)
  })
})

describe("TeachingClassTeacherApi", () => {
  let instance: api.TeachingClassTeacherApi
  beforeEach(function() {
    instance = new api.TeachingClassTeacherApi(config)
  });

  test("deleteTeachingClassTeacherItem", () => {
    const id: string = "id_example"
    return expect(instance.deleteTeachingClassTeacherItem(id, {})).resolves.toBe(null)
  })
  test("getTeachingClassTeacherCollection", () => {
    const teachingClassId: number = 56
    const teachingClassId: Array<number> = undefined
    const teacherId: number = 56
    const teacherId: Array<number> = undefined
    const page: number = 56
    const itemsPerPage: number = 56
    return expect(instance.getTeachingClassTeacherCollection(teachingClassId, teachingClassId, teacherId, teacherId, page, itemsPerPage, {})).resolves.toBe(null)
  })
  test("getTeachingClassTeacherItem", () => {
    const id: string = "id_example"
    return expect(instance.getTeachingClassTeacherItem(id, {})).resolves.toBe(null)
  })
})

describe("TeachingClassTeacherInvitationApi", () => {
  let instance: api.TeachingClassTeacherInvitationApi
  beforeEach(function() {
    instance = new api.TeachingClassTeacherInvitationApi(config)
  });

  test("apiAuthV1TeachingClassTeacherInvitationPost", () => {
    return expect(instance.apiAuthV1TeachingClassTeacherInvitationPost({})).resolves.toBe(null)
  })
  test("apiAuthV1TeachingClassTeacherInvitationTeachingClassTeacherInvitationIdAcceptPost", () => {
    return expect(instance.apiAuthV1TeachingClassTeacherInvitationTeachingClassTeacherInvitationIdAcceptPost({})).resolves.toBe(null)
  })
  test("apiAuthV1TeachingClassTeacherInvitationTeachingClassTeacherInvitationIdRejectPost", () => {
    return expect(instance.apiAuthV1TeachingClassTeacherInvitationTeachingClassTeacherInvitationIdRejectPost({})).resolves.toBe(null)
  })
  test("getTeachingClassTeacherInvitationCollection", () => {
    const teachingClassId: number = 56
    const teachingClassId: Array<number> = undefined
    const page: number = 56
    const itemsPerPage: number = 56
    return expect(instance.getTeachingClassTeacherInvitationCollection(teachingClassId, teachingClassId, page, itemsPerPage, {})).resolves.toBe(null)
  })
  test("getTeachingClassTeacherInvitationItem", () => {
    const id: string = "id_example"
    return expect(instance.getTeachingClassTeacherInvitationItem(id, {})).resolves.toBe(null)
  })
})

describe("UserApi", () => {
  let instance: api.UserApi
  beforeEach(function() {
    instance = new api.UserApi(config)
  });

  test("apiPublicV1UserValidateEmailEmailGet", () => {
    const email: string = "email_example"
    return expect(instance.apiPublicV1UserValidateEmailEmailGet(email, {})).resolves.toBe(null)
  })
  test("apiPublicV1UserValidateUsernameUsernameGet", () => {
    const username: string = "username_example"
    return expect(instance.apiPublicV1UserValidateUsernameUsernameGet(username, {})).resolves.toBe(null)
  })
  test("getUserCollection", () => {
    const id: number = 56
    const id: Array<number> = undefined
    const page: number = 56
    const itemsPerPage: number = 56
    return expect(instance.getUserCollection(id, id, page, itemsPerPage, {})).resolves.toBe(null)
  })
  test("getUserItem", () => {
    const id: string = "id_example"
    return expect(instance.getUserItem(id, {})).resolves.toBe(null)
  })
  test("patchUserItem", () => {
    const id: string = "id_example"
    const body: api.UserjsonldUserWrite = undefined
    return expect(instance.patchUserItem(id, body, {})).resolves.toBe(null)
  })
  test("postUserCollection", () => {
    const body: api.UserjsonldUserCreate = undefined
    return expect(instance.postUserCollection(body, {})).resolves.toBe(null)
  })
})

describe("UtilApi", () => {
  let instance: api.UtilApi
  beforeEach(function() {
    instance = new api.UtilApi(config)
  });

  test("apiPublicV1TranslationLocaleGet", () => {
    const locale: string = "locale_example"
    return expect(instance.apiPublicV1TranslationLocaleGet(locale, {})).resolves.toBe(null)
  })
  test("apiPublicV1VersionBuildNumberGet", () => {
    const buildNumber: number = 789
    return expect(instance.apiPublicV1VersionBuildNumberGet(buildNumber, {})).resolves.toBe(null)
  })
})

