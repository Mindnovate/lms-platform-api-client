/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Starfish Labz API
 * This page provides documentation on how to use the Starfish Labz API. Please contact us should you wish to access the API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface CollectionTeachingClassDetail
 */
export interface CollectionTeachingClassDetail {
}
/**
 * 
 * @export
 * @interface CollectionjsonldTeachingClassDetail
 */
export interface CollectionjsonldTeachingClassDetail {
    /**
     * 
     * @type {string}
     * @memberof CollectionjsonldTeachingClassDetail
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof CollectionjsonldTeachingClassDetail
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof CollectionjsonldTeachingClassDetail
     */
    type?: string;
}
/**
 * 
 * @export
 * @interface EmailSubscriptionEmailSubscriptionDetail
 */
export interface EmailSubscriptionEmailSubscriptionDetail {
    /**
     * 
     * @type {number}
     * @memberof EmailSubscriptionEmailSubscriptionDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof EmailSubscriptionEmailSubscriptionDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof EmailSubscriptionEmailSubscriptionDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof EmailSubscriptionEmailSubscriptionDetail
     */
    user?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EmailSubscriptionEmailSubscriptionDetail
     */
    hasNewsletterSubscription?: boolean;
}
/**
 * 
 * @export
 * @interface EmailSubscriptionEmailSubscriptionPatch
 */
export interface EmailSubscriptionEmailSubscriptionPatch {
    /**
     * 
     * @type {boolean}
     * @memberof EmailSubscriptionEmailSubscriptionPatch
     */
    hasNewsletterSubscription?: boolean;
}
/**
 * 
 * @export
 * @interface EmailSubscriptionEmailSubscriptionWrite
 */
export interface EmailSubscriptionEmailSubscriptionWrite {
    /**
     * 
     * @type {string}
     * @memberof EmailSubscriptionEmailSubscriptionWrite
     */
    user?: string;
}
/**
 * 
 * @export
 * @interface EmailSubscriptionjsonldEmailSubscriptionDetail
 */
export interface EmailSubscriptionjsonldEmailSubscriptionDetail {
    /**
     * 
     * @type {string}
     * @memberof EmailSubscriptionjsonldEmailSubscriptionDetail
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailSubscriptionjsonldEmailSubscriptionDetail
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailSubscriptionjsonldEmailSubscriptionDetail
     */
    context?: string;
    /**
     * 
     * @type {number}
     * @memberof EmailSubscriptionjsonldEmailSubscriptionDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof EmailSubscriptionjsonldEmailSubscriptionDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof EmailSubscriptionjsonldEmailSubscriptionDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof EmailSubscriptionjsonldEmailSubscriptionDetail
     */
    user?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EmailSubscriptionjsonldEmailSubscriptionDetail
     */
    hasNewsletterSubscription?: boolean;
}
/**
 * 
 * @export
 * @interface EmailSubscriptionjsonldEmailSubscriptionPatch
 */
export interface EmailSubscriptionjsonldEmailSubscriptionPatch {
    /**
     * 
     * @type {string}
     * @memberof EmailSubscriptionjsonldEmailSubscriptionPatch
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailSubscriptionjsonldEmailSubscriptionPatch
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailSubscriptionjsonldEmailSubscriptionPatch
     */
    type?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EmailSubscriptionjsonldEmailSubscriptionPatch
     */
    hasNewsletterSubscription?: boolean;
}
/**
 * 
 * @export
 * @interface EmailSubscriptionjsonldEmailSubscriptionWrite
 */
export interface EmailSubscriptionjsonldEmailSubscriptionWrite {
    /**
     * 
     * @type {string}
     * @memberof EmailSubscriptionjsonldEmailSubscriptionWrite
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailSubscriptionjsonldEmailSubscriptionWrite
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailSubscriptionjsonldEmailSubscriptionWrite
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailSubscriptionjsonldEmailSubscriptionWrite
     */
    user?: string;
}
/**
 * 
 * @export
 * @interface FirebaseTokenFirebaseTokenCreate
 */
export interface FirebaseTokenFirebaseTokenCreate {
    /**
     * 
     * @type {string}
     * @memberof FirebaseTokenFirebaseTokenCreate
     */
    token?: string;
}
/**
 * 
 * @export
 * @interface FirebaseTokenFirebaseTokenDetail
 */
export interface FirebaseTokenFirebaseTokenDetail {
    /**
     * 
     * @type {number}
     * @memberof FirebaseTokenFirebaseTokenDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof FirebaseTokenFirebaseTokenDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof FirebaseTokenFirebaseTokenDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof FirebaseTokenFirebaseTokenDetail
     */
    user?: string;
    /**
     * 
     * @type {string}
     * @memberof FirebaseTokenFirebaseTokenDetail
     */
    token?: string;
}
/**
 * 
 * @export
 * @interface FirebaseTokenjsonldFirebaseTokenCreate
 */
export interface FirebaseTokenjsonldFirebaseTokenCreate {
    /**
     * 
     * @type {string}
     * @memberof FirebaseTokenjsonldFirebaseTokenCreate
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof FirebaseTokenjsonldFirebaseTokenCreate
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof FirebaseTokenjsonldFirebaseTokenCreate
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof FirebaseTokenjsonldFirebaseTokenCreate
     */
    token?: string;
}
/**
 * 
 * @export
 * @interface FirebaseTokenjsonldFirebaseTokenDetail
 */
export interface FirebaseTokenjsonldFirebaseTokenDetail {
    /**
     * 
     * @type {string}
     * @memberof FirebaseTokenjsonldFirebaseTokenDetail
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof FirebaseTokenjsonldFirebaseTokenDetail
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof FirebaseTokenjsonldFirebaseTokenDetail
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof FirebaseTokenjsonldFirebaseTokenDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof FirebaseTokenjsonldFirebaseTokenDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof FirebaseTokenjsonldFirebaseTokenDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof FirebaseTokenjsonldFirebaseTokenDetail
     */
    user?: string;
    /**
     * 
     * @type {string}
     * @memberof FirebaseTokenjsonldFirebaseTokenDetail
     */
    token?: string;
}
/**
 * 
 * @export
 * @interface GeolocationSchoolDetail
 */
export interface GeolocationSchoolDetail {
    /**
     * 
     * @type {number}
     * @memberof GeolocationSchoolDetail
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof GeolocationSchoolDetail
     */
    localizedName?: string;
    /**
     * 
     * @type {GeolocationSchoolDetail}
     * @memberof GeolocationSchoolDetail
     */
    parent?: GeolocationSchoolDetail;
}
/**
 * 
 * @export
 * @interface GeolocationSchoolList
 */
export interface GeolocationSchoolList {
    /**
     * 
     * @type {number}
     * @memberof GeolocationSchoolList
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof GeolocationSchoolList
     */
    localizedName?: string;
    /**
     * 
     * @type {GeolocationSchoolList}
     * @memberof GeolocationSchoolList
     */
    parent?: GeolocationSchoolList;
}
/**
 * 
 * @export
 * @interface GeolocationjsonldSchoolDetail
 */
export interface GeolocationjsonldSchoolDetail {
    /**
     * 
     * @type {string}
     * @memberof GeolocationjsonldSchoolDetail
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof GeolocationjsonldSchoolDetail
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof GeolocationjsonldSchoolDetail
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof GeolocationjsonldSchoolDetail
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof GeolocationjsonldSchoolDetail
     */
    localizedName?: string;
    /**
     * 
     * @type {GeolocationjsonldSchoolDetail}
     * @memberof GeolocationjsonldSchoolDetail
     */
    parent?: GeolocationjsonldSchoolDetail;
}
/**
 * 
 * @export
 * @interface GeolocationjsonldSchoolList
 */
export interface GeolocationjsonldSchoolList {
    /**
     * 
     * @type {string}
     * @memberof GeolocationjsonldSchoolList
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof GeolocationjsonldSchoolList
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof GeolocationjsonldSchoolList
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof GeolocationjsonldSchoolList
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof GeolocationjsonldSchoolList
     */
    localizedName?: string;
    /**
     * 
     * @type {GeolocationjsonldSchoolList}
     * @memberof GeolocationjsonldSchoolList
     */
    parent?: GeolocationjsonldSchoolList;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {Array<EmailSubscriptionjsonldEmailSubscriptionDetail>}
     * @memberof InlineResponse200
     */
    hydramember: Array<EmailSubscriptionjsonldEmailSubscriptionDetail>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200
     */
    hydratotalItems?: number;
    /**
     * 
     * @type {InlineResponse200Hydraview}
     * @memberof InlineResponse200
     */
    hydraview?: InlineResponse200Hydraview;
    /**
     * 
     * @type {InlineResponse200Hydrasearch}
     * @memberof InlineResponse200
     */
    hydrasearch?: InlineResponse200Hydrasearch;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {Array<LearningSkilljsonldLearningSkillList>}
     * @memberof InlineResponse2001
     */
    hydramember: Array<LearningSkilljsonldLearningSkillList>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2001
     */
    hydratotalItems?: number;
    /**
     * 
     * @type {InlineResponse200Hydraview}
     * @memberof InlineResponse2001
     */
    hydraview?: InlineResponse200Hydraview;
    /**
     * 
     * @type {InlineResponse200Hydrasearch}
     * @memberof InlineResponse2001
     */
    hydrasearch?: InlineResponse200Hydrasearch;
}
/**
 * 
 * @export
 * @interface InlineResponse20010
 */
export interface InlineResponse20010 {
    /**
     * 
     * @type {Array<StudentProfileUserInvitationjsonldStudentProfileUserInvitationList>}
     * @memberof InlineResponse20010
     */
    hydramember: Array<StudentProfileUserInvitationjsonldStudentProfileUserInvitationList>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20010
     */
    hydratotalItems?: number;
    /**
     * 
     * @type {InlineResponse200Hydraview}
     * @memberof InlineResponse20010
     */
    hydraview?: InlineResponse200Hydraview;
    /**
     * 
     * @type {InlineResponse200Hydrasearch}
     * @memberof InlineResponse20010
     */
    hydrasearch?: InlineResponse200Hydrasearch;
}
/**
 * 
 * @export
 * @interface InlineResponse20011
 */
export interface InlineResponse20011 {
    /**
     * 
     * @type {Array<StudentProfileUserjsonldStudentProfileUserList>}
     * @memberof InlineResponse20011
     */
    hydramember: Array<StudentProfileUserjsonldStudentProfileUserList>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20011
     */
    hydratotalItems?: number;
    /**
     * 
     * @type {InlineResponse200Hydraview}
     * @memberof InlineResponse20011
     */
    hydraview?: InlineResponse200Hydraview;
    /**
     * 
     * @type {InlineResponse200Hydrasearch}
     * @memberof InlineResponse20011
     */
    hydrasearch?: InlineResponse200Hydrasearch;
}
/**
 * 
 * @export
 * @interface InlineResponse20012
 */
export interface InlineResponse20012 {
    /**
     * 
     * @type {Array<StudentUserjsonldStudentUserDetail>}
     * @memberof InlineResponse20012
     */
    hydramember: Array<StudentUserjsonldStudentUserDetail>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20012
     */
    hydratotalItems?: number;
    /**
     * 
     * @type {InlineResponse200Hydraview}
     * @memberof InlineResponse20012
     */
    hydraview?: InlineResponse200Hydraview;
    /**
     * 
     * @type {InlineResponse200Hydrasearch}
     * @memberof InlineResponse20012
     */
    hydrasearch?: InlineResponse200Hydrasearch;
}
/**
 * 
 * @export
 * @interface InlineResponse20013
 */
export interface InlineResponse20013 {
    /**
     * 
     * @type {Array<StudentjsonldStudentList>}
     * @memberof InlineResponse20013
     */
    hydramember: Array<StudentjsonldStudentList>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20013
     */
    hydratotalItems?: number;
    /**
     * 
     * @type {InlineResponse200Hydraview}
     * @memberof InlineResponse20013
     */
    hydraview?: InlineResponse200Hydraview;
    /**
     * 
     * @type {InlineResponse200Hydrasearch}
     * @memberof InlineResponse20013
     */
    hydrasearch?: InlineResponse200Hydrasearch;
}
/**
 * 
 * @export
 * @interface InlineResponse20014
 */
export interface InlineResponse20014 {
    /**
     * 
     * @type {Array<TeacherjsonldTeacherDetail>}
     * @memberof InlineResponse20014
     */
    hydramember: Array<TeacherjsonldTeacherDetail>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20014
     */
    hydratotalItems?: number;
    /**
     * 
     * @type {InlineResponse200Hydraview}
     * @memberof InlineResponse20014
     */
    hydraview?: InlineResponse200Hydraview;
    /**
     * 
     * @type {InlineResponse200Hydrasearch}
     * @memberof InlineResponse20014
     */
    hydrasearch?: InlineResponse200Hydrasearch;
}
/**
 * 
 * @export
 * @interface InlineResponse20015
 */
export interface InlineResponse20015 {
    /**
     * 
     * @type {Array<TeachingClassLearningSkilljsonldTeachingClassLearningSkillList>}
     * @memberof InlineResponse20015
     */
    hydramember: Array<TeachingClassLearningSkilljsonldTeachingClassLearningSkillList>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20015
     */
    hydratotalItems?: number;
    /**
     * 
     * @type {InlineResponse200Hydraview}
     * @memberof InlineResponse20015
     */
    hydraview?: InlineResponse200Hydraview;
    /**
     * 
     * @type {InlineResponse200Hydrasearch}
     * @memberof InlineResponse20015
     */
    hydrasearch?: InlineResponse200Hydrasearch;
}
/**
 * 
 * @export
 * @interface InlineResponse20016
 */
export interface InlineResponse20016 {
    /**
     * 
     * @type {Array<TeachingClassStudentjsonldTeachingClassStudentList>}
     * @memberof InlineResponse20016
     */
    hydramember: Array<TeachingClassStudentjsonldTeachingClassStudentList>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20016
     */
    hydratotalItems?: number;
    /**
     * 
     * @type {InlineResponse200Hydraview}
     * @memberof InlineResponse20016
     */
    hydraview?: InlineResponse200Hydraview;
    /**
     * 
     * @type {InlineResponse200Hydrasearch}
     * @memberof InlineResponse20016
     */
    hydrasearch?: InlineResponse200Hydrasearch;
}
/**
 * 
 * @export
 * @interface InlineResponse20017
 */
export interface InlineResponse20017 {
    /**
     * 
     * @type {Array<TeachingClassTeacherInvitationjsonldTeachingClassTeacherInvitationList>}
     * @memberof InlineResponse20017
     */
    hydramember: Array<TeachingClassTeacherInvitationjsonldTeachingClassTeacherInvitationList>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20017
     */
    hydratotalItems?: number;
    /**
     * 
     * @type {InlineResponse200Hydraview}
     * @memberof InlineResponse20017
     */
    hydraview?: InlineResponse200Hydraview;
    /**
     * 
     * @type {InlineResponse200Hydrasearch}
     * @memberof InlineResponse20017
     */
    hydrasearch?: InlineResponse200Hydrasearch;
}
/**
 * 
 * @export
 * @interface InlineResponse20018
 */
export interface InlineResponse20018 {
    /**
     * 
     * @type {Array<TeachingClassTeacherjsonldTeachingClassTeacherList>}
     * @memberof InlineResponse20018
     */
    hydramember: Array<TeachingClassTeacherjsonldTeachingClassTeacherList>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20018
     */
    hydratotalItems?: number;
    /**
     * 
     * @type {InlineResponse200Hydraview}
     * @memberof InlineResponse20018
     */
    hydraview?: InlineResponse200Hydraview;
    /**
     * 
     * @type {InlineResponse200Hydrasearch}
     * @memberof InlineResponse20018
     */
    hydrasearch?: InlineResponse200Hydrasearch;
}
/**
 * 
 * @export
 * @interface InlineResponse20019
 */
export interface InlineResponse20019 {
    /**
     * 
     * @type {Array<TeachingClassjsonldTeachingClassList>}
     * @memberof InlineResponse20019
     */
    hydramember: Array<TeachingClassjsonldTeachingClassList>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20019
     */
    hydratotalItems?: number;
    /**
     * 
     * @type {InlineResponse200Hydraview}
     * @memberof InlineResponse20019
     */
    hydraview?: InlineResponse200Hydraview;
    /**
     * 
     * @type {InlineResponse200Hydrasearch}
     * @memberof InlineResponse20019
     */
    hydrasearch?: InlineResponse200Hydrasearch;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {Array<MediajsonldMediaList>}
     * @memberof InlineResponse2002
     */
    hydramember: Array<MediajsonldMediaList>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2002
     */
    hydratotalItems?: number;
    /**
     * 
     * @type {InlineResponse200Hydraview}
     * @memberof InlineResponse2002
     */
    hydraview?: InlineResponse200Hydraview;
    /**
     * 
     * @type {InlineResponse200Hydrasearch}
     * @memberof InlineResponse2002
     */
    hydrasearch?: InlineResponse200Hydrasearch;
}
/**
 * 
 * @export
 * @interface InlineResponse20020
 */
export interface InlineResponse20020 {
    /**
     * 
     * @type {Array<UserjsonldTeacherDetail>}
     * @memberof InlineResponse20020
     */
    hydramember: Array<UserjsonldTeacherDetail>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20020
     */
    hydratotalItems?: number;
    /**
     * 
     * @type {InlineResponse200Hydraview}
     * @memberof InlineResponse20020
     */
    hydraview?: InlineResponse200Hydraview;
    /**
     * 
     * @type {InlineResponse200Hydrasearch}
     * @memberof InlineResponse20020
     */
    hydrasearch?: InlineResponse200Hydrasearch;
}
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * 
     * @type {Array<NotificationjsonldNotificationList>}
     * @memberof InlineResponse2003
     */
    hydramember: Array<NotificationjsonldNotificationList>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2003
     */
    hydratotalItems?: number;
    /**
     * 
     * @type {InlineResponse200Hydraview}
     * @memberof InlineResponse2003
     */
    hydraview?: InlineResponse200Hydraview;
    /**
     * 
     * @type {InlineResponse200Hydrasearch}
     * @memberof InlineResponse2003
     */
    hydrasearch?: InlineResponse200Hydrasearch;
}
/**
 * 
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     * 
     * @type {Array<OtherUserjsonldOtherUserDetail>}
     * @memberof InlineResponse2004
     */
    hydramember: Array<OtherUserjsonldOtherUserDetail>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2004
     */
    hydratotalItems?: number;
    /**
     * 
     * @type {InlineResponse200Hydraview}
     * @memberof InlineResponse2004
     */
    hydraview?: InlineResponse200Hydraview;
    /**
     * 
     * @type {InlineResponse200Hydrasearch}
     * @memberof InlineResponse2004
     */
    hydrasearch?: InlineResponse200Hydrasearch;
}
/**
 * 
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
    /**
     * 
     * @type {Array<ParentUserjsonldParentUserDetail>}
     * @memberof InlineResponse2005
     */
    hydramember: Array<ParentUserjsonldParentUserDetail>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2005
     */
    hydratotalItems?: number;
    /**
     * 
     * @type {InlineResponse200Hydraview}
     * @memberof InlineResponse2005
     */
    hydraview?: InlineResponse200Hydraview;
    /**
     * 
     * @type {InlineResponse200Hydrasearch}
     * @memberof InlineResponse2005
     */
    hydrasearch?: InlineResponse200Hydrasearch;
}
/**
 * 
 * @export
 * @interface InlineResponse2006
 */
export interface InlineResponse2006 {
    /**
     * 
     * @type {Array<RatingMediajsonldRatingMediaList>}
     * @memberof InlineResponse2006
     */
    hydramember: Array<RatingMediajsonldRatingMediaList>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2006
     */
    hydratotalItems?: number;
    /**
     * 
     * @type {InlineResponse200Hydraview}
     * @memberof InlineResponse2006
     */
    hydraview?: InlineResponse200Hydraview;
    /**
     * 
     * @type {InlineResponse200Hydrasearch}
     * @memberof InlineResponse2006
     */
    hydrasearch?: InlineResponse200Hydrasearch;
}
/**
 * 
 * @export
 * @interface InlineResponse2007
 */
export interface InlineResponse2007 {
    /**
     * 
     * @type {Array<RatingStudentjsonldRatingStudentList>}
     * @memberof InlineResponse2007
     */
    hydramember: Array<RatingStudentjsonldRatingStudentList>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2007
     */
    hydratotalItems?: number;
    /**
     * 
     * @type {InlineResponse200Hydraview}
     * @memberof InlineResponse2007
     */
    hydraview?: InlineResponse200Hydraview;
    /**
     * 
     * @type {InlineResponse200Hydrasearch}
     * @memberof InlineResponse2007
     */
    hydrasearch?: InlineResponse200Hydrasearch;
}
/**
 * 
 * @export
 * @interface InlineResponse2008
 */
export interface InlineResponse2008 {
    /**
     * 
     * @type {Array<RatingjsonldRatingList>}
     * @memberof InlineResponse2008
     */
    hydramember: Array<RatingjsonldRatingList>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2008
     */
    hydratotalItems?: number;
    /**
     * 
     * @type {InlineResponse200Hydraview}
     * @memberof InlineResponse2008
     */
    hydraview?: InlineResponse200Hydraview;
    /**
     * 
     * @type {InlineResponse200Hydrasearch}
     * @memberof InlineResponse2008
     */
    hydrasearch?: InlineResponse200Hydrasearch;
}
/**
 * 
 * @export
 * @interface InlineResponse2009
 */
export interface InlineResponse2009 {
    /**
     * 
     * @type {Array<SchooljsonldSchoolList>}
     * @memberof InlineResponse2009
     */
    hydramember: Array<SchooljsonldSchoolList>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse2009
     */
    hydratotalItems?: number;
    /**
     * 
     * @type {InlineResponse200Hydraview}
     * @memberof InlineResponse2009
     */
    hydraview?: InlineResponse200Hydraview;
    /**
     * 
     * @type {InlineResponse200Hydrasearch}
     * @memberof InlineResponse2009
     */
    hydrasearch?: InlineResponse200Hydrasearch;
}
/**
 * 
 * @export
 * @interface InlineResponse200Hydrasearch
 */
export interface InlineResponse200Hydrasearch {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Hydrasearch
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Hydrasearch
     */
    hydratemplate?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Hydrasearch
     */
    hydravariableRepresentation?: string;
    /**
     * 
     * @type {Array<InlineResponse200HydrasearchHydramapping>}
     * @memberof InlineResponse200Hydrasearch
     */
    hydramapping?: Array<InlineResponse200HydrasearchHydramapping>;
}
/**
 * 
 * @export
 * @interface InlineResponse200HydrasearchHydramapping
 */
export interface InlineResponse200HydrasearchHydramapping {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200HydrasearchHydramapping
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200HydrasearchHydramapping
     */
    variable?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200HydrasearchHydramapping
     */
    property?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse200HydrasearchHydramapping
     */
    required?: boolean;
}
/**
 * 
 * @export
 * @interface InlineResponse200Hydraview
 */
export interface InlineResponse200Hydraview {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Hydraview
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Hydraview
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Hydraview
     */
    hydrafirst?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Hydraview
     */
    hydralast?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Hydraview
     */
    hydranext?: string;
}
/**
 * 
 * @export
 * @interface LearningSkillLearningSkillDetail
 */
export interface LearningSkillLearningSkillDetail {
    /**
     * 
     * @type {number}
     * @memberof LearningSkillLearningSkillDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof LearningSkillLearningSkillDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof LearningSkillLearningSkillDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof LearningSkillLearningSkillDetail
     */
    name: string;
    /**
     * 
     * @type {boolean}
     * @memberof LearningSkillLearningSkillDetail
     */
    isPublic?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LearningSkillLearningSkillDetail
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof LearningSkillLearningSkillDetail
     */
    colorCode?: string;
    /**
     * 
     * @type {string}
     * @memberof LearningSkillLearningSkillDetail
     */
    creator?: string;
}
/**
 * 
 * @export
 * @interface LearningSkillLearningSkillList
 */
export interface LearningSkillLearningSkillList {
    /**
     * 
     * @type {number}
     * @memberof LearningSkillLearningSkillList
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof LearningSkillLearningSkillList
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof LearningSkillLearningSkillList
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof LearningSkillLearningSkillList
     */
    name: string;
    /**
     * 
     * @type {boolean}
     * @memberof LearningSkillLearningSkillList
     */
    isPublic?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LearningSkillLearningSkillList
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof LearningSkillLearningSkillList
     */
    colorCode?: string;
    /**
     * 
     * @type {string}
     * @memberof LearningSkillLearningSkillList
     */
    creator?: string;
}
/**
 * 
 * @export
 * @interface LearningSkillLearningSkillWrite
 */
export interface LearningSkillLearningSkillWrite {
    /**
     * 
     * @type {string}
     * @memberof LearningSkillLearningSkillWrite
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof LearningSkillLearningSkillWrite
     */
    avatar?: string;
}
/**
 * 
 * @export
 * @interface LearningSkilljsonldLearningSkillDetail
 */
export interface LearningSkilljsonldLearningSkillDetail {
    /**
     * 
     * @type {string}
     * @memberof LearningSkilljsonldLearningSkillDetail
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof LearningSkilljsonldLearningSkillDetail
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof LearningSkilljsonldLearningSkillDetail
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof LearningSkilljsonldLearningSkillDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof LearningSkilljsonldLearningSkillDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof LearningSkilljsonldLearningSkillDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof LearningSkilljsonldLearningSkillDetail
     */
    name: string;
    /**
     * 
     * @type {boolean}
     * @memberof LearningSkilljsonldLearningSkillDetail
     */
    isPublic?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LearningSkilljsonldLearningSkillDetail
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof LearningSkilljsonldLearningSkillDetail
     */
    colorCode?: string;
    /**
     * 
     * @type {string}
     * @memberof LearningSkilljsonldLearningSkillDetail
     */
    creator?: string;
}
/**
 * 
 * @export
 * @interface LearningSkilljsonldLearningSkillList
 */
export interface LearningSkilljsonldLearningSkillList {
    /**
     * 
     * @type {string}
     * @memberof LearningSkilljsonldLearningSkillList
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof LearningSkilljsonldLearningSkillList
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof LearningSkilljsonldLearningSkillList
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof LearningSkilljsonldLearningSkillList
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof LearningSkilljsonldLearningSkillList
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof LearningSkilljsonldLearningSkillList
     */
    name: string;
    /**
     * 
     * @type {boolean}
     * @memberof LearningSkilljsonldLearningSkillList
     */
    isPublic?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LearningSkilljsonldLearningSkillList
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof LearningSkilljsonldLearningSkillList
     */
    colorCode?: string;
    /**
     * 
     * @type {string}
     * @memberof LearningSkilljsonldLearningSkillList
     */
    creator?: string;
}
/**
 * 
 * @export
 * @interface LearningSkilljsonldLearningSkillWrite
 */
export interface LearningSkilljsonldLearningSkillWrite {
    /**
     * 
     * @type {string}
     * @memberof LearningSkilljsonldLearningSkillWrite
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof LearningSkilljsonldLearningSkillWrite
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof LearningSkilljsonldLearningSkillWrite
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof LearningSkilljsonldLearningSkillWrite
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof LearningSkilljsonldLearningSkillWrite
     */
    avatar?: string;
}
/**
 * 
 * @export
 * @interface MediaMediaDetail
 */
export interface MediaMediaDetail {
    /**
     * 
     * @type {number}
     * @memberof MediaMediaDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof MediaMediaDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof MediaMediaDetail
     */
    updated?: Date;
    /**
     * 
     * @type {number}
     * @memberof MediaMediaDetail
     */
    mediaType?: number;
    /**
     * 
     * @type {string}
     * @memberof MediaMediaDetail
     */
    fileName?: string;
    /**
     * 
     * @type {number}
     * @memberof MediaMediaDetail
     */
    fileSize?: number;
    /**
     * 
     * @type {string}
     * @memberof MediaMediaDetail
     */
    fileMimeType?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaMediaDetail
     */
    fileOriginalName?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaMediaDetail
     */
    fileDimensions?: string;
    /**
     * 
     * @type {number}
     * @memberof MediaMediaDetail
     */
    duration?: number;
}
/**
 * 
 * @export
 * @interface MediaMediaList
 */
export interface MediaMediaList {
    /**
     * 
     * @type {number}
     * @memberof MediaMediaList
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof MediaMediaList
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof MediaMediaList
     */
    updated?: Date;
    /**
     * 
     * @type {number}
     * @memberof MediaMediaList
     */
    mediaType?: number;
    /**
     * 
     * @type {string}
     * @memberof MediaMediaList
     */
    fileName?: string;
    /**
     * 
     * @type {number}
     * @memberof MediaMediaList
     */
    fileSize?: number;
    /**
     * 
     * @type {string}
     * @memberof MediaMediaList
     */
    fileMimeType?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaMediaList
     */
    fileOriginalName?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaMediaList
     */
    fileDimensions?: string;
    /**
     * 
     * @type {number}
     * @memberof MediaMediaList
     */
    duration?: number;
}
/**
 * 
 * @export
 * @interface MediaMediaWrite
 */
export interface MediaMediaWrite {
    /**
     * 
     * @type {number}
     * @memberof MediaMediaWrite
     */
    mediaType?: number;
}
/**
 * 
 * @export
 * @interface MediaUserDetail
 */
export interface MediaUserDetail {
    /**
     * 
     * @type {number}
     * @memberof MediaUserDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof MediaUserDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof MediaUserDetail
     */
    updated?: Date;
    /**
     * 
     * @type {number}
     * @memberof MediaUserDetail
     */
    mediaType?: number;
    /**
     * 
     * @type {string}
     * @memberof MediaUserDetail
     */
    fileName?: string;
}
/**
 * 
 * @export
 * @interface MediajsonldMediaDetail
 */
export interface MediajsonldMediaDetail {
    /**
     * 
     * @type {string}
     * @memberof MediajsonldMediaDetail
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof MediajsonldMediaDetail
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof MediajsonldMediaDetail
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof MediajsonldMediaDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof MediajsonldMediaDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof MediajsonldMediaDetail
     */
    updated?: Date;
    /**
     * 
     * @type {number}
     * @memberof MediajsonldMediaDetail
     */
    mediaType?: number;
    /**
     * 
     * @type {string}
     * @memberof MediajsonldMediaDetail
     */
    fileName?: string;
    /**
     * 
     * @type {number}
     * @memberof MediajsonldMediaDetail
     */
    fileSize?: number;
    /**
     * 
     * @type {string}
     * @memberof MediajsonldMediaDetail
     */
    fileMimeType?: string;
    /**
     * 
     * @type {string}
     * @memberof MediajsonldMediaDetail
     */
    fileOriginalName?: string;
    /**
     * 
     * @type {string}
     * @memberof MediajsonldMediaDetail
     */
    fileDimensions?: string;
    /**
     * 
     * @type {number}
     * @memberof MediajsonldMediaDetail
     */
    duration?: number;
}
/**
 * 
 * @export
 * @interface MediajsonldMediaList
 */
export interface MediajsonldMediaList {
    /**
     * 
     * @type {string}
     * @memberof MediajsonldMediaList
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof MediajsonldMediaList
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof MediajsonldMediaList
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof MediajsonldMediaList
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof MediajsonldMediaList
     */
    updated?: Date;
    /**
     * 
     * @type {number}
     * @memberof MediajsonldMediaList
     */
    mediaType?: number;
    /**
     * 
     * @type {string}
     * @memberof MediajsonldMediaList
     */
    fileName?: string;
    /**
     * 
     * @type {number}
     * @memberof MediajsonldMediaList
     */
    fileSize?: number;
    /**
     * 
     * @type {string}
     * @memberof MediajsonldMediaList
     */
    fileMimeType?: string;
    /**
     * 
     * @type {string}
     * @memberof MediajsonldMediaList
     */
    fileOriginalName?: string;
    /**
     * 
     * @type {string}
     * @memberof MediajsonldMediaList
     */
    fileDimensions?: string;
    /**
     * 
     * @type {number}
     * @memberof MediajsonldMediaList
     */
    duration?: number;
}
/**
 * 
 * @export
 * @interface MediajsonldMediaWrite
 */
export interface MediajsonldMediaWrite {
    /**
     * 
     * @type {string}
     * @memberof MediajsonldMediaWrite
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof MediajsonldMediaWrite
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof MediajsonldMediaWrite
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof MediajsonldMediaWrite
     */
    mediaType?: number;
}
/**
 * 
 * @export
 * @interface MediajsonldUserDetail
 */
export interface MediajsonldUserDetail {
    /**
     * 
     * @type {string}
     * @memberof MediajsonldUserDetail
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof MediajsonldUserDetail
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof MediajsonldUserDetail
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof MediajsonldUserDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof MediajsonldUserDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof MediajsonldUserDetail
     */
    updated?: Date;
    /**
     * 
     * @type {number}
     * @memberof MediajsonldUserDetail
     */
    mediaType?: number;
    /**
     * 
     * @type {string}
     * @memberof MediajsonldUserDetail
     */
    fileName?: string;
}
/**
 * Class Notification
 * @export
 * @interface NotificationNotificationDetail
 */
export interface NotificationNotificationDetail {
    /**
     * 
     * @type {number}
     * @memberof NotificationNotificationDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof NotificationNotificationDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof NotificationNotificationDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof NotificationNotificationDetail
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationNotificationDetail
     */
    message: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationNotificationDetail
     */
    user?: string;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationNotificationDetail
     */
    isRead?: boolean;
    /**
     * 
     * @type {number}
     * @memberof NotificationNotificationDetail
     */
    entityType?: number;
    /**
     * 
     * @type {number}
     * @memberof NotificationNotificationDetail
     */
    entityId?: number;
    /**
     * 
     * @type {number}
     * @memberof NotificationNotificationDetail
     */
    notificationType?: number;
    /**
     * 
     * @type {number}
     * @memberof NotificationNotificationDetail
     */
    platformType?: number;
}
/**
 * Class Notification
 * @export
 * @interface NotificationNotificationList
 */
export interface NotificationNotificationList {
    /**
     * 
     * @type {number}
     * @memberof NotificationNotificationList
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof NotificationNotificationList
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof NotificationNotificationList
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof NotificationNotificationList
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationNotificationList
     */
    message: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationNotificationList
     */
    user?: string;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationNotificationList
     */
    isRead?: boolean;
    /**
     * 
     * @type {number}
     * @memberof NotificationNotificationList
     */
    entityType?: number;
    /**
     * 
     * @type {number}
     * @memberof NotificationNotificationList
     */
    entityId?: number;
    /**
     * 
     * @type {number}
     * @memberof NotificationNotificationList
     */
    notificationType?: number;
    /**
     * 
     * @type {number}
     * @memberof NotificationNotificationList
     */
    platformType?: number;
}
/**
 * Class Notification
 * @export
 * @interface NotificationNotificationWrite
 */
export interface NotificationNotificationWrite {
    /**
     * 
     * @type {boolean}
     * @memberof NotificationNotificationWrite
     */
    isRead?: boolean;
}
/**
 * Class Notification
 * @export
 * @interface NotificationjsonldNotificationDetail
 */
export interface NotificationjsonldNotificationDetail {
    /**
     * 
     * @type {string}
     * @memberof NotificationjsonldNotificationDetail
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationjsonldNotificationDetail
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationjsonldNotificationDetail
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof NotificationjsonldNotificationDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof NotificationjsonldNotificationDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof NotificationjsonldNotificationDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof NotificationjsonldNotificationDetail
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationjsonldNotificationDetail
     */
    message: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationjsonldNotificationDetail
     */
    user?: string;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationjsonldNotificationDetail
     */
    isRead?: boolean;
    /**
     * 
     * @type {number}
     * @memberof NotificationjsonldNotificationDetail
     */
    entityType?: number;
    /**
     * 
     * @type {number}
     * @memberof NotificationjsonldNotificationDetail
     */
    entityId?: number;
    /**
     * 
     * @type {number}
     * @memberof NotificationjsonldNotificationDetail
     */
    notificationType?: number;
    /**
     * 
     * @type {number}
     * @memberof NotificationjsonldNotificationDetail
     */
    platformType?: number;
}
/**
 * Class Notification
 * @export
 * @interface NotificationjsonldNotificationList
 */
export interface NotificationjsonldNotificationList {
    /**
     * 
     * @type {string}
     * @memberof NotificationjsonldNotificationList
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationjsonldNotificationList
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof NotificationjsonldNotificationList
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof NotificationjsonldNotificationList
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof NotificationjsonldNotificationList
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof NotificationjsonldNotificationList
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationjsonldNotificationList
     */
    message: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationjsonldNotificationList
     */
    user?: string;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationjsonldNotificationList
     */
    isRead?: boolean;
    /**
     * 
     * @type {number}
     * @memberof NotificationjsonldNotificationList
     */
    entityType?: number;
    /**
     * 
     * @type {number}
     * @memberof NotificationjsonldNotificationList
     */
    entityId?: number;
    /**
     * 
     * @type {number}
     * @memberof NotificationjsonldNotificationList
     */
    notificationType?: number;
    /**
     * 
     * @type {number}
     * @memberof NotificationjsonldNotificationList
     */
    platformType?: number;
}
/**
 * Class Notification
 * @export
 * @interface NotificationjsonldNotificationWrite
 */
export interface NotificationjsonldNotificationWrite {
    /**
     * 
     * @type {string}
     * @memberof NotificationjsonldNotificationWrite
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationjsonldNotificationWrite
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationjsonldNotificationWrite
     */
    type?: string;
    /**
     * 
     * @type {boolean}
     * @memberof NotificationjsonldNotificationWrite
     */
    isRead?: boolean;
}
/**
 * 
 * @export
 * @interface OtherUserOtherUserDetail
 */
export interface OtherUserOtherUserDetail {
    /**
     * 
     * @type {number}
     * @memberof OtherUserOtherUserDetail
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof OtherUserOtherUserDetail
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof OtherUserOtherUserDetail
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof OtherUserOtherUserDetail
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof OtherUserOtherUserDetail
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof OtherUserOtherUserDetail
     */
    school?: string;
    /**
     * 
     * @type {string}
     * @memberof OtherUserOtherUserDetail
     */
    occupation?: string;
}
/**
 * 
 * @export
 * @interface OtherUserjsonldOtherUserDetail
 */
export interface OtherUserjsonldOtherUserDetail {
    /**
     * 
     * @type {string}
     * @memberof OtherUserjsonldOtherUserDetail
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof OtherUserjsonldOtherUserDetail
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof OtherUserjsonldOtherUserDetail
     */
    context?: string;
    /**
     * 
     * @type {number}
     * @memberof OtherUserjsonldOtherUserDetail
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof OtherUserjsonldOtherUserDetail
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof OtherUserjsonldOtherUserDetail
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof OtherUserjsonldOtherUserDetail
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof OtherUserjsonldOtherUserDetail
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof OtherUserjsonldOtherUserDetail
     */
    school?: string;
    /**
     * 
     * @type {string}
     * @memberof OtherUserjsonldOtherUserDetail
     */
    occupation?: string;
}
/**
 * 
 * @export
 * @interface ParentUserParentUserDetail
 */
export interface ParentUserParentUserDetail {
    /**
     * 
     * @type {number}
     * @memberof ParentUserParentUserDetail
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ParentUserParentUserDetail
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof ParentUserParentUserDetail
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof ParentUserParentUserDetail
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof ParentUserParentUserDetail
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof ParentUserParentUserDetail
     */
    school?: string;
    /**
     * 
     * @type {string}
     * @memberof ParentUserParentUserDetail
     */
    occupation?: string;
}
/**
 * 
 * @export
 * @interface ParentUserjsonldParentUserDetail
 */
export interface ParentUserjsonldParentUserDetail {
    /**
     * 
     * @type {string}
     * @memberof ParentUserjsonldParentUserDetail
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ParentUserjsonldParentUserDetail
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof ParentUserjsonldParentUserDetail
     */
    context?: string;
    /**
     * 
     * @type {number}
     * @memberof ParentUserjsonldParentUserDetail
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ParentUserjsonldParentUserDetail
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof ParentUserjsonldParentUserDetail
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof ParentUserjsonldParentUserDetail
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof ParentUserjsonldParentUserDetail
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof ParentUserjsonldParentUserDetail
     */
    school?: string;
    /**
     * 
     * @type {string}
     * @memberof ParentUserjsonldParentUserDetail
     */
    occupation?: string;
}
/**
 * 
 * @export
 * @interface RatingMediaRatingMediaDetail
 */
export interface RatingMediaRatingMediaDetail {
    /**
     * 
     * @type {number}
     * @memberof RatingMediaRatingMediaDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof RatingMediaRatingMediaDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof RatingMediaRatingMediaDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof RatingMediaRatingMediaDetail
     */
    rating?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingMediaRatingMediaDetail
     */
    media?: string;
}
/**
 * 
 * @export
 * @interface RatingMediaRatingMediaList
 */
export interface RatingMediaRatingMediaList {
    /**
     * 
     * @type {number}
     * @memberof RatingMediaRatingMediaList
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof RatingMediaRatingMediaList
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof RatingMediaRatingMediaList
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof RatingMediaRatingMediaList
     */
    rating?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingMediaRatingMediaList
     */
    media?: string;
}
/**
 * 
 * @export
 * @interface RatingMediaRatingMediaWrite
 */
export interface RatingMediaRatingMediaWrite {
    /**
     * 
     * @type {string}
     * @memberof RatingMediaRatingMediaWrite
     */
    rating?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingMediaRatingMediaWrite
     */
    media?: string;
}
/**
 * 
 * @export
 * @interface RatingMediajsonldRatingMediaDetail
 */
export interface RatingMediajsonldRatingMediaDetail {
    /**
     * 
     * @type {string}
     * @memberof RatingMediajsonldRatingMediaDetail
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingMediajsonldRatingMediaDetail
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingMediajsonldRatingMediaDetail
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof RatingMediajsonldRatingMediaDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof RatingMediajsonldRatingMediaDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof RatingMediajsonldRatingMediaDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof RatingMediajsonldRatingMediaDetail
     */
    rating?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingMediajsonldRatingMediaDetail
     */
    media?: string;
}
/**
 * 
 * @export
 * @interface RatingMediajsonldRatingMediaList
 */
export interface RatingMediajsonldRatingMediaList {
    /**
     * 
     * @type {string}
     * @memberof RatingMediajsonldRatingMediaList
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingMediajsonldRatingMediaList
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof RatingMediajsonldRatingMediaList
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof RatingMediajsonldRatingMediaList
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof RatingMediajsonldRatingMediaList
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof RatingMediajsonldRatingMediaList
     */
    rating?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingMediajsonldRatingMediaList
     */
    media?: string;
}
/**
 * 
 * @export
 * @interface RatingMediajsonldRatingMediaWrite
 */
export interface RatingMediajsonldRatingMediaWrite {
    /**
     * 
     * @type {string}
     * @memberof RatingMediajsonldRatingMediaWrite
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingMediajsonldRatingMediaWrite
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingMediajsonldRatingMediaWrite
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingMediajsonldRatingMediaWrite
     */
    rating?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingMediajsonldRatingMediaWrite
     */
    media?: string;
}
/**
 * 
 * @export
 * @interface RatingRatingDetail
 */
export interface RatingRatingDetail {
    /**
     * 
     * @type {number}
     * @memberof RatingRatingDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof RatingRatingDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof RatingRatingDetail
     */
    updated?: Date;
    /**
     * 
     * @type {Date}
     * @memberof RatingRatingDetail
     */
    date: Date;
    /**
     * 
     * @type {string}
     * @memberof RatingRatingDetail
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof RatingRatingDetail
     */
    points: number;
    /**
     * 
     * @type {string}
     * @memberof RatingRatingDetail
     */
    teachingClass?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingRatingDetail
     */
    learningSkill?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingRatingDetail
     */
    creator?: string;
}
/**
 * 
 * @export
 * @interface RatingRatingList
 */
export interface RatingRatingList {
    /**
     * 
     * @type {number}
     * @memberof RatingRatingList
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof RatingRatingList
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof RatingRatingList
     */
    updated?: Date;
    /**
     * 
     * @type {Date}
     * @memberof RatingRatingList
     */
    date: Date;
    /**
     * 
     * @type {string}
     * @memberof RatingRatingList
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof RatingRatingList
     */
    points: number;
    /**
     * 
     * @type {string}
     * @memberof RatingRatingList
     */
    teachingClass?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingRatingList
     */
    learningSkill?: string;
    /**
     * 
     * @type {UserRatingList}
     * @memberof RatingRatingList
     */
    creator?: UserRatingList;
}
/**
 * 
 * @export
 * @interface RatingRatingWrite
 */
export interface RatingRatingWrite {
    /**
     * 
     * @type {Date}
     * @memberof RatingRatingWrite
     */
    date: Date;
    /**
     * 
     * @type {string}
     * @memberof RatingRatingWrite
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof RatingRatingWrite
     */
    points: number;
    /**
     * 
     * @type {string}
     * @memberof RatingRatingWrite
     */
    teachingClass?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingRatingWrite
     */
    learningSkill?: string;
}
/**
 * 
 * @export
 * @interface RatingStudentRatingStudentDetail
 */
export interface RatingStudentRatingStudentDetail {
    /**
     * 
     * @type {number}
     * @memberof RatingStudentRatingStudentDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof RatingStudentRatingStudentDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof RatingStudentRatingStudentDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof RatingStudentRatingStudentDetail
     */
    rating?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingStudentRatingStudentDetail
     */
    student?: string;
}
/**
 * 
 * @export
 * @interface RatingStudentRatingStudentList
 */
export interface RatingStudentRatingStudentList {
    /**
     * 
     * @type {number}
     * @memberof RatingStudentRatingStudentList
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof RatingStudentRatingStudentList
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof RatingStudentRatingStudentList
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof RatingStudentRatingStudentList
     */
    rating?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingStudentRatingStudentList
     */
    student?: string;
}
/**
 * 
 * @export
 * @interface RatingStudentRatingStudentWrite
 */
export interface RatingStudentRatingStudentWrite {
    /**
     * 
     * @type {string}
     * @memberof RatingStudentRatingStudentWrite
     */
    rating?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingStudentRatingStudentWrite
     */
    student?: string;
}
/**
 * 
 * @export
 * @interface RatingStudentjsonldRatingStudentDetail
 */
export interface RatingStudentjsonldRatingStudentDetail {
    /**
     * 
     * @type {string}
     * @memberof RatingStudentjsonldRatingStudentDetail
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingStudentjsonldRatingStudentDetail
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingStudentjsonldRatingStudentDetail
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof RatingStudentjsonldRatingStudentDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof RatingStudentjsonldRatingStudentDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof RatingStudentjsonldRatingStudentDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof RatingStudentjsonldRatingStudentDetail
     */
    rating?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingStudentjsonldRatingStudentDetail
     */
    student?: string;
}
/**
 * 
 * @export
 * @interface RatingStudentjsonldRatingStudentList
 */
export interface RatingStudentjsonldRatingStudentList {
    /**
     * 
     * @type {string}
     * @memberof RatingStudentjsonldRatingStudentList
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingStudentjsonldRatingStudentList
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof RatingStudentjsonldRatingStudentList
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof RatingStudentjsonldRatingStudentList
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof RatingStudentjsonldRatingStudentList
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof RatingStudentjsonldRatingStudentList
     */
    rating?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingStudentjsonldRatingStudentList
     */
    student?: string;
}
/**
 * 
 * @export
 * @interface RatingStudentjsonldRatingStudentWrite
 */
export interface RatingStudentjsonldRatingStudentWrite {
    /**
     * 
     * @type {string}
     * @memberof RatingStudentjsonldRatingStudentWrite
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingStudentjsonldRatingStudentWrite
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingStudentjsonldRatingStudentWrite
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingStudentjsonldRatingStudentWrite
     */
    rating?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingStudentjsonldRatingStudentWrite
     */
    student?: string;
}
/**
 * 
 * @export
 * @interface RatingjsonldRatingDetail
 */
export interface RatingjsonldRatingDetail {
    /**
     * 
     * @type {string}
     * @memberof RatingjsonldRatingDetail
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingjsonldRatingDetail
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingjsonldRatingDetail
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof RatingjsonldRatingDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof RatingjsonldRatingDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof RatingjsonldRatingDetail
     */
    updated?: Date;
    /**
     * 
     * @type {Date}
     * @memberof RatingjsonldRatingDetail
     */
    date: Date;
    /**
     * 
     * @type {string}
     * @memberof RatingjsonldRatingDetail
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof RatingjsonldRatingDetail
     */
    points: number;
    /**
     * 
     * @type {string}
     * @memberof RatingjsonldRatingDetail
     */
    teachingClass?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingjsonldRatingDetail
     */
    learningSkill?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingjsonldRatingDetail
     */
    creator?: string;
}
/**
 * 
 * @export
 * @interface RatingjsonldRatingList
 */
export interface RatingjsonldRatingList {
    /**
     * 
     * @type {string}
     * @memberof RatingjsonldRatingList
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingjsonldRatingList
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof RatingjsonldRatingList
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof RatingjsonldRatingList
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof RatingjsonldRatingList
     */
    updated?: Date;
    /**
     * 
     * @type {Date}
     * @memberof RatingjsonldRatingList
     */
    date: Date;
    /**
     * 
     * @type {string}
     * @memberof RatingjsonldRatingList
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof RatingjsonldRatingList
     */
    points: number;
    /**
     * 
     * @type {string}
     * @memberof RatingjsonldRatingList
     */
    teachingClass?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingjsonldRatingList
     */
    learningSkill?: string;
    /**
     * 
     * @type {UserjsonldRatingList}
     * @memberof RatingjsonldRatingList
     */
    creator?: UserjsonldRatingList;
}
/**
 * 
 * @export
 * @interface RatingjsonldRatingWrite
 */
export interface RatingjsonldRatingWrite {
    /**
     * 
     * @type {string}
     * @memberof RatingjsonldRatingWrite
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingjsonldRatingWrite
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingjsonldRatingWrite
     */
    type?: string;
    /**
     * 
     * @type {Date}
     * @memberof RatingjsonldRatingWrite
     */
    date: Date;
    /**
     * 
     * @type {string}
     * @memberof RatingjsonldRatingWrite
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof RatingjsonldRatingWrite
     */
    points: number;
    /**
     * 
     * @type {string}
     * @memberof RatingjsonldRatingWrite
     */
    teachingClass?: string;
    /**
     * 
     * @type {string}
     * @memberof RatingjsonldRatingWrite
     */
    learningSkill?: string;
}
/**
 * Class School
 * @export
 * @interface SchoolSchoolDetail
 */
export interface SchoolSchoolDetail {
    /**
     * 
     * @type {number}
     * @memberof SchoolSchoolDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof SchoolSchoolDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof SchoolSchoolDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof SchoolSchoolDetail
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof SchoolSchoolDetail
     */
    numTeachers?: number;
    /**
     * 
     * @type {GeolocationSchoolDetail}
     * @memberof SchoolSchoolDetail
     */
    geolocation?: GeolocationSchoolDetail;
}
/**
 * Class School
 * @export
 * @interface SchoolSchoolList
 */
export interface SchoolSchoolList {
    /**
     * 
     * @type {number}
     * @memberof SchoolSchoolList
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof SchoolSchoolList
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof SchoolSchoolList
     */
    numTeachers?: number;
    /**
     * 
     * @type {GeolocationSchoolList}
     * @memberof SchoolSchoolList
     */
    geolocation?: GeolocationSchoolList;
}
/**
 * Class School
 * @export
 * @interface SchoolSchoolWrite
 */
export interface SchoolSchoolWrite {
    /**
     * 
     * @type {string}
     * @memberof SchoolSchoolWrite
     */
    name?: string;
}
/**
 * Class School
 * @export
 * @interface SchoolTeachingClassDetail
 */
export interface SchoolTeachingClassDetail {
    /**
     * 
     * @type {number}
     * @memberof SchoolTeachingClassDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof SchoolTeachingClassDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof SchoolTeachingClassDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof SchoolTeachingClassDetail
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof SchoolTeachingClassDetail
     */
    numTeachers?: number;
}
/**
 * Class School
 * @export
 * @interface SchooljsonldSchoolDetail
 */
export interface SchooljsonldSchoolDetail {
    /**
     * 
     * @type {string}
     * @memberof SchooljsonldSchoolDetail
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof SchooljsonldSchoolDetail
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof SchooljsonldSchoolDetail
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof SchooljsonldSchoolDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof SchooljsonldSchoolDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof SchooljsonldSchoolDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof SchooljsonldSchoolDetail
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof SchooljsonldSchoolDetail
     */
    numTeachers?: number;
    /**
     * 
     * @type {GeolocationjsonldSchoolDetail}
     * @memberof SchooljsonldSchoolDetail
     */
    geolocation?: GeolocationjsonldSchoolDetail;
}
/**
 * Class School
 * @export
 * @interface SchooljsonldSchoolList
 */
export interface SchooljsonldSchoolList {
    /**
     * 
     * @type {string}
     * @memberof SchooljsonldSchoolList
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof SchooljsonldSchoolList
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof SchooljsonldSchoolList
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof SchooljsonldSchoolList
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof SchooljsonldSchoolList
     */
    numTeachers?: number;
    /**
     * 
     * @type {GeolocationjsonldSchoolList}
     * @memberof SchooljsonldSchoolList
     */
    geolocation?: GeolocationjsonldSchoolList;
}
/**
 * Class School
 * @export
 * @interface SchooljsonldSchoolWrite
 */
export interface SchooljsonldSchoolWrite {
    /**
     * 
     * @type {string}
     * @memberof SchooljsonldSchoolWrite
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof SchooljsonldSchoolWrite
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof SchooljsonldSchoolWrite
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof SchooljsonldSchoolWrite
     */
    name?: string;
}
/**
 * Class School
 * @export
 * @interface SchooljsonldTeachingClassDetail
 */
export interface SchooljsonldTeachingClassDetail {
    /**
     * 
     * @type {string}
     * @memberof SchooljsonldTeachingClassDetail
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof SchooljsonldTeachingClassDetail
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof SchooljsonldTeachingClassDetail
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof SchooljsonldTeachingClassDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof SchooljsonldTeachingClassDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof SchooljsonldTeachingClassDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof SchooljsonldTeachingClassDetail
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof SchooljsonldTeachingClassDetail
     */
    numTeachers?: number;
}
/**
 * 
 * @export
 * @interface StudentProfileUserInvitationStudentProfileUserInvitationDetail
 */
export interface StudentProfileUserInvitationStudentProfileUserInvitationDetail {
    /**
     * 
     * @type {number}
     * @memberof StudentProfileUserInvitationStudentProfileUserInvitationDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof StudentProfileUserInvitationStudentProfileUserInvitationDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof StudentProfileUserInvitationStudentProfileUserInvitationDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserInvitationStudentProfileUserInvitationDetail
     */
    teachingClass?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserInvitationStudentProfileUserInvitationDetail
     */
    user?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserInvitationStudentProfileUserInvitationDetail
     */
    student?: string;
    /**
     * 
     * @type {boolean}
     * @memberof StudentProfileUserInvitationStudentProfileUserInvitationDetail
     */
    isApproved?: boolean;
}
/**
 * 
 * @export
 * @interface StudentProfileUserInvitationStudentProfileUserInvitationList
 */
export interface StudentProfileUserInvitationStudentProfileUserInvitationList {
    /**
     * 
     * @type {number}
     * @memberof StudentProfileUserInvitationStudentProfileUserInvitationList
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof StudentProfileUserInvitationStudentProfileUserInvitationList
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof StudentProfileUserInvitationStudentProfileUserInvitationList
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserInvitationStudentProfileUserInvitationList
     */
    teachingClass?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserInvitationStudentProfileUserInvitationList
     */
    user?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserInvitationStudentProfileUserInvitationList
     */
    student?: string;
    /**
     * 
     * @type {boolean}
     * @memberof StudentProfileUserInvitationStudentProfileUserInvitationList
     */
    isApproved?: boolean;
}
/**
 * 
 * @export
 * @interface StudentProfileUserInvitationjsonldStudentProfileUserInvitationDetail
 */
export interface StudentProfileUserInvitationjsonldStudentProfileUserInvitationDetail {
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserInvitationjsonldStudentProfileUserInvitationDetail
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserInvitationjsonldStudentProfileUserInvitationDetail
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserInvitationjsonldStudentProfileUserInvitationDetail
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof StudentProfileUserInvitationjsonldStudentProfileUserInvitationDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof StudentProfileUserInvitationjsonldStudentProfileUserInvitationDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof StudentProfileUserInvitationjsonldStudentProfileUserInvitationDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserInvitationjsonldStudentProfileUserInvitationDetail
     */
    teachingClass?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserInvitationjsonldStudentProfileUserInvitationDetail
     */
    user?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserInvitationjsonldStudentProfileUserInvitationDetail
     */
    student?: string;
    /**
     * 
     * @type {boolean}
     * @memberof StudentProfileUserInvitationjsonldStudentProfileUserInvitationDetail
     */
    isApproved?: boolean;
}
/**
 * 
 * @export
 * @interface StudentProfileUserInvitationjsonldStudentProfileUserInvitationList
 */
export interface StudentProfileUserInvitationjsonldStudentProfileUserInvitationList {
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserInvitationjsonldStudentProfileUserInvitationList
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserInvitationjsonldStudentProfileUserInvitationList
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof StudentProfileUserInvitationjsonldStudentProfileUserInvitationList
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof StudentProfileUserInvitationjsonldStudentProfileUserInvitationList
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof StudentProfileUserInvitationjsonldStudentProfileUserInvitationList
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserInvitationjsonldStudentProfileUserInvitationList
     */
    teachingClass?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserInvitationjsonldStudentProfileUserInvitationList
     */
    user?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserInvitationjsonldStudentProfileUserInvitationList
     */
    student?: string;
    /**
     * 
     * @type {boolean}
     * @memberof StudentProfileUserInvitationjsonldStudentProfileUserInvitationList
     */
    isApproved?: boolean;
}
/**
 * 
 * @export
 * @interface StudentProfileUserStudentProfileUserDetail
 */
export interface StudentProfileUserStudentProfileUserDetail {
    /**
     * 
     * @type {number}
     * @memberof StudentProfileUserStudentProfileUserDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof StudentProfileUserStudentProfileUserDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof StudentProfileUserStudentProfileUserDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserStudentProfileUserDetail
     */
    teachingClass?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserStudentProfileUserDetail
     */
    user?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserStudentProfileUserDetail
     */
    student?: string;
}
/**
 * 
 * @export
 * @interface StudentProfileUserStudentProfileUserList
 */
export interface StudentProfileUserStudentProfileUserList {
    /**
     * 
     * @type {number}
     * @memberof StudentProfileUserStudentProfileUserList
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof StudentProfileUserStudentProfileUserList
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof StudentProfileUserStudentProfileUserList
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserStudentProfileUserList
     */
    teachingClass?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserStudentProfileUserList
     */
    user?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserStudentProfileUserList
     */
    student?: string;
}
/**
 * 
 * @export
 * @interface StudentProfileUserjsonldStudentProfileUserDetail
 */
export interface StudentProfileUserjsonldStudentProfileUserDetail {
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserjsonldStudentProfileUserDetail
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserjsonldStudentProfileUserDetail
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserjsonldStudentProfileUserDetail
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof StudentProfileUserjsonldStudentProfileUserDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof StudentProfileUserjsonldStudentProfileUserDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof StudentProfileUserjsonldStudentProfileUserDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserjsonldStudentProfileUserDetail
     */
    teachingClass?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserjsonldStudentProfileUserDetail
     */
    user?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserjsonldStudentProfileUserDetail
     */
    student?: string;
}
/**
 * 
 * @export
 * @interface StudentProfileUserjsonldStudentProfileUserList
 */
export interface StudentProfileUserjsonldStudentProfileUserList {
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserjsonldStudentProfileUserList
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserjsonldStudentProfileUserList
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof StudentProfileUserjsonldStudentProfileUserList
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof StudentProfileUserjsonldStudentProfileUserList
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof StudentProfileUserjsonldStudentProfileUserList
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserjsonldStudentProfileUserList
     */
    teachingClass?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserjsonldStudentProfileUserList
     */
    user?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentProfileUserjsonldStudentProfileUserList
     */
    student?: string;
}
/**
 * 
 * @export
 * @interface StudentStudentDetail
 */
export interface StudentStudentDetail {
    /**
     * 
     * @type {number}
     * @memberof StudentStudentDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof StudentStudentDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof StudentStudentDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof StudentStudentDetail
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentStudentDetail
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentStudentDetail
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof StudentStudentDetail
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentStudentDetail
     */
    creator?: string;
}
/**
 * 
 * @export
 * @interface StudentStudentList
 */
export interface StudentStudentList {
    /**
     * 
     * @type {number}
     * @memberof StudentStudentList
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof StudentStudentList
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof StudentStudentList
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof StudentStudentList
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentStudentList
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentStudentList
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof StudentStudentList
     */
    avatar?: string;
}
/**
 * 
 * @export
 * @interface StudentTeachingClassDetail
 */
export interface StudentTeachingClassDetail {
    /**
     * 
     * @type {number}
     * @memberof StudentTeachingClassDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof StudentTeachingClassDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof StudentTeachingClassDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof StudentTeachingClassDetail
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentTeachingClassDetail
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentTeachingClassDetail
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof StudentTeachingClassDetail
     */
    avatar?: string;
}
/**
 * 
 * @export
 * @interface StudentTeachingClassStudentList
 */
export interface StudentTeachingClassStudentList {
    /**
     * 
     * @type {number}
     * @memberof StudentTeachingClassStudentList
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof StudentTeachingClassStudentList
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentTeachingClassStudentList
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentTeachingClassStudentList
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof StudentTeachingClassStudentList
     */
    avatar?: string;
}
/**
 * 
 * @export
 * @interface StudentUserStudentUserDetail
 */
export interface StudentUserStudentUserDetail {
    /**
     * 
     * @type {number}
     * @memberof StudentUserStudentUserDetail
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof StudentUserStudentUserDetail
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentUserStudentUserDetail
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentUserStudentUserDetail
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentUserStudentUserDetail
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentUserStudentUserDetail
     */
    school?: string;
}
/**
 * 
 * @export
 * @interface StudentUserjsonldStudentUserDetail
 */
export interface StudentUserjsonldStudentUserDetail {
    /**
     * 
     * @type {string}
     * @memberof StudentUserjsonldStudentUserDetail
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentUserjsonldStudentUserDetail
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentUserjsonldStudentUserDetail
     */
    context?: string;
    /**
     * 
     * @type {number}
     * @memberof StudentUserjsonldStudentUserDetail
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof StudentUserjsonldStudentUserDetail
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentUserjsonldStudentUserDetail
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentUserjsonldStudentUserDetail
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentUserjsonldStudentUserDetail
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentUserjsonldStudentUserDetail
     */
    school?: string;
}
/**
 * 
 * @export
 * @interface StudentjsonldStudentDetail
 */
export interface StudentjsonldStudentDetail {
    /**
     * 
     * @type {string}
     * @memberof StudentjsonldStudentDetail
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentjsonldStudentDetail
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentjsonldStudentDetail
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof StudentjsonldStudentDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof StudentjsonldStudentDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof StudentjsonldStudentDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof StudentjsonldStudentDetail
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentjsonldStudentDetail
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentjsonldStudentDetail
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof StudentjsonldStudentDetail
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentjsonldStudentDetail
     */
    creator?: string;
}
/**
 * 
 * @export
 * @interface StudentjsonldStudentList
 */
export interface StudentjsonldStudentList {
    /**
     * 
     * @type {string}
     * @memberof StudentjsonldStudentList
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentjsonldStudentList
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof StudentjsonldStudentList
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof StudentjsonldStudentList
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof StudentjsonldStudentList
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof StudentjsonldStudentList
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentjsonldStudentList
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentjsonldStudentList
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof StudentjsonldStudentList
     */
    avatar?: string;
}
/**
 * 
 * @export
 * @interface StudentjsonldTeachingClassDetail
 */
export interface StudentjsonldTeachingClassDetail {
    /**
     * 
     * @type {string}
     * @memberof StudentjsonldTeachingClassDetail
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentjsonldTeachingClassDetail
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentjsonldTeachingClassDetail
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof StudentjsonldTeachingClassDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof StudentjsonldTeachingClassDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof StudentjsonldTeachingClassDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof StudentjsonldTeachingClassDetail
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentjsonldTeachingClassDetail
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentjsonldTeachingClassDetail
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof StudentjsonldTeachingClassDetail
     */
    avatar?: string;
}
/**
 * 
 * @export
 * @interface StudentjsonldTeachingClassStudentList
 */
export interface StudentjsonldTeachingClassStudentList {
    /**
     * 
     * @type {string}
     * @memberof StudentjsonldTeachingClassStudentList
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentjsonldTeachingClassStudentList
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentjsonldTeachingClassStudentList
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof StudentjsonldTeachingClassStudentList
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof StudentjsonldTeachingClassStudentList
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentjsonldTeachingClassStudentList
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof StudentjsonldTeachingClassStudentList
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof StudentjsonldTeachingClassStudentList
     */
    avatar?: string;
}
/**
 * Class Teacher
 * @export
 * @interface TeacherTeacherDetail
 */
export interface TeacherTeacherDetail {
    /**
     * 
     * @type {number}
     * @memberof TeacherTeacherDetail
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof TeacherTeacherDetail
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof TeacherTeacherDetail
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof TeacherTeacherDetail
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof TeacherTeacherDetail
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof TeacherTeacherDetail
     */
    school?: string;
}
/**
 * Class Teacher
 * @export
 * @interface TeacherjsonldTeacherDetail
 */
export interface TeacherjsonldTeacherDetail {
    /**
     * 
     * @type {string}
     * @memberof TeacherjsonldTeacherDetail
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TeacherjsonldTeacherDetail
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof TeacherjsonldTeacherDetail
     */
    context?: string;
    /**
     * 
     * @type {number}
     * @memberof TeacherjsonldTeacherDetail
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof TeacherjsonldTeacherDetail
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof TeacherjsonldTeacherDetail
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof TeacherjsonldTeacherDetail
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof TeacherjsonldTeacherDetail
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof TeacherjsonldTeacherDetail
     */
    school?: string;
}
/**
 * 
 * @export
 * @interface TeachingClassLearningSkillList
 */
export interface TeachingClassLearningSkillList {
}
/**
 * 
 * @export
 * @interface TeachingClassLearningSkillTeachingClassLearningSkillDetail
 */
export interface TeachingClassLearningSkillTeachingClassLearningSkillDetail {
    /**
     * 
     * @type {number}
     * @memberof TeachingClassLearningSkillTeachingClassLearningSkillDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassLearningSkillTeachingClassLearningSkillDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassLearningSkillTeachingClassLearningSkillDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassLearningSkillTeachingClassLearningSkillDetail
     */
    teachingClass?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassLearningSkillTeachingClassLearningSkillDetail
     */
    learningSkill?: string;
}
/**
 * 
 * @export
 * @interface TeachingClassLearningSkillTeachingClassLearningSkillList
 */
export interface TeachingClassLearningSkillTeachingClassLearningSkillList {
    /**
     * 
     * @type {number}
     * @memberof TeachingClassLearningSkillTeachingClassLearningSkillList
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassLearningSkillTeachingClassLearningSkillList
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassLearningSkillTeachingClassLearningSkillList
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassLearningSkillTeachingClassLearningSkillList
     */
    teachingClass?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassLearningSkillTeachingClassLearningSkillList
     */
    learningSkill?: string;
}
/**
 * 
 * @export
 * @interface TeachingClassLearningSkillTeachingClassLearningSkillWrite
 */
export interface TeachingClassLearningSkillTeachingClassLearningSkillWrite {
    /**
     * 
     * @type {string}
     * @memberof TeachingClassLearningSkillTeachingClassLearningSkillWrite
     */
    teachingClass?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassLearningSkillTeachingClassLearningSkillWrite
     */
    learningSkill?: string;
}
/**
 * 
 * @export
 * @interface TeachingClassLearningSkilljsonldTeachingClassLearningSkillDetail
 */
export interface TeachingClassLearningSkilljsonldTeachingClassLearningSkillDetail {
    /**
     * 
     * @type {string}
     * @memberof TeachingClassLearningSkilljsonldTeachingClassLearningSkillDetail
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassLearningSkilljsonldTeachingClassLearningSkillDetail
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassLearningSkilljsonldTeachingClassLearningSkillDetail
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassLearningSkilljsonldTeachingClassLearningSkillDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassLearningSkilljsonldTeachingClassLearningSkillDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassLearningSkilljsonldTeachingClassLearningSkillDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassLearningSkilljsonldTeachingClassLearningSkillDetail
     */
    teachingClass?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassLearningSkilljsonldTeachingClassLearningSkillDetail
     */
    learningSkill?: string;
}
/**
 * 
 * @export
 * @interface TeachingClassLearningSkilljsonldTeachingClassLearningSkillList
 */
export interface TeachingClassLearningSkilljsonldTeachingClassLearningSkillList {
    /**
     * 
     * @type {string}
     * @memberof TeachingClassLearningSkilljsonldTeachingClassLearningSkillList
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassLearningSkilljsonldTeachingClassLearningSkillList
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassLearningSkilljsonldTeachingClassLearningSkillList
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassLearningSkilljsonldTeachingClassLearningSkillList
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassLearningSkilljsonldTeachingClassLearningSkillList
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassLearningSkilljsonldTeachingClassLearningSkillList
     */
    teachingClass?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassLearningSkilljsonldTeachingClassLearningSkillList
     */
    learningSkill?: string;
}
/**
 * 
 * @export
 * @interface TeachingClassLearningSkilljsonldTeachingClassLearningSkillWrite
 */
export interface TeachingClassLearningSkilljsonldTeachingClassLearningSkillWrite {
    /**
     * 
     * @type {string}
     * @memberof TeachingClassLearningSkilljsonldTeachingClassLearningSkillWrite
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassLearningSkilljsonldTeachingClassLearningSkillWrite
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassLearningSkilljsonldTeachingClassLearningSkillWrite
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassLearningSkilljsonldTeachingClassLearningSkillWrite
     */
    teachingClass?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassLearningSkilljsonldTeachingClassLearningSkillWrite
     */
    learningSkill?: string;
}
/**
 * 
 * @export
 * @interface TeachingClassStudentTeachingClassDetail
 */
export interface TeachingClassStudentTeachingClassDetail {
    /**
     * 
     * @type {number}
     * @memberof TeachingClassStudentTeachingClassDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassStudentTeachingClassDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassStudentTeachingClassDetail
     */
    updated?: Date;
    /**
     * 
     * @type {StudentTeachingClassDetail}
     * @memberof TeachingClassStudentTeachingClassDetail
     */
    student?: StudentTeachingClassDetail;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentTeachingClassDetail
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentTeachingClassDetail
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentTeachingClassDetail
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentTeachingClassDetail
     */
    code: string;
}
/**
 * 
 * @export
 * @interface TeachingClassStudentTeachingClassStudentDetail
 */
export interface TeachingClassStudentTeachingClassStudentDetail {
    /**
     * 
     * @type {number}
     * @memberof TeachingClassStudentTeachingClassStudentDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassStudentTeachingClassStudentDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassStudentTeachingClassStudentDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentTeachingClassStudentDetail
     */
    teachingClass?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentTeachingClassStudentDetail
     */
    student?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentTeachingClassStudentDetail
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentTeachingClassStudentDetail
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentTeachingClassStudentDetail
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentTeachingClassStudentDetail
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentTeachingClassStudentDetail
     */
    invitationCode?: string;
}
/**
 * 
 * @export
 * @interface TeachingClassStudentTeachingClassStudentList
 */
export interface TeachingClassStudentTeachingClassStudentList {
    /**
     * 
     * @type {number}
     * @memberof TeachingClassStudentTeachingClassStudentList
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassStudentTeachingClassStudentList
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassStudentTeachingClassStudentList
     */
    updated?: Date;
    /**
     * 
     * @type {TeachingClassTeachingClassStudentList}
     * @memberof TeachingClassStudentTeachingClassStudentList
     */
    teachingClass?: TeachingClassTeachingClassStudentList;
    /**
     * 
     * @type {StudentTeachingClassStudentList}
     * @memberof TeachingClassStudentTeachingClassStudentList
     */
    student?: StudentTeachingClassStudentList;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentTeachingClassStudentList
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentTeachingClassStudentList
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentTeachingClassStudentList
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentTeachingClassStudentList
     */
    code: string;
}
/**
 * 
 * @export
 * @interface TeachingClassStudentTeachingClassStudentWrite
 */
export interface TeachingClassStudentTeachingClassStudentWrite {
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentTeachingClassStudentWrite
     */
    teachingClass?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentTeachingClassStudentWrite
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentTeachingClassStudentWrite
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentTeachingClassStudentWrite
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentTeachingClassStudentWrite
     */
    code: string;
}
/**
 * 
 * @export
 * @interface TeachingClassStudentjsonldTeachingClassDetail
 */
export interface TeachingClassStudentjsonldTeachingClassDetail {
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentjsonldTeachingClassDetail
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentjsonldTeachingClassDetail
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentjsonldTeachingClassDetail
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassStudentjsonldTeachingClassDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassStudentjsonldTeachingClassDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassStudentjsonldTeachingClassDetail
     */
    updated?: Date;
    /**
     * 
     * @type {StudentjsonldTeachingClassDetail}
     * @memberof TeachingClassStudentjsonldTeachingClassDetail
     */
    student?: StudentjsonldTeachingClassDetail;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentjsonldTeachingClassDetail
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentjsonldTeachingClassDetail
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentjsonldTeachingClassDetail
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentjsonldTeachingClassDetail
     */
    code: string;
}
/**
 * 
 * @export
 * @interface TeachingClassStudentjsonldTeachingClassStudentDetail
 */
export interface TeachingClassStudentjsonldTeachingClassStudentDetail {
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentjsonldTeachingClassStudentDetail
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentjsonldTeachingClassStudentDetail
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentjsonldTeachingClassStudentDetail
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassStudentjsonldTeachingClassStudentDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassStudentjsonldTeachingClassStudentDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassStudentjsonldTeachingClassStudentDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentjsonldTeachingClassStudentDetail
     */
    teachingClass?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentjsonldTeachingClassStudentDetail
     */
    student?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentjsonldTeachingClassStudentDetail
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentjsonldTeachingClassStudentDetail
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentjsonldTeachingClassStudentDetail
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentjsonldTeachingClassStudentDetail
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentjsonldTeachingClassStudentDetail
     */
    invitationCode?: string;
}
/**
 * 
 * @export
 * @interface TeachingClassStudentjsonldTeachingClassStudentList
 */
export interface TeachingClassStudentjsonldTeachingClassStudentList {
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentjsonldTeachingClassStudentList
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentjsonldTeachingClassStudentList
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassStudentjsonldTeachingClassStudentList
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassStudentjsonldTeachingClassStudentList
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassStudentjsonldTeachingClassStudentList
     */
    updated?: Date;
    /**
     * 
     * @type {TeachingClassjsonldTeachingClassStudentList}
     * @memberof TeachingClassStudentjsonldTeachingClassStudentList
     */
    teachingClass?: TeachingClassjsonldTeachingClassStudentList;
    /**
     * 
     * @type {StudentjsonldTeachingClassStudentList}
     * @memberof TeachingClassStudentjsonldTeachingClassStudentList
     */
    student?: StudentjsonldTeachingClassStudentList;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentjsonldTeachingClassStudentList
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentjsonldTeachingClassStudentList
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentjsonldTeachingClassStudentList
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentjsonldTeachingClassStudentList
     */
    code: string;
}
/**
 * 
 * @export
 * @interface TeachingClassStudentjsonldTeachingClassStudentWrite
 */
export interface TeachingClassStudentjsonldTeachingClassStudentWrite {
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentjsonldTeachingClassStudentWrite
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentjsonldTeachingClassStudentWrite
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentjsonldTeachingClassStudentWrite
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentjsonldTeachingClassStudentWrite
     */
    teachingClass?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentjsonldTeachingClassStudentWrite
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentjsonldTeachingClassStudentWrite
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentjsonldTeachingClassStudentWrite
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassStudentjsonldTeachingClassStudentWrite
     */
    code: string;
}
/**
 * 
 * @export
 * @interface TeachingClassTeacherInvitationTeachingClassTeacherInvitationDetail
 */
export interface TeachingClassTeacherInvitationTeachingClassTeacherInvitationDetail {
    /**
     * 
     * @type {number}
     * @memberof TeachingClassTeacherInvitationTeachingClassTeacherInvitationDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassTeacherInvitationTeachingClassTeacherInvitationDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassTeacherInvitationTeachingClassTeacherInvitationDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeacherInvitationTeachingClassTeacherInvitationDetail
     */
    teachingClass?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeacherInvitationTeachingClassTeacherInvitationDetail
     */
    teacher?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TeachingClassTeacherInvitationTeachingClassTeacherInvitationDetail
     */
    isApproved?: boolean;
}
/**
 * 
 * @export
 * @interface TeachingClassTeacherInvitationTeachingClassTeacherInvitationList
 */
export interface TeachingClassTeacherInvitationTeachingClassTeacherInvitationList {
    /**
     * 
     * @type {number}
     * @memberof TeachingClassTeacherInvitationTeachingClassTeacherInvitationList
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassTeacherInvitationTeachingClassTeacherInvitationList
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassTeacherInvitationTeachingClassTeacherInvitationList
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeacherInvitationTeachingClassTeacherInvitationList
     */
    teachingClass?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeacherInvitationTeachingClassTeacherInvitationList
     */
    teacher?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TeachingClassTeacherInvitationTeachingClassTeacherInvitationList
     */
    isApproved?: boolean;
}
/**
 * 
 * @export
 * @interface TeachingClassTeacherInvitationjsonldTeachingClassTeacherInvitationDetail
 */
export interface TeachingClassTeacherInvitationjsonldTeachingClassTeacherInvitationDetail {
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeacherInvitationjsonldTeachingClassTeacherInvitationDetail
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeacherInvitationjsonldTeachingClassTeacherInvitationDetail
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeacherInvitationjsonldTeachingClassTeacherInvitationDetail
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassTeacherInvitationjsonldTeachingClassTeacherInvitationDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassTeacherInvitationjsonldTeachingClassTeacherInvitationDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassTeacherInvitationjsonldTeachingClassTeacherInvitationDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeacherInvitationjsonldTeachingClassTeacherInvitationDetail
     */
    teachingClass?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeacherInvitationjsonldTeachingClassTeacherInvitationDetail
     */
    teacher?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TeachingClassTeacherInvitationjsonldTeachingClassTeacherInvitationDetail
     */
    isApproved?: boolean;
}
/**
 * 
 * @export
 * @interface TeachingClassTeacherInvitationjsonldTeachingClassTeacherInvitationList
 */
export interface TeachingClassTeacherInvitationjsonldTeachingClassTeacherInvitationList {
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeacherInvitationjsonldTeachingClassTeacherInvitationList
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeacherInvitationjsonldTeachingClassTeacherInvitationList
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassTeacherInvitationjsonldTeachingClassTeacherInvitationList
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassTeacherInvitationjsonldTeachingClassTeacherInvitationList
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassTeacherInvitationjsonldTeachingClassTeacherInvitationList
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeacherInvitationjsonldTeachingClassTeacherInvitationList
     */
    teachingClass?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeacherInvitationjsonldTeachingClassTeacherInvitationList
     */
    teacher?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TeachingClassTeacherInvitationjsonldTeachingClassTeacherInvitationList
     */
    isApproved?: boolean;
}
/**
 * 
 * @export
 * @interface TeachingClassTeacherTeachingClassTeacherDetail
 */
export interface TeachingClassTeacherTeachingClassTeacherDetail {
    /**
     * 
     * @type {number}
     * @memberof TeachingClassTeacherTeachingClassTeacherDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassTeacherTeachingClassTeacherDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassTeacherTeachingClassTeacherDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeacherTeachingClassTeacherDetail
     */
    teachingClass?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeacherTeachingClassTeacherDetail
     */
    teacher?: string;
}
/**
 * 
 * @export
 * @interface TeachingClassTeacherTeachingClassTeacherList
 */
export interface TeachingClassTeacherTeachingClassTeacherList {
    /**
     * 
     * @type {number}
     * @memberof TeachingClassTeacherTeachingClassTeacherList
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassTeacherTeachingClassTeacherList
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassTeacherTeachingClassTeacherList
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeacherTeachingClassTeacherList
     */
    teachingClass?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeacherTeachingClassTeacherList
     */
    teacher?: string;
}
/**
 * 
 * @export
 * @interface TeachingClassTeacherjsonldTeachingClassTeacherDetail
 */
export interface TeachingClassTeacherjsonldTeachingClassTeacherDetail {
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeacherjsonldTeachingClassTeacherDetail
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeacherjsonldTeachingClassTeacherDetail
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeacherjsonldTeachingClassTeacherDetail
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassTeacherjsonldTeachingClassTeacherDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassTeacherjsonldTeachingClassTeacherDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassTeacherjsonldTeachingClassTeacherDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeacherjsonldTeachingClassTeacherDetail
     */
    teachingClass?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeacherjsonldTeachingClassTeacherDetail
     */
    teacher?: string;
}
/**
 * 
 * @export
 * @interface TeachingClassTeacherjsonldTeachingClassTeacherList
 */
export interface TeachingClassTeacherjsonldTeachingClassTeacherList {
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeacherjsonldTeachingClassTeacherList
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeacherjsonldTeachingClassTeacherList
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassTeacherjsonldTeachingClassTeacherList
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassTeacherjsonldTeachingClassTeacherList
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassTeacherjsonldTeachingClassTeacherList
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeacherjsonldTeachingClassTeacherList
     */
    teachingClass?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeacherjsonldTeachingClassTeacherList
     */
    teacher?: string;
}
/**
 * 
 * @export
 * @interface TeachingClassTeachingClassDetail
 */
export interface TeachingClassTeachingClassDetail {
    /**
     * 
     * @type {number}
     * @memberof TeachingClassTeachingClassDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassTeachingClassDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassTeachingClassDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeachingClassDetail
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeachingClassDetail
     */
    grade?: string;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassTeachingClassDetail
     */
    year: number;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassTeachingClassDetail
     */
    term: number;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassTeachingClassDetail
     */
    start: Date;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassTeachingClassDetail
     */
    end: Date;
    /**
     * 
     * @type {boolean}
     * @memberof TeachingClassTeachingClassDetail
     */
    isFinished?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeachingClassDetail
     */
    avatar?: string;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassTeachingClassDetail
     */
    numTeachers?: number;
    /**
     * 
     * @type {UserTeachingClassDetail}
     * @memberof TeachingClassTeachingClassDetail
     */
    creator?: UserTeachingClassDetail;
    /**
     * 
     * @type {SchoolTeachingClassDetail}
     * @memberof TeachingClassTeachingClassDetail
     */
    school?: SchoolTeachingClassDetail;
    /**
     * 
     * @type {CollectionTeachingClassDetail}
     * @memberof TeachingClassTeachingClassDetail
     */
    students?: CollectionTeachingClassDetail;
    /**
     * 
     * @type {Array<TeachingClassStudentTeachingClassDetail>}
     * @memberof TeachingClassTeachingClassDetail
     */
    teachingClassStudents?: Array<TeachingClassStudentTeachingClassDetail>;
    /**
     * 
     * @type {CollectionTeachingClassDetail}
     * @memberof TeachingClassTeachingClassDetail
     */
    teachers?: CollectionTeachingClassDetail;
    /**
     * 
     * @type {CollectionTeachingClassDetail}
     * @memberof TeachingClassTeachingClassDetail
     */
    learningSkills?: CollectionTeachingClassDetail;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeachingClassDetail
     */
    invitationCode?: string;
}
/**
 * 
 * @export
 * @interface TeachingClassTeachingClassList
 */
export interface TeachingClassTeachingClassList {
    /**
     * 
     * @type {number}
     * @memberof TeachingClassTeachingClassList
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassTeachingClassList
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassTeachingClassList
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeachingClassList
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeachingClassList
     */
    grade?: string;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassTeachingClassList
     */
    year: number;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassTeachingClassList
     */
    term: number;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassTeachingClassList
     */
    start: Date;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassTeachingClassList
     */
    end: Date;
    /**
     * 
     * @type {boolean}
     * @memberof TeachingClassTeachingClassList
     */
    isFinished?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeachingClassList
     */
    avatar?: string;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassTeachingClassList
     */
    numTeachers?: number;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeachingClassList
     */
    creator?: string;
}
/**
 * 
 * @export
 * @interface TeachingClassTeachingClassStudentList
 */
export interface TeachingClassTeachingClassStudentList {
    /**
     * 
     * @type {number}
     * @memberof TeachingClassTeachingClassStudentList
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeachingClassStudentList
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeachingClassStudentList
     */
    grade?: string;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassTeachingClassStudentList
     */
    year: number;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassTeachingClassStudentList
     */
    term: number;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassTeachingClassStudentList
     */
    start: Date;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassTeachingClassStudentList
     */
    end: Date;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeachingClassStudentList
     */
    creator?: string;
}
/**
 * 
 * @export
 * @interface TeachingClassTeachingClassWrite
 */
export interface TeachingClassTeachingClassWrite {
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeachingClassWrite
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeachingClassWrite
     */
    grade?: string;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassTeachingClassWrite
     */
    year: number;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassTeachingClassWrite
     */
    term: number;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassTeachingClassWrite
     */
    start: Date;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassTeachingClassWrite
     */
    end: Date;
    /**
     * 
     * @type {boolean}
     * @memberof TeachingClassTeachingClassWrite
     */
    isFinished?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeachingClassWrite
     */
    avatar?: string;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassTeachingClassWrite
     */
    numTeachers?: number;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeachingClassWrite
     */
    creator?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassTeachingClassWrite
     */
    school?: string;
}
/**
 * 
 * @export
 * @interface TeachingClassjsonldLearningSkillList
 */
export interface TeachingClassjsonldLearningSkillList {
    /**
     * 
     * @type {string}
     * @memberof TeachingClassjsonldLearningSkillList
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassjsonldLearningSkillList
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassjsonldLearningSkillList
     */
    type?: string;
}
/**
 * 
 * @export
 * @interface TeachingClassjsonldTeachingClassDetail
 */
export interface TeachingClassjsonldTeachingClassDetail {
    /**
     * 
     * @type {string}
     * @memberof TeachingClassjsonldTeachingClassDetail
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassjsonldTeachingClassDetail
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassjsonldTeachingClassDetail
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassjsonldTeachingClassDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassjsonldTeachingClassDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassjsonldTeachingClassDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassjsonldTeachingClassDetail
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassjsonldTeachingClassDetail
     */
    grade?: string;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassjsonldTeachingClassDetail
     */
    year: number;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassjsonldTeachingClassDetail
     */
    term: number;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassjsonldTeachingClassDetail
     */
    start: Date;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassjsonldTeachingClassDetail
     */
    end: Date;
    /**
     * 
     * @type {boolean}
     * @memberof TeachingClassjsonldTeachingClassDetail
     */
    isFinished?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassjsonldTeachingClassDetail
     */
    avatar?: string;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassjsonldTeachingClassDetail
     */
    numTeachers?: number;
    /**
     * 
     * @type {UserjsonldTeachingClassDetail}
     * @memberof TeachingClassjsonldTeachingClassDetail
     */
    creator?: UserjsonldTeachingClassDetail;
    /**
     * 
     * @type {SchooljsonldTeachingClassDetail}
     * @memberof TeachingClassjsonldTeachingClassDetail
     */
    school?: SchooljsonldTeachingClassDetail;
    /**
     * 
     * @type {CollectionjsonldTeachingClassDetail}
     * @memberof TeachingClassjsonldTeachingClassDetail
     */
    students?: CollectionjsonldTeachingClassDetail;
    /**
     * 
     * @type {Array<TeachingClassStudentjsonldTeachingClassDetail>}
     * @memberof TeachingClassjsonldTeachingClassDetail
     */
    teachingClassStudents?: Array<TeachingClassStudentjsonldTeachingClassDetail>;
    /**
     * 
     * @type {CollectionjsonldTeachingClassDetail}
     * @memberof TeachingClassjsonldTeachingClassDetail
     */
    teachers?: CollectionjsonldTeachingClassDetail;
    /**
     * 
     * @type {CollectionjsonldTeachingClassDetail}
     * @memberof TeachingClassjsonldTeachingClassDetail
     */
    learningSkills?: CollectionjsonldTeachingClassDetail;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassjsonldTeachingClassDetail
     */
    invitationCode?: string;
}
/**
 * 
 * @export
 * @interface TeachingClassjsonldTeachingClassList
 */
export interface TeachingClassjsonldTeachingClassList {
    /**
     * 
     * @type {string}
     * @memberof TeachingClassjsonldTeachingClassList
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassjsonldTeachingClassList
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassjsonldTeachingClassList
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassjsonldTeachingClassList
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassjsonldTeachingClassList
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassjsonldTeachingClassList
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassjsonldTeachingClassList
     */
    grade?: string;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassjsonldTeachingClassList
     */
    year: number;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassjsonldTeachingClassList
     */
    term: number;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassjsonldTeachingClassList
     */
    start: Date;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassjsonldTeachingClassList
     */
    end: Date;
    /**
     * 
     * @type {boolean}
     * @memberof TeachingClassjsonldTeachingClassList
     */
    isFinished?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassjsonldTeachingClassList
     */
    avatar?: string;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassjsonldTeachingClassList
     */
    numTeachers?: number;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassjsonldTeachingClassList
     */
    creator?: string;
}
/**
 * 
 * @export
 * @interface TeachingClassjsonldTeachingClassStudentList
 */
export interface TeachingClassjsonldTeachingClassStudentList {
    /**
     * 
     * @type {string}
     * @memberof TeachingClassjsonldTeachingClassStudentList
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassjsonldTeachingClassStudentList
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassjsonldTeachingClassStudentList
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassjsonldTeachingClassStudentList
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassjsonldTeachingClassStudentList
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassjsonldTeachingClassStudentList
     */
    grade?: string;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassjsonldTeachingClassStudentList
     */
    year: number;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassjsonldTeachingClassStudentList
     */
    term: number;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassjsonldTeachingClassStudentList
     */
    start: Date;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassjsonldTeachingClassStudentList
     */
    end: Date;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassjsonldTeachingClassStudentList
     */
    creator?: string;
}
/**
 * 
 * @export
 * @interface TeachingClassjsonldTeachingClassWrite
 */
export interface TeachingClassjsonldTeachingClassWrite {
    /**
     * 
     * @type {string}
     * @memberof TeachingClassjsonldTeachingClassWrite
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassjsonldTeachingClassWrite
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassjsonldTeachingClassWrite
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassjsonldTeachingClassWrite
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassjsonldTeachingClassWrite
     */
    grade?: string;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassjsonldTeachingClassWrite
     */
    year: number;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassjsonldTeachingClassWrite
     */
    term: number;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassjsonldTeachingClassWrite
     */
    start: Date;
    /**
     * 
     * @type {Date}
     * @memberof TeachingClassjsonldTeachingClassWrite
     */
    end: Date;
    /**
     * 
     * @type {boolean}
     * @memberof TeachingClassjsonldTeachingClassWrite
     */
    isFinished?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassjsonldTeachingClassWrite
     */
    avatar?: string;
    /**
     * 
     * @type {number}
     * @memberof TeachingClassjsonldTeachingClassWrite
     */
    numTeachers?: number;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassjsonldTeachingClassWrite
     */
    creator?: string;
    /**
     * 
     * @type {string}
     * @memberof TeachingClassjsonldTeachingClassWrite
     */
    school?: string;
}
/**
 * Class User
 * @export
 * @interface UserRatingList
 */
export interface UserRatingList {
    /**
     * 
     * @type {number}
     * @memberof UserRatingList
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof UserRatingList
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRatingList
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRatingList
     */
    avatar?: string;
}
/**
 * Class User
 * @export
 * @interface UserTeacherDetail
 */
export interface UserTeacherDetail {
    /**
     * 
     * @type {string}
     * @memberof UserTeacherDetail
     */
    school?: string;
    /**
     * 
     * @type {number}
     * @memberof UserTeacherDetail
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof UserTeacherDetail
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserTeacherDetail
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserTeacherDetail
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof UserTeacherDetail
     */
    phone?: string;
}
/**
 * Class User
 * @export
 * @interface UserTeachingClassDetail
 */
export interface UserTeachingClassDetail {
    /**
     * 
     * @type {number}
     * @memberof UserTeachingClassDetail
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof UserTeachingClassDetail
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserTeachingClassDetail
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserTeachingClassDetail
     */
    avatar?: string;
}
/**
 * Class User
 * @export
 * @interface UserUserCreate
 */
export interface UserUserCreate {
    /**
     * 
     * @type {string}
     * @memberof UserUserCreate
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof UserUserCreate
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUserCreate
     */
    plainPassword?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUserCreate
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUserCreate
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUserCreate
     */
    preferredLanguage?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUserCreate
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUserCreate
     */
    school?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUserCreate
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUserCreate
     */
    accountTypeRadio?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUserCreate
     */
    occupation?: string;
}
/**
 * Class User
 * @export
 * @interface UserUserDetail
 */
export interface UserUserDetail {
    /**
     * 
     * @type {number}
     * @memberof UserUserDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof UserUserDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UserUserDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof UserUserDetail
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof UserUserDetail
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUserDetail
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUserDetail
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUserDetail
     */
    preferredLanguage?: string;
    /**
     * 
     * @type {MediaUserDetail}
     * @memberof UserUserDetail
     */
    avatar?: MediaUserDetail;
    /**
     * 
     * @type {string}
     * @memberof UserUserDetail
     */
    school?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUserDetail
     */
    phone?: string;
    /**
     * 
     * @type {Date}
     * @memberof UserUserDetail
     */
    privacyPolicyLastAgreed?: Date;
    /**
     * 
     * @type {string}
     * @memberof UserUserDetail
     */
    occupation?: string;
}
/**
 * Class User
 * @export
 * @interface UserUserWrite
 */
export interface UserUserWrite {
    /**
     * 
     * @type {string}
     * @memberof UserUserWrite
     */
    plainPassword?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUserWrite
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUserWrite
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUserWrite
     */
    preferredLanguage?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUserWrite
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUserWrite
     */
    school?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUserWrite
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUserWrite
     */
    accountTypeRadio?: string;
    /**
     * 
     * @type {string}
     * @memberof UserUserWrite
     */
    occupation?: string;
}
/**
 * Class User
 * @export
 * @interface UserjsonldRatingList
 */
export interface UserjsonldRatingList {
    /**
     * 
     * @type {string}
     * @memberof UserjsonldRatingList
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldRatingList
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldRatingList
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof UserjsonldRatingList
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldRatingList
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldRatingList
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldRatingList
     */
    avatar?: string;
}
/**
 * Class User
 * @export
 * @interface UserjsonldTeacherDetail
 */
export interface UserjsonldTeacherDetail {
    /**
     * 
     * @type {string}
     * @memberof UserjsonldTeacherDetail
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldTeacherDetail
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldTeacherDetail
     */
    school?: string;
    /**
     * 
     * @type {number}
     * @memberof UserjsonldTeacherDetail
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldTeacherDetail
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldTeacherDetail
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldTeacherDetail
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldTeacherDetail
     */
    phone?: string;
}
/**
 * Class User
 * @export
 * @interface UserjsonldTeachingClassDetail
 */
export interface UserjsonldTeachingClassDetail {
    /**
     * 
     * @type {string}
     * @memberof UserjsonldTeachingClassDetail
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldTeachingClassDetail
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldTeachingClassDetail
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof UserjsonldTeachingClassDetail
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldTeachingClassDetail
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldTeachingClassDetail
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldTeachingClassDetail
     */
    avatar?: string;
}
/**
 * Class User
 * @export
 * @interface UserjsonldUserCreate
 */
export interface UserjsonldUserCreate {
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserCreate
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserCreate
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserCreate
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserCreate
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserCreate
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserCreate
     */
    plainPassword?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserCreate
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserCreate
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserCreate
     */
    preferredLanguage?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserCreate
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserCreate
     */
    school?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserCreate
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserCreate
     */
    accountTypeRadio?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserCreate
     */
    occupation?: string;
}
/**
 * Class User
 * @export
 * @interface UserjsonldUserDetail
 */
export interface UserjsonldUserDetail {
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserDetail
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserDetail
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserDetail
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof UserjsonldUserDetail
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof UserjsonldUserDetail
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UserjsonldUserDetail
     */
    updated?: Date;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserDetail
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserDetail
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserDetail
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserDetail
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserDetail
     */
    preferredLanguage?: string;
    /**
     * 
     * @type {MediajsonldUserDetail}
     * @memberof UserjsonldUserDetail
     */
    avatar?: MediajsonldUserDetail;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserDetail
     */
    school?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserDetail
     */
    phone?: string;
    /**
     * 
     * @type {Date}
     * @memberof UserjsonldUserDetail
     */
    privacyPolicyLastAgreed?: Date;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserDetail
     */
    occupation?: string;
}
/**
 * Class User
 * @export
 * @interface UserjsonldUserWrite
 */
export interface UserjsonldUserWrite {
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserWrite
     */
    context?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserWrite
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserWrite
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserWrite
     */
    plainPassword?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserWrite
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserWrite
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserWrite
     */
    preferredLanguage?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserWrite
     */
    avatar?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserWrite
     */
    school?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserWrite
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserWrite
     */
    accountTypeRadio?: string;
    /**
     * 
     * @type {string}
     * @memberof UserjsonldUserWrite
     */
    occupation?: string;
}
/**
 * AuthenticationApi - fetch parameter creator
 * @export
 */
export const AuthenticationApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Handles a forgot password request for the given email address
         * @param {string} email The email address of the user account to send a forgot password email for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPublicV1ForgotPasswordEmailGet(email: string, options: any = {}): FetchArgs {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling apiPublicV1ForgotPasswordEmailGet.');
            }
            const localVarPath = `/api/public/v1/forgot_password/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login a user to retrieve a JWT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPublicV1LoginApplePost(options: any = {}): FetchArgs {
            const localVarPath = `/api/public/v1/login_apple`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login a user to retrieve a JWT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPublicV1LoginCheckPost(options: any = {}): FetchArgs {
            const localVarPath = `/api/public/v1/login_check`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login a user to retrieve a JWT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPublicV1LoginFacebookPost(options: any = {}): FetchArgs {
            const localVarPath = `/api/public/v1/login_facebook`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Extend a JWT by using a refresh token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPublicV1TokenRefreshPost(options: any = {}): FetchArgs {
            const localVarPath = `/api/public/v1/token_refresh`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Handles a forgot password request for the given email address
         * @param {string} email The email address of the user account to send a forgot password email for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPublicV1ForgotPasswordEmailGet(email: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AuthenticationApiFetchParamCreator(configuration).apiPublicV1ForgotPasswordEmailGet(email, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Login a user to retrieve a JWT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPublicV1LoginApplePost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AuthenticationApiFetchParamCreator(configuration).apiPublicV1LoginApplePost(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Login a user to retrieve a JWT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPublicV1LoginCheckPost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AuthenticationApiFetchParamCreator(configuration).apiPublicV1LoginCheckPost(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Login a user to retrieve a JWT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPublicV1LoginFacebookPost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AuthenticationApiFetchParamCreator(configuration).apiPublicV1LoginFacebookPost(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Extend a JWT by using a refresh token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPublicV1TokenRefreshPost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AuthenticationApiFetchParamCreator(configuration).apiPublicV1TokenRefreshPost(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Handles a forgot password request for the given email address
         * @param {string} email The email address of the user account to send a forgot password email for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPublicV1ForgotPasswordEmailGet(email: string, options?: any) {
            return AuthenticationApiFp(configuration).apiPublicV1ForgotPasswordEmailGet(email, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Login a user to retrieve a JWT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPublicV1LoginApplePost(options?: any) {
            return AuthenticationApiFp(configuration).apiPublicV1LoginApplePost(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Login a user to retrieve a JWT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPublicV1LoginCheckPost(options?: any) {
            return AuthenticationApiFp(configuration).apiPublicV1LoginCheckPost(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Login a user to retrieve a JWT
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPublicV1LoginFacebookPost(options?: any) {
            return AuthenticationApiFp(configuration).apiPublicV1LoginFacebookPost(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Extend a JWT by using a refresh token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPublicV1TokenRefreshPost(options?: any) {
            return AuthenticationApiFp(configuration).apiPublicV1TokenRefreshPost(options)(fetch, basePath);
        },
    };
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
    /**
     * 
     * @summary Handles a forgot password request for the given email address
     * @param {string} email The email address of the user account to send a forgot password email for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public apiPublicV1ForgotPasswordEmailGet(email: string, options?: any) {
        return AuthenticationApiFp(this.configuration).apiPublicV1ForgotPasswordEmailGet(email, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Login a user to retrieve a JWT
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public apiPublicV1LoginApplePost(options?: any) {
        return AuthenticationApiFp(this.configuration).apiPublicV1LoginApplePost(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Login a user to retrieve a JWT
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public apiPublicV1LoginCheckPost(options?: any) {
        return AuthenticationApiFp(this.configuration).apiPublicV1LoginCheckPost(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Login a user to retrieve a JWT
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public apiPublicV1LoginFacebookPost(options?: any) {
        return AuthenticationApiFp(this.configuration).apiPublicV1LoginFacebookPost(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Extend a JWT by using a refresh token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public apiPublicV1TokenRefreshPost(options?: any) {
        return AuthenticationApiFp(this.configuration).apiPublicV1TokenRefreshPost(options)(this.fetch, this.basePath);
    }

}
/**
 * EmailSubscriptionApi - fetch parameter creator
 * @export
 */
export const EmailSubscriptionApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves the collection of EmailSubscription resources.
         * @param {number} [userId] 
         * @param {Array<number>} [userId] 
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSubscriptionCollection(userId?: number, userId?: Array<number>, id?: number, id?: Array<number>, page?: number, itemsPerPage?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/email-subscriptions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user.id'] = userId;
            }

            if (userId) {
                localVarQueryParameter['user.id[]'] = userId;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (id) {
                localVarQueryParameter['id[]'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a EmailSubscription resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSubscriptionItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getEmailSubscriptionItem.');
            }
            const localVarPath = `/api/auth/v1/email-subscription/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates the EmailSubscription resource.
         * @param {string} id 
         * @param {EmailSubscriptionjsonldEmailSubscriptionPatch} [body] The updated EmailSubscription resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEmailSubscriptionItem(id: string, body?: EmailSubscriptionjsonldEmailSubscriptionPatch, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling patchEmailSubscriptionItem.');
            }
            const localVarPath = `/api/auth/v1/email-subscription/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EmailSubscriptionEmailSubscriptionPatch" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a EmailSubscription resource.
         * @param {EmailSubscriptionjsonldEmailSubscriptionWrite} [body] The new EmailSubscription resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEmailSubscriptionCollection(body?: EmailSubscriptionjsonldEmailSubscriptionWrite, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/email-subscription`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"EmailSubscriptionEmailSubscriptionWrite" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmailSubscriptionApi - functional programming interface
 * @export
 */
export const EmailSubscriptionApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves the collection of EmailSubscription resources.
         * @param {number} [userId] 
         * @param {Array<number>} [userId] 
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSubscriptionCollection(userId?: number, userId?: Array<number>, id?: number, id?: Array<number>, page?: number, itemsPerPage?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse200> {
            const localVarFetchArgs = EmailSubscriptionApiFetchParamCreator(configuration).getEmailSubscriptionCollection(userId, userId, id, id, page, itemsPerPage, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves a EmailSubscription resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSubscriptionItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmailSubscriptionjsonldEmailSubscriptionDetail> {
            const localVarFetchArgs = EmailSubscriptionApiFetchParamCreator(configuration).getEmailSubscriptionItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates the EmailSubscription resource.
         * @param {string} id 
         * @param {EmailSubscriptionjsonldEmailSubscriptionPatch} [body] The updated EmailSubscription resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEmailSubscriptionItem(id: string, body?: EmailSubscriptionjsonldEmailSubscriptionPatch, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmailSubscriptionjsonldEmailSubscriptionDetail> {
            const localVarFetchArgs = EmailSubscriptionApiFetchParamCreator(configuration).patchEmailSubscriptionItem(id, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Creates a EmailSubscription resource.
         * @param {EmailSubscriptionjsonldEmailSubscriptionWrite} [body] The new EmailSubscription resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEmailSubscriptionCollection(body?: EmailSubscriptionjsonldEmailSubscriptionWrite, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EmailSubscriptionjsonldEmailSubscriptionDetail> {
            const localVarFetchArgs = EmailSubscriptionApiFetchParamCreator(configuration).postEmailSubscriptionCollection(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * EmailSubscriptionApi - factory interface
 * @export
 */
export const EmailSubscriptionApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Retrieves the collection of EmailSubscription resources.
         * @param {number} [userId] 
         * @param {Array<number>} [userId] 
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSubscriptionCollection(userId?: number, userId?: Array<number>, id?: number, id?: Array<number>, page?: number, itemsPerPage?: number, options?: any) {
            return EmailSubscriptionApiFp(configuration).getEmailSubscriptionCollection(userId, userId, id, id, page, itemsPerPage, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves a EmailSubscription resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailSubscriptionItem(id: string, options?: any) {
            return EmailSubscriptionApiFp(configuration).getEmailSubscriptionItem(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates the EmailSubscription resource.
         * @param {string} id 
         * @param {EmailSubscriptionjsonldEmailSubscriptionPatch} [body] The updated EmailSubscription resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEmailSubscriptionItem(id: string, body?: EmailSubscriptionjsonldEmailSubscriptionPatch, options?: any) {
            return EmailSubscriptionApiFp(configuration).patchEmailSubscriptionItem(id, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Creates a EmailSubscription resource.
         * @param {EmailSubscriptionjsonldEmailSubscriptionWrite} [body] The new EmailSubscription resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEmailSubscriptionCollection(body?: EmailSubscriptionjsonldEmailSubscriptionWrite, options?: any) {
            return EmailSubscriptionApiFp(configuration).postEmailSubscriptionCollection(body, options)(fetch, basePath);
        },
    };
};

/**
 * EmailSubscriptionApi - object-oriented interface
 * @export
 * @class EmailSubscriptionApi
 * @extends {BaseAPI}
 */
export class EmailSubscriptionApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves the collection of EmailSubscription resources.
     * @param {number} [userId] 
     * @param {Array<number>} [userId] 
     * @param {number} [id] 
     * @param {Array<number>} [id] 
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailSubscriptionApi
     */
    public getEmailSubscriptionCollection(userId?: number, userId?: Array<number>, id?: number, id?: Array<number>, page?: number, itemsPerPage?: number, options?: any) {
        return EmailSubscriptionApiFp(this.configuration).getEmailSubscriptionCollection(userId, userId, id, id, page, itemsPerPage, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves a EmailSubscription resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailSubscriptionApi
     */
    public getEmailSubscriptionItem(id: string, options?: any) {
        return EmailSubscriptionApiFp(this.configuration).getEmailSubscriptionItem(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates the EmailSubscription resource.
     * @param {string} id 
     * @param {EmailSubscriptionjsonldEmailSubscriptionPatch} [body] The updated EmailSubscription resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailSubscriptionApi
     */
    public patchEmailSubscriptionItem(id: string, body?: EmailSubscriptionjsonldEmailSubscriptionPatch, options?: any) {
        return EmailSubscriptionApiFp(this.configuration).patchEmailSubscriptionItem(id, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Creates a EmailSubscription resource.
     * @param {EmailSubscriptionjsonldEmailSubscriptionWrite} [body] The new EmailSubscription resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmailSubscriptionApi
     */
    public postEmailSubscriptionCollection(body?: EmailSubscriptionjsonldEmailSubscriptionWrite, options?: any) {
        return EmailSubscriptionApiFp(this.configuration).postEmailSubscriptionCollection(body, options)(this.fetch, this.basePath);
    }

}
/**
 * FirebaseTokenApi - fetch parameter creator
 * @export
 */
export const FirebaseTokenApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves a FirebaseToken resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFirebaseTokenItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getFirebaseTokenItem.');
            }
            const localVarPath = `/api/auth/v1/firebase-token/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a FirebaseToken resource.
         * @param {FirebaseTokenjsonldFirebaseTokenCreate} [body] The new FirebaseToken resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFirebaseTokenCollection(body?: FirebaseTokenjsonldFirebaseTokenCreate, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/firebase-token`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"FirebaseTokenFirebaseTokenCreate" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FirebaseTokenApi - functional programming interface
 * @export
 */
export const FirebaseTokenApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves a FirebaseToken resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFirebaseTokenItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FirebaseTokenjsonldFirebaseTokenDetail> {
            const localVarFetchArgs = FirebaseTokenApiFetchParamCreator(configuration).getFirebaseTokenItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Creates a FirebaseToken resource.
         * @param {FirebaseTokenjsonldFirebaseTokenCreate} [body] The new FirebaseToken resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFirebaseTokenCollection(body?: FirebaseTokenjsonldFirebaseTokenCreate, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<FirebaseTokenjsonldFirebaseTokenDetail> {
            const localVarFetchArgs = FirebaseTokenApiFetchParamCreator(configuration).postFirebaseTokenCollection(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * FirebaseTokenApi - factory interface
 * @export
 */
export const FirebaseTokenApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Retrieves a FirebaseToken resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFirebaseTokenItem(id: string, options?: any) {
            return FirebaseTokenApiFp(configuration).getFirebaseTokenItem(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Creates a FirebaseToken resource.
         * @param {FirebaseTokenjsonldFirebaseTokenCreate} [body] The new FirebaseToken resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFirebaseTokenCollection(body?: FirebaseTokenjsonldFirebaseTokenCreate, options?: any) {
            return FirebaseTokenApiFp(configuration).postFirebaseTokenCollection(body, options)(fetch, basePath);
        },
    };
};

/**
 * FirebaseTokenApi - object-oriented interface
 * @export
 * @class FirebaseTokenApi
 * @extends {BaseAPI}
 */
export class FirebaseTokenApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves a FirebaseToken resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FirebaseTokenApi
     */
    public getFirebaseTokenItem(id: string, options?: any) {
        return FirebaseTokenApiFp(this.configuration).getFirebaseTokenItem(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Creates a FirebaseToken resource.
     * @param {FirebaseTokenjsonldFirebaseTokenCreate} [body] The new FirebaseToken resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FirebaseTokenApi
     */
    public postFirebaseTokenCollection(body?: FirebaseTokenjsonldFirebaseTokenCreate, options?: any) {
        return FirebaseTokenApiFp(this.configuration).postFirebaseTokenCollection(body, options)(this.fetch, this.basePath);
    }

}
/**
 * LearningSkillApi - fetch parameter creator
 * @export
 */
export const LearningSkillApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves the collection of LearningSkill resources.
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {boolean} [isPublic] 
         * @param {Array<boolean>} [isPublic] 
         * @param {number} [creatorId] 
         * @param {Array<number>} [creatorId] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLearningSkillCollection(id?: number, id?: Array<number>, isPublic?: boolean, isPublic?: Array<boolean>, creatorId?: number, creatorId?: Array<number>, page?: number, itemsPerPage?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/learning-skills`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (id) {
                localVarQueryParameter['id[]'] = id;
            }

            if (isPublic !== undefined) {
                localVarQueryParameter['is_public'] = isPublic;
            }

            if (isPublic) {
                localVarQueryParameter['is_public[]'] = isPublic;
            }

            if (creatorId !== undefined) {
                localVarQueryParameter['creator.id'] = creatorId;
            }

            if (creatorId) {
                localVarQueryParameter['creator.id[]'] = creatorId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a LearningSkill resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLearningSkillItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getLearningSkillItem.');
            }
            const localVarPath = `/api/auth/v1/learning-skill/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a LearningSkill resource.
         * @param {LearningSkilljsonldLearningSkillWrite} [body] The new LearningSkill resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLearningSkillCollection(body?: LearningSkilljsonldLearningSkillWrite, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/learning-skill`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"LearningSkillLearningSkillWrite" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Replaces the LearningSkill resource.
         * @param {string} id 
         * @param {LearningSkilljsonldLearningSkillWrite} [body] The updated LearningSkill resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putLearningSkillItem(id: string, body?: LearningSkilljsonldLearningSkillWrite, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putLearningSkillItem.');
            }
            const localVarPath = `/api/auth/v1/learning-skill/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"LearningSkillLearningSkillWrite" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LearningSkillApi - functional programming interface
 * @export
 */
export const LearningSkillApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves the collection of LearningSkill resources.
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {boolean} [isPublic] 
         * @param {Array<boolean>} [isPublic] 
         * @param {number} [creatorId] 
         * @param {Array<number>} [creatorId] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLearningSkillCollection(id?: number, id?: Array<number>, isPublic?: boolean, isPublic?: Array<boolean>, creatorId?: number, creatorId?: Array<number>, page?: number, itemsPerPage?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2001> {
            const localVarFetchArgs = LearningSkillApiFetchParamCreator(configuration).getLearningSkillCollection(id, id, isPublic, isPublic, creatorId, creatorId, page, itemsPerPage, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves a LearningSkill resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLearningSkillItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LearningSkilljsonldLearningSkillDetail> {
            const localVarFetchArgs = LearningSkillApiFetchParamCreator(configuration).getLearningSkillItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Creates a LearningSkill resource.
         * @param {LearningSkilljsonldLearningSkillWrite} [body] The new LearningSkill resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLearningSkillCollection(body?: LearningSkilljsonldLearningSkillWrite, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LearningSkilljsonldLearningSkillDetail> {
            const localVarFetchArgs = LearningSkillApiFetchParamCreator(configuration).postLearningSkillCollection(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Replaces the LearningSkill resource.
         * @param {string} id 
         * @param {LearningSkilljsonldLearningSkillWrite} [body] The updated LearningSkill resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putLearningSkillItem(id: string, body?: LearningSkilljsonldLearningSkillWrite, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<LearningSkilljsonldLearningSkillDetail> {
            const localVarFetchArgs = LearningSkillApiFetchParamCreator(configuration).putLearningSkillItem(id, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * LearningSkillApi - factory interface
 * @export
 */
export const LearningSkillApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Retrieves the collection of LearningSkill resources.
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {boolean} [isPublic] 
         * @param {Array<boolean>} [isPublic] 
         * @param {number} [creatorId] 
         * @param {Array<number>} [creatorId] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLearningSkillCollection(id?: number, id?: Array<number>, isPublic?: boolean, isPublic?: Array<boolean>, creatorId?: number, creatorId?: Array<number>, page?: number, itemsPerPage?: number, options?: any) {
            return LearningSkillApiFp(configuration).getLearningSkillCollection(id, id, isPublic, isPublic, creatorId, creatorId, page, itemsPerPage, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves a LearningSkill resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLearningSkillItem(id: string, options?: any) {
            return LearningSkillApiFp(configuration).getLearningSkillItem(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Creates a LearningSkill resource.
         * @param {LearningSkilljsonldLearningSkillWrite} [body] The new LearningSkill resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLearningSkillCollection(body?: LearningSkilljsonldLearningSkillWrite, options?: any) {
            return LearningSkillApiFp(configuration).postLearningSkillCollection(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Replaces the LearningSkill resource.
         * @param {string} id 
         * @param {LearningSkilljsonldLearningSkillWrite} [body] The updated LearningSkill resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putLearningSkillItem(id: string, body?: LearningSkilljsonldLearningSkillWrite, options?: any) {
            return LearningSkillApiFp(configuration).putLearningSkillItem(id, body, options)(fetch, basePath);
        },
    };
};

/**
 * LearningSkillApi - object-oriented interface
 * @export
 * @class LearningSkillApi
 * @extends {BaseAPI}
 */
export class LearningSkillApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves the collection of LearningSkill resources.
     * @param {number} [id] 
     * @param {Array<number>} [id] 
     * @param {boolean} [isPublic] 
     * @param {Array<boolean>} [isPublic] 
     * @param {number} [creatorId] 
     * @param {Array<number>} [creatorId] 
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningSkillApi
     */
    public getLearningSkillCollection(id?: number, id?: Array<number>, isPublic?: boolean, isPublic?: Array<boolean>, creatorId?: number, creatorId?: Array<number>, page?: number, itemsPerPage?: number, options?: any) {
        return LearningSkillApiFp(this.configuration).getLearningSkillCollection(id, id, isPublic, isPublic, creatorId, creatorId, page, itemsPerPage, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves a LearningSkill resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningSkillApi
     */
    public getLearningSkillItem(id: string, options?: any) {
        return LearningSkillApiFp(this.configuration).getLearningSkillItem(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Creates a LearningSkill resource.
     * @param {LearningSkilljsonldLearningSkillWrite} [body] The new LearningSkill resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningSkillApi
     */
    public postLearningSkillCollection(body?: LearningSkilljsonldLearningSkillWrite, options?: any) {
        return LearningSkillApiFp(this.configuration).postLearningSkillCollection(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Replaces the LearningSkill resource.
     * @param {string} id 
     * @param {LearningSkilljsonldLearningSkillWrite} [body] The updated LearningSkill resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LearningSkillApi
     */
    public putLearningSkillItem(id: string, body?: LearningSkilljsonldLearningSkillWrite, options?: any) {
        return LearningSkillApiFp(this.configuration).putLearningSkillItem(id, body, options)(this.fetch, this.basePath);
    }

}
/**
 * MediaApi - fetch parameter creator
 * @export
 */
export const MediaApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves the collection of Media resources.
         * @param {number} [mediaType] 
         * @param {Array<number>} [mediaType] 
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {boolean} [existsCreator] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaCollection(mediaType?: number, mediaType?: Array<number>, id?: number, id?: Array<number>, existsCreator?: boolean, page?: number, itemsPerPage?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/medias`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (mediaType !== undefined) {
                localVarQueryParameter['media_type'] = mediaType;
            }

            if (mediaType) {
                localVarQueryParameter['media_type[]'] = mediaType;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (id) {
                localVarQueryParameter['id[]'] = id;
            }

            if (existsCreator !== undefined) {
                localVarQueryParameter['exists[creator]'] = existsCreator;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a Media resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getMediaItem.');
            }
            const localVarPath = `/api/auth/v1/media/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a Media resource.
         * @param {MediajsonldMediaWrite} [body] The new Media resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMediaCollection(body?: MediajsonldMediaWrite, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/media`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"MediaMediaWrite" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MediaApi - functional programming interface
 * @export
 */
export const MediaApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves the collection of Media resources.
         * @param {number} [mediaType] 
         * @param {Array<number>} [mediaType] 
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {boolean} [existsCreator] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaCollection(mediaType?: number, mediaType?: Array<number>, id?: number, id?: Array<number>, existsCreator?: boolean, page?: number, itemsPerPage?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2002> {
            const localVarFetchArgs = MediaApiFetchParamCreator(configuration).getMediaCollection(mediaType, mediaType, id, id, existsCreator, page, itemsPerPage, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves a Media resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MediajsonldMediaDetail> {
            const localVarFetchArgs = MediaApiFetchParamCreator(configuration).getMediaItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Creates a Media resource.
         * @param {MediajsonldMediaWrite} [body] The new Media resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMediaCollection(body?: MediajsonldMediaWrite, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<MediajsonldMediaDetail> {
            const localVarFetchArgs = MediaApiFetchParamCreator(configuration).postMediaCollection(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * MediaApi - factory interface
 * @export
 */
export const MediaApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Retrieves the collection of Media resources.
         * @param {number} [mediaType] 
         * @param {Array<number>} [mediaType] 
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {boolean} [existsCreator] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaCollection(mediaType?: number, mediaType?: Array<number>, id?: number, id?: Array<number>, existsCreator?: boolean, page?: number, itemsPerPage?: number, options?: any) {
            return MediaApiFp(configuration).getMediaCollection(mediaType, mediaType, id, id, existsCreator, page, itemsPerPage, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves a Media resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaItem(id: string, options?: any) {
            return MediaApiFp(configuration).getMediaItem(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Creates a Media resource.
         * @param {MediajsonldMediaWrite} [body] The new Media resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMediaCollection(body?: MediajsonldMediaWrite, options?: any) {
            return MediaApiFp(configuration).postMediaCollection(body, options)(fetch, basePath);
        },
    };
};

/**
 * MediaApi - object-oriented interface
 * @export
 * @class MediaApi
 * @extends {BaseAPI}
 */
export class MediaApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves the collection of Media resources.
     * @param {number} [mediaType] 
     * @param {Array<number>} [mediaType] 
     * @param {number} [id] 
     * @param {Array<number>} [id] 
     * @param {boolean} [existsCreator] 
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public getMediaCollection(mediaType?: number, mediaType?: Array<number>, id?: number, id?: Array<number>, existsCreator?: boolean, page?: number, itemsPerPage?: number, options?: any) {
        return MediaApiFp(this.configuration).getMediaCollection(mediaType, mediaType, id, id, existsCreator, page, itemsPerPage, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves a Media resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public getMediaItem(id: string, options?: any) {
        return MediaApiFp(this.configuration).getMediaItem(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Creates a Media resource.
     * @param {MediajsonldMediaWrite} [body] The new Media resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    public postMediaCollection(body?: MediajsonldMediaWrite, options?: any) {
        return MediaApiFp(this.configuration).postMediaCollection(body, options)(this.fetch, this.basePath);
    }

}
/**
 * NotificationApi - fetch parameter creator
 * @export
 */
export const NotificationApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves the collection of Notification resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationCollection(page?: number, itemsPerPage?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/notifications`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a Notification resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getNotificationItem.');
            }
            const localVarPath = `/api/auth/v1/notification/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates the Notification resource.
         * @param {string} id 
         * @param {NotificationjsonldNotificationWrite} [body] The updated Notification resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchNotificationItem(id: string, body?: NotificationjsonldNotificationWrite, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling patchNotificationItem.');
            }
            const localVarPath = `/api/auth/v1/notification/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"NotificationNotificationWrite" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationApi - functional programming interface
 * @export
 */
export const NotificationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves the collection of Notification resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationCollection(page?: number, itemsPerPage?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2003> {
            const localVarFetchArgs = NotificationApiFetchParamCreator(configuration).getNotificationCollection(page, itemsPerPage, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves a Notification resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NotificationjsonldNotificationDetail> {
            const localVarFetchArgs = NotificationApiFetchParamCreator(configuration).getNotificationItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates the Notification resource.
         * @param {string} id 
         * @param {NotificationjsonldNotificationWrite} [body] The updated Notification resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchNotificationItem(id: string, body?: NotificationjsonldNotificationWrite, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NotificationjsonldNotificationDetail> {
            const localVarFetchArgs = NotificationApiFetchParamCreator(configuration).patchNotificationItem(id, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * NotificationApi - factory interface
 * @export
 */
export const NotificationApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Retrieves the collection of Notification resources.
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationCollection(page?: number, itemsPerPage?: number, options?: any) {
            return NotificationApiFp(configuration).getNotificationCollection(page, itemsPerPage, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves a Notification resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationItem(id: string, options?: any) {
            return NotificationApiFp(configuration).getNotificationItem(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates the Notification resource.
         * @param {string} id 
         * @param {NotificationjsonldNotificationWrite} [body] The updated Notification resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchNotificationItem(id: string, body?: NotificationjsonldNotificationWrite, options?: any) {
            return NotificationApiFp(configuration).patchNotificationItem(id, body, options)(fetch, basePath);
        },
    };
};

/**
 * NotificationApi - object-oriented interface
 * @export
 * @class NotificationApi
 * @extends {BaseAPI}
 */
export class NotificationApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves the collection of Notification resources.
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public getNotificationCollection(page?: number, itemsPerPage?: number, options?: any) {
        return NotificationApiFp(this.configuration).getNotificationCollection(page, itemsPerPage, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves a Notification resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public getNotificationItem(id: string, options?: any) {
        return NotificationApiFp(this.configuration).getNotificationItem(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates the Notification resource.
     * @param {string} id 
     * @param {NotificationjsonldNotificationWrite} [body] The updated Notification resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationApi
     */
    public patchNotificationItem(id: string, body?: NotificationjsonldNotificationWrite, options?: any) {
        return NotificationApiFp(this.configuration).patchNotificationItem(id, body, options)(this.fetch, this.basePath);
    }

}
/**
 * OtherUserApi - fetch parameter creator
 * @export
 */
export const OtherUserApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves the collection of OtherUser resources.
         * @param {number} [schoolId] 
         * @param {Array<number>} [schoolId] 
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOtherUserCollection(schoolId?: number, schoolId?: Array<number>, id?: number, id?: Array<number>, page?: number, itemsPerPage?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/other-users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (schoolId !== undefined) {
                localVarQueryParameter['school.id'] = schoolId;
            }

            if (schoolId) {
                localVarQueryParameter['school.id[]'] = schoolId;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (id) {
                localVarQueryParameter['id[]'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a OtherUser resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOtherUserItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOtherUserItem.');
            }
            const localVarPath = `/api/auth/v1/other-user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OtherUserApi - functional programming interface
 * @export
 */
export const OtherUserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves the collection of OtherUser resources.
         * @param {number} [schoolId] 
         * @param {Array<number>} [schoolId] 
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOtherUserCollection(schoolId?: number, schoolId?: Array<number>, id?: number, id?: Array<number>, page?: number, itemsPerPage?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2004> {
            const localVarFetchArgs = OtherUserApiFetchParamCreator(configuration).getOtherUserCollection(schoolId, schoolId, id, id, page, itemsPerPage, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves a OtherUser resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOtherUserItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<OtherUserjsonldOtherUserDetail> {
            const localVarFetchArgs = OtherUserApiFetchParamCreator(configuration).getOtherUserItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * OtherUserApi - factory interface
 * @export
 */
export const OtherUserApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Retrieves the collection of OtherUser resources.
         * @param {number} [schoolId] 
         * @param {Array<number>} [schoolId] 
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOtherUserCollection(schoolId?: number, schoolId?: Array<number>, id?: number, id?: Array<number>, page?: number, itemsPerPage?: number, options?: any) {
            return OtherUserApiFp(configuration).getOtherUserCollection(schoolId, schoolId, id, id, page, itemsPerPage, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves a OtherUser resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOtherUserItem(id: string, options?: any) {
            return OtherUserApiFp(configuration).getOtherUserItem(id, options)(fetch, basePath);
        },
    };
};

/**
 * OtherUserApi - object-oriented interface
 * @export
 * @class OtherUserApi
 * @extends {BaseAPI}
 */
export class OtherUserApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves the collection of OtherUser resources.
     * @param {number} [schoolId] 
     * @param {Array<number>} [schoolId] 
     * @param {number} [id] 
     * @param {Array<number>} [id] 
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherUserApi
     */
    public getOtherUserCollection(schoolId?: number, schoolId?: Array<number>, id?: number, id?: Array<number>, page?: number, itemsPerPage?: number, options?: any) {
        return OtherUserApiFp(this.configuration).getOtherUserCollection(schoolId, schoolId, id, id, page, itemsPerPage, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves a OtherUser resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OtherUserApi
     */
    public getOtherUserItem(id: string, options?: any) {
        return OtherUserApiFp(this.configuration).getOtherUserItem(id, options)(this.fetch, this.basePath);
    }

}
/**
 * ParentUserApi - fetch parameter creator
 * @export
 */
export const ParentUserApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves the collection of ParentUser resources.
         * @param {number} [schoolId] 
         * @param {Array<number>} [schoolId] 
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParentUserCollection(schoolId?: number, schoolId?: Array<number>, id?: number, id?: Array<number>, page?: number, itemsPerPage?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/parent-users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (schoolId !== undefined) {
                localVarQueryParameter['school.id'] = schoolId;
            }

            if (schoolId) {
                localVarQueryParameter['school.id[]'] = schoolId;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (id) {
                localVarQueryParameter['id[]'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a ParentUser resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParentUserItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getParentUserItem.');
            }
            const localVarPath = `/api/auth/v1/parent-user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ParentUserApi - functional programming interface
 * @export
 */
export const ParentUserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves the collection of ParentUser resources.
         * @param {number} [schoolId] 
         * @param {Array<number>} [schoolId] 
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParentUserCollection(schoolId?: number, schoolId?: Array<number>, id?: number, id?: Array<number>, page?: number, itemsPerPage?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2005> {
            const localVarFetchArgs = ParentUserApiFetchParamCreator(configuration).getParentUserCollection(schoolId, schoolId, id, id, page, itemsPerPage, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves a ParentUser resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParentUserItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ParentUserjsonldParentUserDetail> {
            const localVarFetchArgs = ParentUserApiFetchParamCreator(configuration).getParentUserItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ParentUserApi - factory interface
 * @export
 */
export const ParentUserApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Retrieves the collection of ParentUser resources.
         * @param {number} [schoolId] 
         * @param {Array<number>} [schoolId] 
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParentUserCollection(schoolId?: number, schoolId?: Array<number>, id?: number, id?: Array<number>, page?: number, itemsPerPage?: number, options?: any) {
            return ParentUserApiFp(configuration).getParentUserCollection(schoolId, schoolId, id, id, page, itemsPerPage, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves a ParentUser resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParentUserItem(id: string, options?: any) {
            return ParentUserApiFp(configuration).getParentUserItem(id, options)(fetch, basePath);
        },
    };
};

/**
 * ParentUserApi - object-oriented interface
 * @export
 * @class ParentUserApi
 * @extends {BaseAPI}
 */
export class ParentUserApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves the collection of ParentUser resources.
     * @param {number} [schoolId] 
     * @param {Array<number>} [schoolId] 
     * @param {number} [id] 
     * @param {Array<number>} [id] 
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParentUserApi
     */
    public getParentUserCollection(schoolId?: number, schoolId?: Array<number>, id?: number, id?: Array<number>, page?: number, itemsPerPage?: number, options?: any) {
        return ParentUserApiFp(this.configuration).getParentUserCollection(schoolId, schoolId, id, id, page, itemsPerPage, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves a ParentUser resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ParentUserApi
     */
    public getParentUserItem(id: string, options?: any) {
        return ParentUserApiFp(this.configuration).getParentUserItem(id, options)(this.fetch, this.basePath);
    }

}
/**
 * PrivacyPolicyApi - fetch parameter creator
 * @export
 */
export const PrivacyPolicyApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Accept privacy policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1PrivacyPolicyAcceptPost(options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/privacy-policy/accept`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PrivacyPolicyApi - functional programming interface
 * @export
 */
export const PrivacyPolicyApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Accept privacy policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1PrivacyPolicyAcceptPost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PrivacyPolicyApiFetchParamCreator(configuration).apiAuthV1PrivacyPolicyAcceptPost(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PrivacyPolicyApi - factory interface
 * @export
 */
export const PrivacyPolicyApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Accept privacy policy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1PrivacyPolicyAcceptPost(options?: any) {
            return PrivacyPolicyApiFp(configuration).apiAuthV1PrivacyPolicyAcceptPost(options)(fetch, basePath);
        },
    };
};

/**
 * PrivacyPolicyApi - object-oriented interface
 * @export
 * @class PrivacyPolicyApi
 * @extends {BaseAPI}
 */
export class PrivacyPolicyApi extends BaseAPI {
    /**
     * 
     * @summary Accept privacy policy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivacyPolicyApi
     */
    public apiAuthV1PrivacyPolicyAcceptPost(options?: any) {
        return PrivacyPolicyApiFp(this.configuration).apiAuthV1PrivacyPolicyAcceptPost(options)(this.fetch, this.basePath);
    }

}
/**
 * RatingApi - fetch parameter creator
 * @export
 */
export const RatingApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Removes the Rating resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRatingItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteRatingItem.');
            }
            const localVarPath = `/api/auth/v1/rating/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves the collection of Rating resources.
         * @param {number} [teachingClassId] 
         * @param {Array<number>} [teachingClassId] 
         * @param {number} [ratingStudentsStudentId] 
         * @param {Array<number>} [ratingStudentsStudentId] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingCollection(teachingClassId?: number, teachingClassId?: Array<number>, ratingStudentsStudentId?: number, ratingStudentsStudentId?: Array<number>, page?: number, itemsPerPage?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/ratings`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (teachingClassId !== undefined) {
                localVarQueryParameter['teaching_class.id'] = teachingClassId;
            }

            if (teachingClassId) {
                localVarQueryParameter['teaching_class.id[]'] = teachingClassId;
            }

            if (ratingStudentsStudentId !== undefined) {
                localVarQueryParameter['rating_students.student.id'] = ratingStudentsStudentId;
            }

            if (ratingStudentsStudentId) {
                localVarQueryParameter['rating_students.student.id[]'] = ratingStudentsStudentId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a Rating resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getRatingItem.');
            }
            const localVarPath = `/api/auth/v1/rating/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates the Rating resource.
         * @param {string} id 
         * @param {RatingjsonldRatingWrite} [body] The updated Rating resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRatingItem(id: string, body?: RatingjsonldRatingWrite, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling patchRatingItem.');
            }
            const localVarPath = `/api/auth/v1/rating/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RatingRatingWrite" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a Rating resource.
         * @param {RatingjsonldRatingWrite} [body] The new Rating resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRatingCollection(body?: RatingjsonldRatingWrite, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/rating`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RatingRatingWrite" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RatingApi - functional programming interface
 * @export
 */
export const RatingApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Removes the Rating resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRatingItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = RatingApiFetchParamCreator(configuration).deleteRatingItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves the collection of Rating resources.
         * @param {number} [teachingClassId] 
         * @param {Array<number>} [teachingClassId] 
         * @param {number} [ratingStudentsStudentId] 
         * @param {Array<number>} [ratingStudentsStudentId] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingCollection(teachingClassId?: number, teachingClassId?: Array<number>, ratingStudentsStudentId?: number, ratingStudentsStudentId?: Array<number>, page?: number, itemsPerPage?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2008> {
            const localVarFetchArgs = RatingApiFetchParamCreator(configuration).getRatingCollection(teachingClassId, teachingClassId, ratingStudentsStudentId, ratingStudentsStudentId, page, itemsPerPage, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves a Rating resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RatingjsonldRatingDetail> {
            const localVarFetchArgs = RatingApiFetchParamCreator(configuration).getRatingItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates the Rating resource.
         * @param {string} id 
         * @param {RatingjsonldRatingWrite} [body] The updated Rating resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRatingItem(id: string, body?: RatingjsonldRatingWrite, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RatingjsonldRatingDetail> {
            const localVarFetchArgs = RatingApiFetchParamCreator(configuration).patchRatingItem(id, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Creates a Rating resource.
         * @param {RatingjsonldRatingWrite} [body] The new Rating resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRatingCollection(body?: RatingjsonldRatingWrite, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RatingjsonldRatingDetail> {
            const localVarFetchArgs = RatingApiFetchParamCreator(configuration).postRatingCollection(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * RatingApi - factory interface
 * @export
 */
export const RatingApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Removes the Rating resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRatingItem(id: string, options?: any) {
            return RatingApiFp(configuration).deleteRatingItem(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves the collection of Rating resources.
         * @param {number} [teachingClassId] 
         * @param {Array<number>} [teachingClassId] 
         * @param {number} [ratingStudentsStudentId] 
         * @param {Array<number>} [ratingStudentsStudentId] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingCollection(teachingClassId?: number, teachingClassId?: Array<number>, ratingStudentsStudentId?: number, ratingStudentsStudentId?: Array<number>, page?: number, itemsPerPage?: number, options?: any) {
            return RatingApiFp(configuration).getRatingCollection(teachingClassId, teachingClassId, ratingStudentsStudentId, ratingStudentsStudentId, page, itemsPerPage, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves a Rating resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingItem(id: string, options?: any) {
            return RatingApiFp(configuration).getRatingItem(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates the Rating resource.
         * @param {string} id 
         * @param {RatingjsonldRatingWrite} [body] The updated Rating resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRatingItem(id: string, body?: RatingjsonldRatingWrite, options?: any) {
            return RatingApiFp(configuration).patchRatingItem(id, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Creates a Rating resource.
         * @param {RatingjsonldRatingWrite} [body] The new Rating resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRatingCollection(body?: RatingjsonldRatingWrite, options?: any) {
            return RatingApiFp(configuration).postRatingCollection(body, options)(fetch, basePath);
        },
    };
};

/**
 * RatingApi - object-oriented interface
 * @export
 * @class RatingApi
 * @extends {BaseAPI}
 */
export class RatingApi extends BaseAPI {
    /**
     * 
     * @summary Removes the Rating resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingApi
     */
    public deleteRatingItem(id: string, options?: any) {
        return RatingApiFp(this.configuration).deleteRatingItem(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves the collection of Rating resources.
     * @param {number} [teachingClassId] 
     * @param {Array<number>} [teachingClassId] 
     * @param {number} [ratingStudentsStudentId] 
     * @param {Array<number>} [ratingStudentsStudentId] 
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingApi
     */
    public getRatingCollection(teachingClassId?: number, teachingClassId?: Array<number>, ratingStudentsStudentId?: number, ratingStudentsStudentId?: Array<number>, page?: number, itemsPerPage?: number, options?: any) {
        return RatingApiFp(this.configuration).getRatingCollection(teachingClassId, teachingClassId, ratingStudentsStudentId, ratingStudentsStudentId, page, itemsPerPage, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves a Rating resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingApi
     */
    public getRatingItem(id: string, options?: any) {
        return RatingApiFp(this.configuration).getRatingItem(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates the Rating resource.
     * @param {string} id 
     * @param {RatingjsonldRatingWrite} [body] The updated Rating resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingApi
     */
    public patchRatingItem(id: string, body?: RatingjsonldRatingWrite, options?: any) {
        return RatingApiFp(this.configuration).patchRatingItem(id, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Creates a Rating resource.
     * @param {RatingjsonldRatingWrite} [body] The new Rating resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingApi
     */
    public postRatingCollection(body?: RatingjsonldRatingWrite, options?: any) {
        return RatingApiFp(this.configuration).postRatingCollection(body, options)(this.fetch, this.basePath);
    }

}
/**
 * RatingMediaApi - fetch parameter creator
 * @export
 */
export const RatingMediaApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Removes the RatingMedia resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRatingMediaItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteRatingMediaItem.');
            }
            const localVarPath = `/api/auth/v1/rating-media/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves the collection of RatingMedia resources.
         * @param {number} [ratingId] 
         * @param {Array<number>} [ratingId] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingMediaCollection(ratingId?: number, ratingId?: Array<number>, page?: number, itemsPerPage?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/rating-medias`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (ratingId !== undefined) {
                localVarQueryParameter['rating.id'] = ratingId;
            }

            if (ratingId) {
                localVarQueryParameter['rating.id[]'] = ratingId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a RatingMedia resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingMediaItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getRatingMediaItem.');
            }
            const localVarPath = `/api/auth/v1/rating-media/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a RatingMedia resource.
         * @param {RatingMediajsonldRatingMediaWrite} [body] The new RatingMedia resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRatingMediaCollection(body?: RatingMediajsonldRatingMediaWrite, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/rating-media`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RatingMediaRatingMediaWrite" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RatingMediaApi - functional programming interface
 * @export
 */
export const RatingMediaApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Removes the RatingMedia resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRatingMediaItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = RatingMediaApiFetchParamCreator(configuration).deleteRatingMediaItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves the collection of RatingMedia resources.
         * @param {number} [ratingId] 
         * @param {Array<number>} [ratingId] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingMediaCollection(ratingId?: number, ratingId?: Array<number>, page?: number, itemsPerPage?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2006> {
            const localVarFetchArgs = RatingMediaApiFetchParamCreator(configuration).getRatingMediaCollection(ratingId, ratingId, page, itemsPerPage, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves a RatingMedia resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingMediaItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RatingMediajsonldRatingMediaDetail> {
            const localVarFetchArgs = RatingMediaApiFetchParamCreator(configuration).getRatingMediaItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Creates a RatingMedia resource.
         * @param {RatingMediajsonldRatingMediaWrite} [body] The new RatingMedia resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRatingMediaCollection(body?: RatingMediajsonldRatingMediaWrite, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RatingMediajsonldRatingMediaDetail> {
            const localVarFetchArgs = RatingMediaApiFetchParamCreator(configuration).postRatingMediaCollection(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * RatingMediaApi - factory interface
 * @export
 */
export const RatingMediaApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Removes the RatingMedia resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRatingMediaItem(id: string, options?: any) {
            return RatingMediaApiFp(configuration).deleteRatingMediaItem(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves the collection of RatingMedia resources.
         * @param {number} [ratingId] 
         * @param {Array<number>} [ratingId] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingMediaCollection(ratingId?: number, ratingId?: Array<number>, page?: number, itemsPerPage?: number, options?: any) {
            return RatingMediaApiFp(configuration).getRatingMediaCollection(ratingId, ratingId, page, itemsPerPage, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves a RatingMedia resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingMediaItem(id: string, options?: any) {
            return RatingMediaApiFp(configuration).getRatingMediaItem(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Creates a RatingMedia resource.
         * @param {RatingMediajsonldRatingMediaWrite} [body] The new RatingMedia resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRatingMediaCollection(body?: RatingMediajsonldRatingMediaWrite, options?: any) {
            return RatingMediaApiFp(configuration).postRatingMediaCollection(body, options)(fetch, basePath);
        },
    };
};

/**
 * RatingMediaApi - object-oriented interface
 * @export
 * @class RatingMediaApi
 * @extends {BaseAPI}
 */
export class RatingMediaApi extends BaseAPI {
    /**
     * 
     * @summary Removes the RatingMedia resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingMediaApi
     */
    public deleteRatingMediaItem(id: string, options?: any) {
        return RatingMediaApiFp(this.configuration).deleteRatingMediaItem(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves the collection of RatingMedia resources.
     * @param {number} [ratingId] 
     * @param {Array<number>} [ratingId] 
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingMediaApi
     */
    public getRatingMediaCollection(ratingId?: number, ratingId?: Array<number>, page?: number, itemsPerPage?: number, options?: any) {
        return RatingMediaApiFp(this.configuration).getRatingMediaCollection(ratingId, ratingId, page, itemsPerPage, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves a RatingMedia resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingMediaApi
     */
    public getRatingMediaItem(id: string, options?: any) {
        return RatingMediaApiFp(this.configuration).getRatingMediaItem(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Creates a RatingMedia resource.
     * @param {RatingMediajsonldRatingMediaWrite} [body] The new RatingMedia resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingMediaApi
     */
    public postRatingMediaCollection(body?: RatingMediajsonldRatingMediaWrite, options?: any) {
        return RatingMediaApiFp(this.configuration).postRatingMediaCollection(body, options)(this.fetch, this.basePath);
    }

}
/**
 * RatingStudentApi - fetch parameter creator
 * @export
 */
export const RatingStudentApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Removes the RatingStudent resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRatingStudentItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteRatingStudentItem.');
            }
            const localVarPath = `/api/auth/v1/rating-student/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves the collection of RatingStudent resources.
         * @param {number} [ratingId] 
         * @param {Array<number>} [ratingId] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingStudentCollection(ratingId?: number, ratingId?: Array<number>, page?: number, itemsPerPage?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/rating-students`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (ratingId !== undefined) {
                localVarQueryParameter['rating.id'] = ratingId;
            }

            if (ratingId) {
                localVarQueryParameter['rating.id[]'] = ratingId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a RatingStudent resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingStudentItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getRatingStudentItem.');
            }
            const localVarPath = `/api/auth/v1/rating-student/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a RatingStudent resource.
         * @param {RatingStudentjsonldRatingStudentWrite} [body] The new RatingStudent resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRatingStudentCollection(body?: RatingStudentjsonldRatingStudentWrite, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/rating-student`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RatingStudentRatingStudentWrite" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RatingStudentApi - functional programming interface
 * @export
 */
export const RatingStudentApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Removes the RatingStudent resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRatingStudentItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = RatingStudentApiFetchParamCreator(configuration).deleteRatingStudentItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves the collection of RatingStudent resources.
         * @param {number} [ratingId] 
         * @param {Array<number>} [ratingId] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingStudentCollection(ratingId?: number, ratingId?: Array<number>, page?: number, itemsPerPage?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2007> {
            const localVarFetchArgs = RatingStudentApiFetchParamCreator(configuration).getRatingStudentCollection(ratingId, ratingId, page, itemsPerPage, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves a RatingStudent resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingStudentItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RatingStudentjsonldRatingStudentDetail> {
            const localVarFetchArgs = RatingStudentApiFetchParamCreator(configuration).getRatingStudentItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Creates a RatingStudent resource.
         * @param {RatingStudentjsonldRatingStudentWrite} [body] The new RatingStudent resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRatingStudentCollection(body?: RatingStudentjsonldRatingStudentWrite, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RatingStudentjsonldRatingStudentDetail> {
            const localVarFetchArgs = RatingStudentApiFetchParamCreator(configuration).postRatingStudentCollection(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * RatingStudentApi - factory interface
 * @export
 */
export const RatingStudentApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Removes the RatingStudent resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRatingStudentItem(id: string, options?: any) {
            return RatingStudentApiFp(configuration).deleteRatingStudentItem(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves the collection of RatingStudent resources.
         * @param {number} [ratingId] 
         * @param {Array<number>} [ratingId] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingStudentCollection(ratingId?: number, ratingId?: Array<number>, page?: number, itemsPerPage?: number, options?: any) {
            return RatingStudentApiFp(configuration).getRatingStudentCollection(ratingId, ratingId, page, itemsPerPage, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves a RatingStudent resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRatingStudentItem(id: string, options?: any) {
            return RatingStudentApiFp(configuration).getRatingStudentItem(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Creates a RatingStudent resource.
         * @param {RatingStudentjsonldRatingStudentWrite} [body] The new RatingStudent resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRatingStudentCollection(body?: RatingStudentjsonldRatingStudentWrite, options?: any) {
            return RatingStudentApiFp(configuration).postRatingStudentCollection(body, options)(fetch, basePath);
        },
    };
};

/**
 * RatingStudentApi - object-oriented interface
 * @export
 * @class RatingStudentApi
 * @extends {BaseAPI}
 */
export class RatingStudentApi extends BaseAPI {
    /**
     * 
     * @summary Removes the RatingStudent resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingStudentApi
     */
    public deleteRatingStudentItem(id: string, options?: any) {
        return RatingStudentApiFp(this.configuration).deleteRatingStudentItem(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves the collection of RatingStudent resources.
     * @param {number} [ratingId] 
     * @param {Array<number>} [ratingId] 
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingStudentApi
     */
    public getRatingStudentCollection(ratingId?: number, ratingId?: Array<number>, page?: number, itemsPerPage?: number, options?: any) {
        return RatingStudentApiFp(this.configuration).getRatingStudentCollection(ratingId, ratingId, page, itemsPerPage, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves a RatingStudent resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingStudentApi
     */
    public getRatingStudentItem(id: string, options?: any) {
        return RatingStudentApiFp(this.configuration).getRatingStudentItem(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Creates a RatingStudent resource.
     * @param {RatingStudentjsonldRatingStudentWrite} [body] The new RatingStudent resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatingStudentApi
     */
    public postRatingStudentCollection(body?: RatingStudentjsonldRatingStudentWrite, options?: any) {
        return RatingStudentApiFp(this.configuration).postRatingStudentCollection(body, options)(this.fetch, this.basePath);
    }

}
/**
 * ReportApi - fetch parameter creator
 * @export
 */
export const ReportApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Generates a class report in PDF format.
         * @param {number} id The ID of the teaching class to generate the report for.
         * @param {} [] The start date of the data to be included in the report.
         * @param {} [] The end date of the data to be included in the report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1ReportPdfClassIdGet(id: number, ?: , ?: , options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiAuthV1ReportPdfClassIdGet.');
            }
            const localVarPath = `/api/auth/v1/report/pdf/class/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ( !== undefined) {
                localVarQueryParameter['startDate'] = ;
            }

            if ( !== undefined) {
                localVarQueryParameter['endDate'] = ;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generates a student report in PDF format.
         * @param {number} id The ID of the student to generate the report for.
         * @param {} [] The start date of the data to be included in the report.
         * @param {} [] The end date of the data to be included in the report.
         * @param {} [] The ID of the teaching class to filter the report based on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1ReportPdfStudentIdGet(id: number, ?: , ?: , ?: , options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiAuthV1ReportPdfStudentIdGet.');
            }
            const localVarPath = `/api/auth/v1/report/pdf/student/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ( !== undefined) {
                localVarQueryParameter['startDate'] = ;
            }

            if ( !== undefined) {
                localVarQueryParameter['endDate'] = ;
            }

            if ( !== undefined) {
                localVarQueryParameter['teachingClassId'] = ;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generates a class report in Excel format.
         * @param {number} id The ID of the teaching class to generate the report for.
         * @param {} [] The start date of the data to be included in the report.
         * @param {} [] The end date of the data to be included in the report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1ReportSpreadsheetClassIdGet(id: number, ?: , ?: , options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiAuthV1ReportSpreadsheetClassIdGet.');
            }
            const localVarPath = `/api/auth/v1/report/spreadsheet/class/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ( !== undefined) {
                localVarQueryParameter['startDate'] = ;
            }

            if ( !== undefined) {
                localVarQueryParameter['endDate'] = ;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generates a student report in Excel format.
         * @param {number} id The ID of the student to generate the report for.
         * @param {} [] The start date of the data to be included in the report.
         * @param {} [] The end date of the data to be included in the report.
         * @param {} [] The ID of the teaching class to filter the report based on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1ReportSpreadsheetStudentIdGet(id: number, ?: , ?: , ?: , options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling apiAuthV1ReportSpreadsheetStudentIdGet.');
            }
            const localVarPath = `/api/auth/v1/report/spreadsheet/student/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ( !== undefined) {
                localVarQueryParameter['startDate'] = ;
            }

            if ( !== undefined) {
                localVarQueryParameter['endDate'] = ;
            }

            if ( !== undefined) {
                localVarQueryParameter['teachingClassId'] = ;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportApi - functional programming interface
 * @export
 */
export const ReportApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Generates a class report in PDF format.
         * @param {number} id The ID of the teaching class to generate the report for.
         * @param {} [] The start date of the data to be included in the report.
         * @param {} [] The end date of the data to be included in the report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1ReportPdfClassIdGet(id: number, ?: , ?: , options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ReportApiFetchParamCreator(configuration).apiAuthV1ReportPdfClassIdGet(id, , , options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Generates a student report in PDF format.
         * @param {number} id The ID of the student to generate the report for.
         * @param {} [] The start date of the data to be included in the report.
         * @param {} [] The end date of the data to be included in the report.
         * @param {} [] The ID of the teaching class to filter the report based on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1ReportPdfStudentIdGet(id: number, ?: , ?: , ?: , options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ReportApiFetchParamCreator(configuration).apiAuthV1ReportPdfStudentIdGet(id, , , , options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Generates a class report in Excel format.
         * @param {number} id The ID of the teaching class to generate the report for.
         * @param {} [] The start date of the data to be included in the report.
         * @param {} [] The end date of the data to be included in the report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1ReportSpreadsheetClassIdGet(id: number, ?: , ?: , options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ReportApiFetchParamCreator(configuration).apiAuthV1ReportSpreadsheetClassIdGet(id, , , options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Generates a student report in Excel format.
         * @param {number} id The ID of the student to generate the report for.
         * @param {} [] The start date of the data to be included in the report.
         * @param {} [] The end date of the data to be included in the report.
         * @param {} [] The ID of the teaching class to filter the report based on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1ReportSpreadsheetStudentIdGet(id: number, ?: , ?: , ?: , options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ReportApiFetchParamCreator(configuration).apiAuthV1ReportSpreadsheetStudentIdGet(id, , , , options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ReportApi - factory interface
 * @export
 */
export const ReportApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Generates a class report in PDF format.
         * @param {number} id The ID of the teaching class to generate the report for.
         * @param {} [] The start date of the data to be included in the report.
         * @param {} [] The end date of the data to be included in the report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1ReportPdfClassIdGet(id: number, ?: , ?: , options?: any) {
            return ReportApiFp(configuration).apiAuthV1ReportPdfClassIdGet(id, , , options)(fetch, basePath);
        },
        /**
         * 
         * @summary Generates a student report in PDF format.
         * @param {number} id The ID of the student to generate the report for.
         * @param {} [] The start date of the data to be included in the report.
         * @param {} [] The end date of the data to be included in the report.
         * @param {} [] The ID of the teaching class to filter the report based on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1ReportPdfStudentIdGet(id: number, ?: , ?: , ?: , options?: any) {
            return ReportApiFp(configuration).apiAuthV1ReportPdfStudentIdGet(id, , , , options)(fetch, basePath);
        },
        /**
         * 
         * @summary Generates a class report in Excel format.
         * @param {number} id The ID of the teaching class to generate the report for.
         * @param {} [] The start date of the data to be included in the report.
         * @param {} [] The end date of the data to be included in the report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1ReportSpreadsheetClassIdGet(id: number, ?: , ?: , options?: any) {
            return ReportApiFp(configuration).apiAuthV1ReportSpreadsheetClassIdGet(id, , , options)(fetch, basePath);
        },
        /**
         * 
         * @summary Generates a student report in Excel format.
         * @param {number} id The ID of the student to generate the report for.
         * @param {} [] The start date of the data to be included in the report.
         * @param {} [] The end date of the data to be included in the report.
         * @param {} [] The ID of the teaching class to filter the report based on.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1ReportSpreadsheetStudentIdGet(id: number, ?: , ?: , ?: , options?: any) {
            return ReportApiFp(configuration).apiAuthV1ReportSpreadsheetStudentIdGet(id, , , , options)(fetch, basePath);
        },
    };
};

/**
 * ReportApi - object-oriented interface
 * @export
 * @class ReportApi
 * @extends {BaseAPI}
 */
export class ReportApi extends BaseAPI {
    /**
     * 
     * @summary Generates a class report in PDF format.
     * @param {number} id The ID of the teaching class to generate the report for.
     * @param {} [] The start date of the data to be included in the report.
     * @param {} [] The end date of the data to be included in the report.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public apiAuthV1ReportPdfClassIdGet(id: number, ?: , ?: , options?: any) {
        return ReportApiFp(this.configuration).apiAuthV1ReportPdfClassIdGet(id, , , options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Generates a student report in PDF format.
     * @param {number} id The ID of the student to generate the report for.
     * @param {} [] The start date of the data to be included in the report.
     * @param {} [] The end date of the data to be included in the report.
     * @param {} [] The ID of the teaching class to filter the report based on.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public apiAuthV1ReportPdfStudentIdGet(id: number, ?: , ?: , ?: , options?: any) {
        return ReportApiFp(this.configuration).apiAuthV1ReportPdfStudentIdGet(id, , , , options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Generates a class report in Excel format.
     * @param {number} id The ID of the teaching class to generate the report for.
     * @param {} [] The start date of the data to be included in the report.
     * @param {} [] The end date of the data to be included in the report.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public apiAuthV1ReportSpreadsheetClassIdGet(id: number, ?: , ?: , options?: any) {
        return ReportApiFp(this.configuration).apiAuthV1ReportSpreadsheetClassIdGet(id, , , options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Generates a student report in Excel format.
     * @param {number} id The ID of the student to generate the report for.
     * @param {} [] The start date of the data to be included in the report.
     * @param {} [] The end date of the data to be included in the report.
     * @param {} [] The ID of the teaching class to filter the report based on.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public apiAuthV1ReportSpreadsheetStudentIdGet(id: number, ?: , ?: , ?: , options?: any) {
        return ReportApiFp(this.configuration).apiAuthV1ReportSpreadsheetStudentIdGet(id, , , , options)(this.fetch, this.basePath);
    }

}
/**
 * SchoolApi - fetch parameter creator
 * @export
 */
export const SchoolApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves the collection of School resources.
         * @param {string} [name] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicSchoolCollection(name?: string, page?: number, itemsPerPage?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/public/v1/schools`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves the collection of School resources.
         * @param {string} [name] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchoolCollection(name?: string, page?: number, itemsPerPage?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/schools`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a School resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchoolItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getSchoolItem.');
            }
            const localVarPath = `/api/auth/v1/school/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a School resource.
         * @param {SchooljsonldSchoolWrite} [body] The new School resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSchoolCollection(body?: SchooljsonldSchoolWrite, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/school`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SchoolSchoolWrite" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SchoolApi - functional programming interface
 * @export
 */
export const SchoolApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves the collection of School resources.
         * @param {string} [name] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicSchoolCollection(name?: string, page?: number, itemsPerPage?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2009> {
            const localVarFetchArgs = SchoolApiFetchParamCreator(configuration).getPublicSchoolCollection(name, page, itemsPerPage, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves the collection of School resources.
         * @param {string} [name] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchoolCollection(name?: string, page?: number, itemsPerPage?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse2009> {
            const localVarFetchArgs = SchoolApiFetchParamCreator(configuration).getSchoolCollection(name, page, itemsPerPage, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves a School resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchoolItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SchooljsonldSchoolDetail> {
            const localVarFetchArgs = SchoolApiFetchParamCreator(configuration).getSchoolItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Creates a School resource.
         * @param {SchooljsonldSchoolWrite} [body] The new School resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSchoolCollection(body?: SchooljsonldSchoolWrite, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SchooljsonldSchoolDetail> {
            const localVarFetchArgs = SchoolApiFetchParamCreator(configuration).postSchoolCollection(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SchoolApi - factory interface
 * @export
 */
export const SchoolApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Retrieves the collection of School resources.
         * @param {string} [name] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublicSchoolCollection(name?: string, page?: number, itemsPerPage?: number, options?: any) {
            return SchoolApiFp(configuration).getPublicSchoolCollection(name, page, itemsPerPage, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves the collection of School resources.
         * @param {string} [name] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchoolCollection(name?: string, page?: number, itemsPerPage?: number, options?: any) {
            return SchoolApiFp(configuration).getSchoolCollection(name, page, itemsPerPage, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves a School resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSchoolItem(id: string, options?: any) {
            return SchoolApiFp(configuration).getSchoolItem(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Creates a School resource.
         * @param {SchooljsonldSchoolWrite} [body] The new School resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSchoolCollection(body?: SchooljsonldSchoolWrite, options?: any) {
            return SchoolApiFp(configuration).postSchoolCollection(body, options)(fetch, basePath);
        },
    };
};

/**
 * SchoolApi - object-oriented interface
 * @export
 * @class SchoolApi
 * @extends {BaseAPI}
 */
export class SchoolApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves the collection of School resources.
     * @param {string} [name] 
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolApi
     */
    public getPublicSchoolCollection(name?: string, page?: number, itemsPerPage?: number, options?: any) {
        return SchoolApiFp(this.configuration).getPublicSchoolCollection(name, page, itemsPerPage, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves the collection of School resources.
     * @param {string} [name] 
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolApi
     */
    public getSchoolCollection(name?: string, page?: number, itemsPerPage?: number, options?: any) {
        return SchoolApiFp(this.configuration).getSchoolCollection(name, page, itemsPerPage, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves a School resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolApi
     */
    public getSchoolItem(id: string, options?: any) {
        return SchoolApiFp(this.configuration).getSchoolItem(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Creates a School resource.
     * @param {SchooljsonldSchoolWrite} [body] The new School resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchoolApi
     */
    public postSchoolCollection(body?: SchooljsonldSchoolWrite, options?: any) {
        return SchoolApiFp(this.configuration).postSchoolCollection(body, options)(this.fetch, this.basePath);
    }

}
/**
 * SearchApi - fetch parameter creator
 * @export
 */
export const SearchApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Search content type.
         * @param {} [] Content type e.g course, blog, video
         * @param {} [] The search keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPublicV1SearchContentGet(?: , ?: , options: any = {}): FetchArgs {
            const localVarPath = `/api/public/v1/search/content`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if ( !== undefined) {
                localVarQueryParameter['content_type'] = ;
            }

            if ( !== undefined) {
                localVarQueryParameter['keyword'] = ;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Search content type.
         * @param {} [] Content type e.g course, blog, video
         * @param {} [] The search keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPublicV1SearchContentGet(?: , ?: , options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SearchApiFetchParamCreator(configuration).apiPublicV1SearchContentGet(, , options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Search content type.
         * @param {} [] Content type e.g course, blog, video
         * @param {} [] The search keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPublicV1SearchContentGet(?: , ?: , options?: any) {
            return SearchApiFp(configuration).apiPublicV1SearchContentGet(, , options)(fetch, basePath);
        },
    };
};

/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export class SearchApi extends BaseAPI {
    /**
     * 
     * @summary Search content type.
     * @param {} [] Content type e.g course, blog, video
     * @param {} [] The search keyword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public apiPublicV1SearchContentGet(?: , ?: , options?: any) {
        return SearchApiFp(this.configuration).apiPublicV1SearchContentGet(, , options)(this.fetch, this.basePath);
    }

}
/**
 * StudentApi - fetch parameter creator
 * @export
 */
export const StudentApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves the collection of Student resources.
         * @param {number} [teachingClassStudentsTeachingClassId] 
         * @param {Array<number>} [teachingClassStudentsTeachingClassId] 
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentCollection(teachingClassStudentsTeachingClassId?: number, teachingClassStudentsTeachingClassId?: Array<number>, id?: number, id?: Array<number>, page?: number, itemsPerPage?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/students`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (teachingClassStudentsTeachingClassId !== undefined) {
                localVarQueryParameter['teaching_class_students.teaching_class.id'] = teachingClassStudentsTeachingClassId;
            }

            if (teachingClassStudentsTeachingClassId) {
                localVarQueryParameter['teaching_class_students.teaching_class.id[]'] = teachingClassStudentsTeachingClassId;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (id) {
                localVarQueryParameter['id[]'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a Student resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getStudentItem.');
            }
            const localVarPath = `/api/auth/v1/student/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudentApi - functional programming interface
 * @export
 */
export const StudentApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves the collection of Student resources.
         * @param {number} [teachingClassStudentsTeachingClassId] 
         * @param {Array<number>} [teachingClassStudentsTeachingClassId] 
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentCollection(teachingClassStudentsTeachingClassId?: number, teachingClassStudentsTeachingClassId?: Array<number>, id?: number, id?: Array<number>, page?: number, itemsPerPage?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20013> {
            const localVarFetchArgs = StudentApiFetchParamCreator(configuration).getStudentCollection(teachingClassStudentsTeachingClassId, teachingClassStudentsTeachingClassId, id, id, page, itemsPerPage, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves a Student resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<StudentjsonldStudentDetail> {
            const localVarFetchArgs = StudentApiFetchParamCreator(configuration).getStudentItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * StudentApi - factory interface
 * @export
 */
export const StudentApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Retrieves the collection of Student resources.
         * @param {number} [teachingClassStudentsTeachingClassId] 
         * @param {Array<number>} [teachingClassStudentsTeachingClassId] 
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentCollection(teachingClassStudentsTeachingClassId?: number, teachingClassStudentsTeachingClassId?: Array<number>, id?: number, id?: Array<number>, page?: number, itemsPerPage?: number, options?: any) {
            return StudentApiFp(configuration).getStudentCollection(teachingClassStudentsTeachingClassId, teachingClassStudentsTeachingClassId, id, id, page, itemsPerPage, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves a Student resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentItem(id: string, options?: any) {
            return StudentApiFp(configuration).getStudentItem(id, options)(fetch, basePath);
        },
    };
};

/**
 * StudentApi - object-oriented interface
 * @export
 * @class StudentApi
 * @extends {BaseAPI}
 */
export class StudentApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves the collection of Student resources.
     * @param {number} [teachingClassStudentsTeachingClassId] 
     * @param {Array<number>} [teachingClassStudentsTeachingClassId] 
     * @param {number} [id] 
     * @param {Array<number>} [id] 
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public getStudentCollection(teachingClassStudentsTeachingClassId?: number, teachingClassStudentsTeachingClassId?: Array<number>, id?: number, id?: Array<number>, page?: number, itemsPerPage?: number, options?: any) {
        return StudentApiFp(this.configuration).getStudentCollection(teachingClassStudentsTeachingClassId, teachingClassStudentsTeachingClassId, id, id, page, itemsPerPage, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves a Student resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentApi
     */
    public getStudentItem(id: string, options?: any) {
        return StudentApiFp(this.configuration).getStudentItem(id, options)(this.fetch, this.basePath);
    }

}
/**
 * StudentProfileUserApi - fetch parameter creator
 * @export
 */
export const StudentProfileUserApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Removes the StudentProfileUser resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudentProfileUserItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteStudentProfileUserItem.');
            }
            const localVarPath = `/api/auth/v1/student-profile-user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves the collection of StudentProfileUser resources.
         * @param {number} [teachingClassId] 
         * @param {Array<number>} [teachingClassId] 
         * @param {number} [userId] 
         * @param {Array<number>} [userId] 
         * @param {number} [studentId] 
         * @param {Array<number>} [studentId] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentProfileUserCollection(teachingClassId?: number, teachingClassId?: Array<number>, userId?: number, userId?: Array<number>, studentId?: number, studentId?: Array<number>, page?: number, itemsPerPage?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/student-profile-users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (teachingClassId !== undefined) {
                localVarQueryParameter['teaching_class.id'] = teachingClassId;
            }

            if (teachingClassId) {
                localVarQueryParameter['teaching_class.id[]'] = teachingClassId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user.id'] = userId;
            }

            if (userId) {
                localVarQueryParameter['user.id[]'] = userId;
            }

            if (studentId !== undefined) {
                localVarQueryParameter['student.id'] = studentId;
            }

            if (studentId) {
                localVarQueryParameter['student.id[]'] = studentId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a StudentProfileUser resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentProfileUserItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getStudentProfileUserItem.');
            }
            const localVarPath = `/api/auth/v1/student-profile-user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudentProfileUserApi - functional programming interface
 * @export
 */
export const StudentProfileUserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Removes the StudentProfileUser resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudentProfileUserItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = StudentProfileUserApiFetchParamCreator(configuration).deleteStudentProfileUserItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves the collection of StudentProfileUser resources.
         * @param {number} [teachingClassId] 
         * @param {Array<number>} [teachingClassId] 
         * @param {number} [userId] 
         * @param {Array<number>} [userId] 
         * @param {number} [studentId] 
         * @param {Array<number>} [studentId] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentProfileUserCollection(teachingClassId?: number, teachingClassId?: Array<number>, userId?: number, userId?: Array<number>, studentId?: number, studentId?: Array<number>, page?: number, itemsPerPage?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20011> {
            const localVarFetchArgs = StudentProfileUserApiFetchParamCreator(configuration).getStudentProfileUserCollection(teachingClassId, teachingClassId, userId, userId, studentId, studentId, page, itemsPerPage, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves a StudentProfileUser resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentProfileUserItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<StudentProfileUserjsonldStudentProfileUserDetail> {
            const localVarFetchArgs = StudentProfileUserApiFetchParamCreator(configuration).getStudentProfileUserItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * StudentProfileUserApi - factory interface
 * @export
 */
export const StudentProfileUserApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Removes the StudentProfileUser resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStudentProfileUserItem(id: string, options?: any) {
            return StudentProfileUserApiFp(configuration).deleteStudentProfileUserItem(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves the collection of StudentProfileUser resources.
         * @param {number} [teachingClassId] 
         * @param {Array<number>} [teachingClassId] 
         * @param {number} [userId] 
         * @param {Array<number>} [userId] 
         * @param {number} [studentId] 
         * @param {Array<number>} [studentId] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentProfileUserCollection(teachingClassId?: number, teachingClassId?: Array<number>, userId?: number, userId?: Array<number>, studentId?: number, studentId?: Array<number>, page?: number, itemsPerPage?: number, options?: any) {
            return StudentProfileUserApiFp(configuration).getStudentProfileUserCollection(teachingClassId, teachingClassId, userId, userId, studentId, studentId, page, itemsPerPage, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves a StudentProfileUser resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentProfileUserItem(id: string, options?: any) {
            return StudentProfileUserApiFp(configuration).getStudentProfileUserItem(id, options)(fetch, basePath);
        },
    };
};

/**
 * StudentProfileUserApi - object-oriented interface
 * @export
 * @class StudentProfileUserApi
 * @extends {BaseAPI}
 */
export class StudentProfileUserApi extends BaseAPI {
    /**
     * 
     * @summary Removes the StudentProfileUser resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentProfileUserApi
     */
    public deleteStudentProfileUserItem(id: string, options?: any) {
        return StudentProfileUserApiFp(this.configuration).deleteStudentProfileUserItem(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves the collection of StudentProfileUser resources.
     * @param {number} [teachingClassId] 
     * @param {Array<number>} [teachingClassId] 
     * @param {number} [userId] 
     * @param {Array<number>} [userId] 
     * @param {number} [studentId] 
     * @param {Array<number>} [studentId] 
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentProfileUserApi
     */
    public getStudentProfileUserCollection(teachingClassId?: number, teachingClassId?: Array<number>, userId?: number, userId?: Array<number>, studentId?: number, studentId?: Array<number>, page?: number, itemsPerPage?: number, options?: any) {
        return StudentProfileUserApiFp(this.configuration).getStudentProfileUserCollection(teachingClassId, teachingClassId, userId, userId, studentId, studentId, page, itemsPerPage, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves a StudentProfileUser resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentProfileUserApi
     */
    public getStudentProfileUserItem(id: string, options?: any) {
        return StudentProfileUserApiFp(this.configuration).getStudentProfileUserItem(id, options)(this.fetch, this.basePath);
    }

}
/**
 * StudentProfileUserInvitationApi - fetch parameter creator
 * @export
 */
export const StudentProfileUserInvitationApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Allows user to send an invitation to manage a student in a teaching class with a given invitation code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1StudentProfileUserInvitationPost(options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/student-profile-user-invitation`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Accept Student Profile User Invitation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1StudentProfileUserInvitationStudentProfileUserInvitationIdAcceptPost(options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/student-profile-user-invitation/{studentProfileUserInvitationId}/accept`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reject Student Profile User Invitation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1StudentProfileUserInvitationStudentProfileUserInvitationIdRejectPost(options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/student-profile-user-invitation/{studentProfileUserInvitationId}/reject`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves the collection of StudentProfileUserInvitation resources.
         * @param {number} [teachingClassId] 
         * @param {Array<number>} [teachingClassId] 
         * @param {number} [studentId] 
         * @param {Array<number>} [studentId] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentProfileUserInvitationCollection(teachingClassId?: number, teachingClassId?: Array<number>, studentId?: number, studentId?: Array<number>, page?: number, itemsPerPage?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/student-profile-user-invitations`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (teachingClassId !== undefined) {
                localVarQueryParameter['teaching_class.id'] = teachingClassId;
            }

            if (teachingClassId) {
                localVarQueryParameter['teaching_class.id[]'] = teachingClassId;
            }

            if (studentId !== undefined) {
                localVarQueryParameter['student.id'] = studentId;
            }

            if (studentId) {
                localVarQueryParameter['student.id[]'] = studentId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a StudentProfileUserInvitation resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentProfileUserInvitationItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getStudentProfileUserInvitationItem.');
            }
            const localVarPath = `/api/auth/v1/student-profile-user-invitation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudentProfileUserInvitationApi - functional programming interface
 * @export
 */
export const StudentProfileUserInvitationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Allows user to send an invitation to manage a student in a teaching class with a given invitation code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1StudentProfileUserInvitationPost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = StudentProfileUserInvitationApiFetchParamCreator(configuration).apiAuthV1StudentProfileUserInvitationPost(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Accept Student Profile User Invitation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1StudentProfileUserInvitationStudentProfileUserInvitationIdAcceptPost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = StudentProfileUserInvitationApiFetchParamCreator(configuration).apiAuthV1StudentProfileUserInvitationStudentProfileUserInvitationIdAcceptPost(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Reject Student Profile User Invitation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1StudentProfileUserInvitationStudentProfileUserInvitationIdRejectPost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = StudentProfileUserInvitationApiFetchParamCreator(configuration).apiAuthV1StudentProfileUserInvitationStudentProfileUserInvitationIdRejectPost(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves the collection of StudentProfileUserInvitation resources.
         * @param {number} [teachingClassId] 
         * @param {Array<number>} [teachingClassId] 
         * @param {number} [studentId] 
         * @param {Array<number>} [studentId] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentProfileUserInvitationCollection(teachingClassId?: number, teachingClassId?: Array<number>, studentId?: number, studentId?: Array<number>, page?: number, itemsPerPage?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20010> {
            const localVarFetchArgs = StudentProfileUserInvitationApiFetchParamCreator(configuration).getStudentProfileUserInvitationCollection(teachingClassId, teachingClassId, studentId, studentId, page, itemsPerPage, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves a StudentProfileUserInvitation resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentProfileUserInvitationItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<StudentProfileUserInvitationjsonldStudentProfileUserInvitationDetail> {
            const localVarFetchArgs = StudentProfileUserInvitationApiFetchParamCreator(configuration).getStudentProfileUserInvitationItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * StudentProfileUserInvitationApi - factory interface
 * @export
 */
export const StudentProfileUserInvitationApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Allows user to send an invitation to manage a student in a teaching class with a given invitation code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1StudentProfileUserInvitationPost(options?: any) {
            return StudentProfileUserInvitationApiFp(configuration).apiAuthV1StudentProfileUserInvitationPost(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Accept Student Profile User Invitation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1StudentProfileUserInvitationStudentProfileUserInvitationIdAcceptPost(options?: any) {
            return StudentProfileUserInvitationApiFp(configuration).apiAuthV1StudentProfileUserInvitationStudentProfileUserInvitationIdAcceptPost(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Reject Student Profile User Invitation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1StudentProfileUserInvitationStudentProfileUserInvitationIdRejectPost(options?: any) {
            return StudentProfileUserInvitationApiFp(configuration).apiAuthV1StudentProfileUserInvitationStudentProfileUserInvitationIdRejectPost(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves the collection of StudentProfileUserInvitation resources.
         * @param {number} [teachingClassId] 
         * @param {Array<number>} [teachingClassId] 
         * @param {number} [studentId] 
         * @param {Array<number>} [studentId] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentProfileUserInvitationCollection(teachingClassId?: number, teachingClassId?: Array<number>, studentId?: number, studentId?: Array<number>, page?: number, itemsPerPage?: number, options?: any) {
            return StudentProfileUserInvitationApiFp(configuration).getStudentProfileUserInvitationCollection(teachingClassId, teachingClassId, studentId, studentId, page, itemsPerPage, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves a StudentProfileUserInvitation resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentProfileUserInvitationItem(id: string, options?: any) {
            return StudentProfileUserInvitationApiFp(configuration).getStudentProfileUserInvitationItem(id, options)(fetch, basePath);
        },
    };
};

/**
 * StudentProfileUserInvitationApi - object-oriented interface
 * @export
 * @class StudentProfileUserInvitationApi
 * @extends {BaseAPI}
 */
export class StudentProfileUserInvitationApi extends BaseAPI {
    /**
     * 
     * @summary Allows user to send an invitation to manage a student in a teaching class with a given invitation code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentProfileUserInvitationApi
     */
    public apiAuthV1StudentProfileUserInvitationPost(options?: any) {
        return StudentProfileUserInvitationApiFp(this.configuration).apiAuthV1StudentProfileUserInvitationPost(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Accept Student Profile User Invitation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentProfileUserInvitationApi
     */
    public apiAuthV1StudentProfileUserInvitationStudentProfileUserInvitationIdAcceptPost(options?: any) {
        return StudentProfileUserInvitationApiFp(this.configuration).apiAuthV1StudentProfileUserInvitationStudentProfileUserInvitationIdAcceptPost(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Reject Student Profile User Invitation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentProfileUserInvitationApi
     */
    public apiAuthV1StudentProfileUserInvitationStudentProfileUserInvitationIdRejectPost(options?: any) {
        return StudentProfileUserInvitationApiFp(this.configuration).apiAuthV1StudentProfileUserInvitationStudentProfileUserInvitationIdRejectPost(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves the collection of StudentProfileUserInvitation resources.
     * @param {number} [teachingClassId] 
     * @param {Array<number>} [teachingClassId] 
     * @param {number} [studentId] 
     * @param {Array<number>} [studentId] 
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentProfileUserInvitationApi
     */
    public getStudentProfileUserInvitationCollection(teachingClassId?: number, teachingClassId?: Array<number>, studentId?: number, studentId?: Array<number>, page?: number, itemsPerPage?: number, options?: any) {
        return StudentProfileUserInvitationApiFp(this.configuration).getStudentProfileUserInvitationCollection(teachingClassId, teachingClassId, studentId, studentId, page, itemsPerPage, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves a StudentProfileUserInvitation resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentProfileUserInvitationApi
     */
    public getStudentProfileUserInvitationItem(id: string, options?: any) {
        return StudentProfileUserInvitationApiFp(this.configuration).getStudentProfileUserInvitationItem(id, options)(this.fetch, this.basePath);
    }

}
/**
 * StudentUserApi - fetch parameter creator
 * @export
 */
export const StudentUserApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves the collection of StudentUser resources.
         * @param {number} [schoolId] 
         * @param {Array<number>} [schoolId] 
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentUserCollection(schoolId?: number, schoolId?: Array<number>, id?: number, id?: Array<number>, page?: number, itemsPerPage?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/student-users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (schoolId !== undefined) {
                localVarQueryParameter['school.id'] = schoolId;
            }

            if (schoolId) {
                localVarQueryParameter['school.id[]'] = schoolId;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (id) {
                localVarQueryParameter['id[]'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a StudentUser resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentUserItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getStudentUserItem.');
            }
            const localVarPath = `/api/auth/v1/student-user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StudentUserApi - functional programming interface
 * @export
 */
export const StudentUserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves the collection of StudentUser resources.
         * @param {number} [schoolId] 
         * @param {Array<number>} [schoolId] 
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentUserCollection(schoolId?: number, schoolId?: Array<number>, id?: number, id?: Array<number>, page?: number, itemsPerPage?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20012> {
            const localVarFetchArgs = StudentUserApiFetchParamCreator(configuration).getStudentUserCollection(schoolId, schoolId, id, id, page, itemsPerPage, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves a StudentUser resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentUserItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<StudentUserjsonldStudentUserDetail> {
            const localVarFetchArgs = StudentUserApiFetchParamCreator(configuration).getStudentUserItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * StudentUserApi - factory interface
 * @export
 */
export const StudentUserApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Retrieves the collection of StudentUser resources.
         * @param {number} [schoolId] 
         * @param {Array<number>} [schoolId] 
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentUserCollection(schoolId?: number, schoolId?: Array<number>, id?: number, id?: Array<number>, page?: number, itemsPerPage?: number, options?: any) {
            return StudentUserApiFp(configuration).getStudentUserCollection(schoolId, schoolId, id, id, page, itemsPerPage, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves a StudentUser resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStudentUserItem(id: string, options?: any) {
            return StudentUserApiFp(configuration).getStudentUserItem(id, options)(fetch, basePath);
        },
    };
};

/**
 * StudentUserApi - object-oriented interface
 * @export
 * @class StudentUserApi
 * @extends {BaseAPI}
 */
export class StudentUserApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves the collection of StudentUser resources.
     * @param {number} [schoolId] 
     * @param {Array<number>} [schoolId] 
     * @param {number} [id] 
     * @param {Array<number>} [id] 
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentUserApi
     */
    public getStudentUserCollection(schoolId?: number, schoolId?: Array<number>, id?: number, id?: Array<number>, page?: number, itemsPerPage?: number, options?: any) {
        return StudentUserApiFp(this.configuration).getStudentUserCollection(schoolId, schoolId, id, id, page, itemsPerPage, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves a StudentUser resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StudentUserApi
     */
    public getStudentUserItem(id: string, options?: any) {
        return StudentUserApiFp(this.configuration).getStudentUserItem(id, options)(this.fetch, this.basePath);
    }

}
/**
 * TeacherApi - fetch parameter creator
 * @export
 */
export const TeacherApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves the collection of Teacher resources.
         * @param {number} [schoolId] 
         * @param {Array<number>} [schoolId] 
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeacherCollection(schoolId?: number, schoolId?: Array<number>, id?: number, id?: Array<number>, page?: number, itemsPerPage?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/teachers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (schoolId !== undefined) {
                localVarQueryParameter['school.id'] = schoolId;
            }

            if (schoolId) {
                localVarQueryParameter['school.id[]'] = schoolId;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (id) {
                localVarQueryParameter['id[]'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a Teacher resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeacherItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getTeacherItem.');
            }
            const localVarPath = `/api/auth/v1/teacher/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeacherApi - functional programming interface
 * @export
 */
export const TeacherApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves the collection of Teacher resources.
         * @param {number} [schoolId] 
         * @param {Array<number>} [schoolId] 
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeacherCollection(schoolId?: number, schoolId?: Array<number>, id?: number, id?: Array<number>, page?: number, itemsPerPage?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20014> {
            const localVarFetchArgs = TeacherApiFetchParamCreator(configuration).getTeacherCollection(schoolId, schoolId, id, id, page, itemsPerPage, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves a Teacher resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeacherItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TeacherjsonldTeacherDetail> {
            const localVarFetchArgs = TeacherApiFetchParamCreator(configuration).getTeacherItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TeacherApi - factory interface
 * @export
 */
export const TeacherApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Retrieves the collection of Teacher resources.
         * @param {number} [schoolId] 
         * @param {Array<number>} [schoolId] 
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeacherCollection(schoolId?: number, schoolId?: Array<number>, id?: number, id?: Array<number>, page?: number, itemsPerPage?: number, options?: any) {
            return TeacherApiFp(configuration).getTeacherCollection(schoolId, schoolId, id, id, page, itemsPerPage, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves a Teacher resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeacherItem(id: string, options?: any) {
            return TeacherApiFp(configuration).getTeacherItem(id, options)(fetch, basePath);
        },
    };
};

/**
 * TeacherApi - object-oriented interface
 * @export
 * @class TeacherApi
 * @extends {BaseAPI}
 */
export class TeacherApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves the collection of Teacher resources.
     * @param {number} [schoolId] 
     * @param {Array<number>} [schoolId] 
     * @param {number} [id] 
     * @param {Array<number>} [id] 
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public getTeacherCollection(schoolId?: number, schoolId?: Array<number>, id?: number, id?: Array<number>, page?: number, itemsPerPage?: number, options?: any) {
        return TeacherApiFp(this.configuration).getTeacherCollection(schoolId, schoolId, id, id, page, itemsPerPage, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves a Teacher resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeacherApi
     */
    public getTeacherItem(id: string, options?: any) {
        return TeacherApiFp(this.configuration).getTeacherItem(id, options)(this.fetch, this.basePath);
    }

}
/**
 * TeachingClassApi - fetch parameter creator
 * @export
 */
export const TeachingClassApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves a TeachingClass resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLearningSkillsTeachingClassItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getLearningSkillsTeachingClassItem.');
            }
            const localVarPath = `/api/auth/v1/teaching-class/{id}/learning-skills`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves the collection of TeachingClass resources.
         * @param {boolean} [isFinished] 
         * @param {Array<boolean>} [isFinished] 
         * @param {string} [invitationCode] 
         * @param {Array<string>} [invitationCode] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {boolean} [excludeCoteacherTeachingClasses] Whether to include teaching classes where the user is a coteacher.
         * @param {boolean} [excludeEvaluatorTeachingClasses] Whether to include teaching classes where the user has evaluator access.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachingClassCollection(isFinished?: boolean, isFinished?: Array<boolean>, invitationCode?: string, invitationCode?: Array<string>, page?: number, itemsPerPage?: number, excludeCoteacherTeachingClasses?: boolean, excludeEvaluatorTeachingClasses?: boolean, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/teaching-classes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (isFinished !== undefined) {
                localVarQueryParameter['is_finished'] = isFinished;
            }

            if (isFinished) {
                localVarQueryParameter['is_finished[]'] = isFinished;
            }

            if (invitationCode !== undefined) {
                localVarQueryParameter['invitation_code'] = invitationCode;
            }

            if (invitationCode) {
                localVarQueryParameter['invitation_code[]'] = invitationCode;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            if (excludeCoteacherTeachingClasses !== undefined) {
                localVarQueryParameter['excludeCoteacherTeachingClasses'] = excludeCoteacherTeachingClasses;
            }

            if (excludeEvaluatorTeachingClasses !== undefined) {
                localVarQueryParameter['excludeEvaluatorTeachingClasses'] = excludeEvaluatorTeachingClasses;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a TeachingClass resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachingClassItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getTeachingClassItem.');
            }
            const localVarPath = `/api/auth/v1/teaching-class/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates the TeachingClass resource.
         * @param {string} id 
         * @param {TeachingClassjsonldTeachingClassWrite} [body] The updated TeachingClass resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTeachingClassItem(id: string, body?: TeachingClassjsonldTeachingClassWrite, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling patchTeachingClassItem.');
            }
            const localVarPath = `/api/auth/v1/teaching-class/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"TeachingClassTeachingClassWrite" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a TeachingClass resource.
         * @param {TeachingClassjsonldTeachingClassWrite} [body] The new TeachingClass resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeachingClassCollection(body?: TeachingClassjsonldTeachingClassWrite, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/teaching-class`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"TeachingClassTeachingClassWrite" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Replaces the TeachingClass resource.
         * @param {string} id 
         * @param {TeachingClassjsonldTeachingClassWrite} [body] The updated TeachingClass resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTeachingClassItem(id: string, body?: TeachingClassjsonldTeachingClassWrite, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putTeachingClassItem.');
            }
            const localVarPath = `/api/auth/v1/teaching-class/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"TeachingClassTeachingClassWrite" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeachingClassApi - functional programming interface
 * @export
 */
export const TeachingClassApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves a TeachingClass resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLearningSkillsTeachingClassItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TeachingClassjsonldLearningSkillList> {
            const localVarFetchArgs = TeachingClassApiFetchParamCreator(configuration).getLearningSkillsTeachingClassItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves the collection of TeachingClass resources.
         * @param {boolean} [isFinished] 
         * @param {Array<boolean>} [isFinished] 
         * @param {string} [invitationCode] 
         * @param {Array<string>} [invitationCode] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {boolean} [excludeCoteacherTeachingClasses] Whether to include teaching classes where the user is a coteacher.
         * @param {boolean} [excludeEvaluatorTeachingClasses] Whether to include teaching classes where the user has evaluator access.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachingClassCollection(isFinished?: boolean, isFinished?: Array<boolean>, invitationCode?: string, invitationCode?: Array<string>, page?: number, itemsPerPage?: number, excludeCoteacherTeachingClasses?: boolean, excludeEvaluatorTeachingClasses?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20019> {
            const localVarFetchArgs = TeachingClassApiFetchParamCreator(configuration).getTeachingClassCollection(isFinished, isFinished, invitationCode, invitationCode, page, itemsPerPage, excludeCoteacherTeachingClasses, excludeEvaluatorTeachingClasses, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves a TeachingClass resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachingClassItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TeachingClassjsonldTeachingClassDetail> {
            const localVarFetchArgs = TeachingClassApiFetchParamCreator(configuration).getTeachingClassItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates the TeachingClass resource.
         * @param {string} id 
         * @param {TeachingClassjsonldTeachingClassWrite} [body] The updated TeachingClass resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTeachingClassItem(id: string, body?: TeachingClassjsonldTeachingClassWrite, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TeachingClassjsonldTeachingClassDetail> {
            const localVarFetchArgs = TeachingClassApiFetchParamCreator(configuration).patchTeachingClassItem(id, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Creates a TeachingClass resource.
         * @param {TeachingClassjsonldTeachingClassWrite} [body] The new TeachingClass resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeachingClassCollection(body?: TeachingClassjsonldTeachingClassWrite, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TeachingClassjsonldTeachingClassDetail> {
            const localVarFetchArgs = TeachingClassApiFetchParamCreator(configuration).postTeachingClassCollection(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Replaces the TeachingClass resource.
         * @param {string} id 
         * @param {TeachingClassjsonldTeachingClassWrite} [body] The updated TeachingClass resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTeachingClassItem(id: string, body?: TeachingClassjsonldTeachingClassWrite, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TeachingClassjsonldTeachingClassDetail> {
            const localVarFetchArgs = TeachingClassApiFetchParamCreator(configuration).putTeachingClassItem(id, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TeachingClassApi - factory interface
 * @export
 */
export const TeachingClassApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Retrieves a TeachingClass resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLearningSkillsTeachingClassItem(id: string, options?: any) {
            return TeachingClassApiFp(configuration).getLearningSkillsTeachingClassItem(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves the collection of TeachingClass resources.
         * @param {boolean} [isFinished] 
         * @param {Array<boolean>} [isFinished] 
         * @param {string} [invitationCode] 
         * @param {Array<string>} [invitationCode] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {boolean} [excludeCoteacherTeachingClasses] Whether to include teaching classes where the user is a coteacher.
         * @param {boolean} [excludeEvaluatorTeachingClasses] Whether to include teaching classes where the user has evaluator access.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachingClassCollection(isFinished?: boolean, isFinished?: Array<boolean>, invitationCode?: string, invitationCode?: Array<string>, page?: number, itemsPerPage?: number, excludeCoteacherTeachingClasses?: boolean, excludeEvaluatorTeachingClasses?: boolean, options?: any) {
            return TeachingClassApiFp(configuration).getTeachingClassCollection(isFinished, isFinished, invitationCode, invitationCode, page, itemsPerPage, excludeCoteacherTeachingClasses, excludeEvaluatorTeachingClasses, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves a TeachingClass resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachingClassItem(id: string, options?: any) {
            return TeachingClassApiFp(configuration).getTeachingClassItem(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates the TeachingClass resource.
         * @param {string} id 
         * @param {TeachingClassjsonldTeachingClassWrite} [body] The updated TeachingClass resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTeachingClassItem(id: string, body?: TeachingClassjsonldTeachingClassWrite, options?: any) {
            return TeachingClassApiFp(configuration).patchTeachingClassItem(id, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Creates a TeachingClass resource.
         * @param {TeachingClassjsonldTeachingClassWrite} [body] The new TeachingClass resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeachingClassCollection(body?: TeachingClassjsonldTeachingClassWrite, options?: any) {
            return TeachingClassApiFp(configuration).postTeachingClassCollection(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Replaces the TeachingClass resource.
         * @param {string} id 
         * @param {TeachingClassjsonldTeachingClassWrite} [body] The updated TeachingClass resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTeachingClassItem(id: string, body?: TeachingClassjsonldTeachingClassWrite, options?: any) {
            return TeachingClassApiFp(configuration).putTeachingClassItem(id, body, options)(fetch, basePath);
        },
    };
};

/**
 * TeachingClassApi - object-oriented interface
 * @export
 * @class TeachingClassApi
 * @extends {BaseAPI}
 */
export class TeachingClassApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves a TeachingClass resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingClassApi
     */
    public getLearningSkillsTeachingClassItem(id: string, options?: any) {
        return TeachingClassApiFp(this.configuration).getLearningSkillsTeachingClassItem(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves the collection of TeachingClass resources.
     * @param {boolean} [isFinished] 
     * @param {Array<boolean>} [isFinished] 
     * @param {string} [invitationCode] 
     * @param {Array<string>} [invitationCode] 
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {boolean} [excludeCoteacherTeachingClasses] Whether to include teaching classes where the user is a coteacher.
     * @param {boolean} [excludeEvaluatorTeachingClasses] Whether to include teaching classes where the user has evaluator access.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingClassApi
     */
    public getTeachingClassCollection(isFinished?: boolean, isFinished?: Array<boolean>, invitationCode?: string, invitationCode?: Array<string>, page?: number, itemsPerPage?: number, excludeCoteacherTeachingClasses?: boolean, excludeEvaluatorTeachingClasses?: boolean, options?: any) {
        return TeachingClassApiFp(this.configuration).getTeachingClassCollection(isFinished, isFinished, invitationCode, invitationCode, page, itemsPerPage, excludeCoteacherTeachingClasses, excludeEvaluatorTeachingClasses, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves a TeachingClass resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingClassApi
     */
    public getTeachingClassItem(id: string, options?: any) {
        return TeachingClassApiFp(this.configuration).getTeachingClassItem(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates the TeachingClass resource.
     * @param {string} id 
     * @param {TeachingClassjsonldTeachingClassWrite} [body] The updated TeachingClass resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingClassApi
     */
    public patchTeachingClassItem(id: string, body?: TeachingClassjsonldTeachingClassWrite, options?: any) {
        return TeachingClassApiFp(this.configuration).patchTeachingClassItem(id, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Creates a TeachingClass resource.
     * @param {TeachingClassjsonldTeachingClassWrite} [body] The new TeachingClass resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingClassApi
     */
    public postTeachingClassCollection(body?: TeachingClassjsonldTeachingClassWrite, options?: any) {
        return TeachingClassApiFp(this.configuration).postTeachingClassCollection(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Replaces the TeachingClass resource.
     * @param {string} id 
     * @param {TeachingClassjsonldTeachingClassWrite} [body] The updated TeachingClass resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingClassApi
     */
    public putTeachingClassItem(id: string, body?: TeachingClassjsonldTeachingClassWrite, options?: any) {
        return TeachingClassApiFp(this.configuration).putTeachingClassItem(id, body, options)(this.fetch, this.basePath);
    }

}
/**
 * TeachingClassLearningSkillApi - fetch parameter creator
 * @export
 */
export const TeachingClassLearningSkillApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Removes the TeachingClassLearningSkill resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeachingClassLearningSkillItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteTeachingClassLearningSkillItem.');
            }
            const localVarPath = `/api/auth/v1/teaching-class-learning-skill/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves the collection of TeachingClassLearningSkill resources.
         * @param {number} [teachingClassId] 
         * @param {Array<number>} [teachingClassId] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachingClassLearningSkillCollection(teachingClassId?: number, teachingClassId?: Array<number>, page?: number, itemsPerPage?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/teaching-class-learning-skills`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (teachingClassId !== undefined) {
                localVarQueryParameter['teaching_class.id'] = teachingClassId;
            }

            if (teachingClassId) {
                localVarQueryParameter['teaching_class.id[]'] = teachingClassId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a TeachingClassLearningSkill resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachingClassLearningSkillItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getTeachingClassLearningSkillItem.');
            }
            const localVarPath = `/api/auth/v1/teaching-class-learning-skill/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a TeachingClassLearningSkill resource.
         * @param {TeachingClassLearningSkilljsonldTeachingClassLearningSkillWrite} [body] The new TeachingClassLearningSkill resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeachingClassLearningSkillCollection(body?: TeachingClassLearningSkilljsonldTeachingClassLearningSkillWrite, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/teaching-class-learning-skill`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"TeachingClassLearningSkillTeachingClassLearningSkillWrite" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeachingClassLearningSkillApi - functional programming interface
 * @export
 */
export const TeachingClassLearningSkillApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Removes the TeachingClassLearningSkill resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeachingClassLearningSkillItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TeachingClassLearningSkillApiFetchParamCreator(configuration).deleteTeachingClassLearningSkillItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves the collection of TeachingClassLearningSkill resources.
         * @param {number} [teachingClassId] 
         * @param {Array<number>} [teachingClassId] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachingClassLearningSkillCollection(teachingClassId?: number, teachingClassId?: Array<number>, page?: number, itemsPerPage?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20015> {
            const localVarFetchArgs = TeachingClassLearningSkillApiFetchParamCreator(configuration).getTeachingClassLearningSkillCollection(teachingClassId, teachingClassId, page, itemsPerPage, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves a TeachingClassLearningSkill resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachingClassLearningSkillItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TeachingClassLearningSkilljsonldTeachingClassLearningSkillDetail> {
            const localVarFetchArgs = TeachingClassLearningSkillApiFetchParamCreator(configuration).getTeachingClassLearningSkillItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Creates a TeachingClassLearningSkill resource.
         * @param {TeachingClassLearningSkilljsonldTeachingClassLearningSkillWrite} [body] The new TeachingClassLearningSkill resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeachingClassLearningSkillCollection(body?: TeachingClassLearningSkilljsonldTeachingClassLearningSkillWrite, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TeachingClassLearningSkilljsonldTeachingClassLearningSkillDetail> {
            const localVarFetchArgs = TeachingClassLearningSkillApiFetchParamCreator(configuration).postTeachingClassLearningSkillCollection(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TeachingClassLearningSkillApi - factory interface
 * @export
 */
export const TeachingClassLearningSkillApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Removes the TeachingClassLearningSkill resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeachingClassLearningSkillItem(id: string, options?: any) {
            return TeachingClassLearningSkillApiFp(configuration).deleteTeachingClassLearningSkillItem(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves the collection of TeachingClassLearningSkill resources.
         * @param {number} [teachingClassId] 
         * @param {Array<number>} [teachingClassId] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachingClassLearningSkillCollection(teachingClassId?: number, teachingClassId?: Array<number>, page?: number, itemsPerPage?: number, options?: any) {
            return TeachingClassLearningSkillApiFp(configuration).getTeachingClassLearningSkillCollection(teachingClassId, teachingClassId, page, itemsPerPage, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves a TeachingClassLearningSkill resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachingClassLearningSkillItem(id: string, options?: any) {
            return TeachingClassLearningSkillApiFp(configuration).getTeachingClassLearningSkillItem(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Creates a TeachingClassLearningSkill resource.
         * @param {TeachingClassLearningSkilljsonldTeachingClassLearningSkillWrite} [body] The new TeachingClassLearningSkill resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeachingClassLearningSkillCollection(body?: TeachingClassLearningSkilljsonldTeachingClassLearningSkillWrite, options?: any) {
            return TeachingClassLearningSkillApiFp(configuration).postTeachingClassLearningSkillCollection(body, options)(fetch, basePath);
        },
    };
};

/**
 * TeachingClassLearningSkillApi - object-oriented interface
 * @export
 * @class TeachingClassLearningSkillApi
 * @extends {BaseAPI}
 */
export class TeachingClassLearningSkillApi extends BaseAPI {
    /**
     * 
     * @summary Removes the TeachingClassLearningSkill resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingClassLearningSkillApi
     */
    public deleteTeachingClassLearningSkillItem(id: string, options?: any) {
        return TeachingClassLearningSkillApiFp(this.configuration).deleteTeachingClassLearningSkillItem(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves the collection of TeachingClassLearningSkill resources.
     * @param {number} [teachingClassId] 
     * @param {Array<number>} [teachingClassId] 
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingClassLearningSkillApi
     */
    public getTeachingClassLearningSkillCollection(teachingClassId?: number, teachingClassId?: Array<number>, page?: number, itemsPerPage?: number, options?: any) {
        return TeachingClassLearningSkillApiFp(this.configuration).getTeachingClassLearningSkillCollection(teachingClassId, teachingClassId, page, itemsPerPage, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves a TeachingClassLearningSkill resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingClassLearningSkillApi
     */
    public getTeachingClassLearningSkillItem(id: string, options?: any) {
        return TeachingClassLearningSkillApiFp(this.configuration).getTeachingClassLearningSkillItem(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Creates a TeachingClassLearningSkill resource.
     * @param {TeachingClassLearningSkilljsonldTeachingClassLearningSkillWrite} [body] The new TeachingClassLearningSkill resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingClassLearningSkillApi
     */
    public postTeachingClassLearningSkillCollection(body?: TeachingClassLearningSkilljsonldTeachingClassLearningSkillWrite, options?: any) {
        return TeachingClassLearningSkillApiFp(this.configuration).postTeachingClassLearningSkillCollection(body, options)(this.fetch, this.basePath);
    }

}
/**
 * TeachingClassStudentApi - fetch parameter creator
 * @export
 */
export const TeachingClassStudentApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Allows user to copy existing students to a specified teaching class.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1TeachingClassStudentCopyPost(options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/teaching-class-student/copy`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Removes the TeachingClassStudent resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeachingClassStudentItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteTeachingClassStudentItem.');
            }
            const localVarPath = `/api/auth/v1/teaching-class-student/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves the collection of TeachingClassStudent resources.
         * @param {number} [teachingClassId] 
         * @param {Array<number>} [teachingClassId] 
         * @param {number} [studentId] 
         * @param {Array<number>} [studentId] 
         * @param {string} [invitationCode] 
         * @param {Array<string>} [invitationCode] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachingClassStudentCollection(teachingClassId?: number, teachingClassId?: Array<number>, studentId?: number, studentId?: Array<number>, invitationCode?: string, invitationCode?: Array<string>, page?: number, itemsPerPage?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/teaching-class-students`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (teachingClassId !== undefined) {
                localVarQueryParameter['teaching_class.id'] = teachingClassId;
            }

            if (teachingClassId) {
                localVarQueryParameter['teaching_class.id[]'] = teachingClassId;
            }

            if (studentId !== undefined) {
                localVarQueryParameter['student.id'] = studentId;
            }

            if (studentId) {
                localVarQueryParameter['student.id[]'] = studentId;
            }

            if (invitationCode !== undefined) {
                localVarQueryParameter['invitation_code'] = invitationCode;
            }

            if (invitationCode) {
                localVarQueryParameter['invitation_code[]'] = invitationCode;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a TeachingClassStudent resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachingClassStudentItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getTeachingClassStudentItem.');
            }
            const localVarPath = `/api/auth/v1/teaching-class-student/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates the TeachingClassStudent resource.
         * @param {string} id 
         * @param {TeachingClassStudentjsonldTeachingClassStudentWrite} [body] The updated TeachingClassStudent resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTeachingClassStudentItem(id: string, body?: TeachingClassStudentjsonldTeachingClassStudentWrite, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling patchTeachingClassStudentItem.');
            }
            const localVarPath = `/api/auth/v1/teaching-class-student/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"TeachingClassStudentTeachingClassStudentWrite" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a TeachingClassStudent resource.
         * @param {TeachingClassStudentjsonldTeachingClassStudentWrite} [body] The new TeachingClassStudent resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeachingClassStudentCollection(body?: TeachingClassStudentjsonldTeachingClassStudentWrite, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/teaching-class-student`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"TeachingClassStudentTeachingClassStudentWrite" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Replaces the TeachingClassStudent resource.
         * @param {string} id 
         * @param {TeachingClassStudentjsonldTeachingClassStudentWrite} [body] The updated TeachingClassStudent resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTeachingClassStudentItem(id: string, body?: TeachingClassStudentjsonldTeachingClassStudentWrite, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putTeachingClassStudentItem.');
            }
            const localVarPath = `/api/auth/v1/teaching-class-student/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"TeachingClassStudentTeachingClassStudentWrite" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeachingClassStudentApi - functional programming interface
 * @export
 */
export const TeachingClassStudentApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Allows user to copy existing students to a specified teaching class.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1TeachingClassStudentCopyPost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TeachingClassStudentApiFetchParamCreator(configuration).apiAuthV1TeachingClassStudentCopyPost(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Removes the TeachingClassStudent resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeachingClassStudentItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TeachingClassStudentApiFetchParamCreator(configuration).deleteTeachingClassStudentItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves the collection of TeachingClassStudent resources.
         * @param {number} [teachingClassId] 
         * @param {Array<number>} [teachingClassId] 
         * @param {number} [studentId] 
         * @param {Array<number>} [studentId] 
         * @param {string} [invitationCode] 
         * @param {Array<string>} [invitationCode] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachingClassStudentCollection(teachingClassId?: number, teachingClassId?: Array<number>, studentId?: number, studentId?: Array<number>, invitationCode?: string, invitationCode?: Array<string>, page?: number, itemsPerPage?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20016> {
            const localVarFetchArgs = TeachingClassStudentApiFetchParamCreator(configuration).getTeachingClassStudentCollection(teachingClassId, teachingClassId, studentId, studentId, invitationCode, invitationCode, page, itemsPerPage, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves a TeachingClassStudent resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachingClassStudentItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TeachingClassStudentjsonldTeachingClassStudentDetail> {
            const localVarFetchArgs = TeachingClassStudentApiFetchParamCreator(configuration).getTeachingClassStudentItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates the TeachingClassStudent resource.
         * @param {string} id 
         * @param {TeachingClassStudentjsonldTeachingClassStudentWrite} [body] The updated TeachingClassStudent resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTeachingClassStudentItem(id: string, body?: TeachingClassStudentjsonldTeachingClassStudentWrite, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TeachingClassStudentjsonldTeachingClassStudentDetail> {
            const localVarFetchArgs = TeachingClassStudentApiFetchParamCreator(configuration).patchTeachingClassStudentItem(id, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Creates a TeachingClassStudent resource.
         * @param {TeachingClassStudentjsonldTeachingClassStudentWrite} [body] The new TeachingClassStudent resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeachingClassStudentCollection(body?: TeachingClassStudentjsonldTeachingClassStudentWrite, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TeachingClassStudentjsonldTeachingClassStudentDetail> {
            const localVarFetchArgs = TeachingClassStudentApiFetchParamCreator(configuration).postTeachingClassStudentCollection(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Replaces the TeachingClassStudent resource.
         * @param {string} id 
         * @param {TeachingClassStudentjsonldTeachingClassStudentWrite} [body] The updated TeachingClassStudent resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTeachingClassStudentItem(id: string, body?: TeachingClassStudentjsonldTeachingClassStudentWrite, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TeachingClassStudentjsonldTeachingClassStudentDetail> {
            const localVarFetchArgs = TeachingClassStudentApiFetchParamCreator(configuration).putTeachingClassStudentItem(id, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TeachingClassStudentApi - factory interface
 * @export
 */
export const TeachingClassStudentApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Allows user to copy existing students to a specified teaching class.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1TeachingClassStudentCopyPost(options?: any) {
            return TeachingClassStudentApiFp(configuration).apiAuthV1TeachingClassStudentCopyPost(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Removes the TeachingClassStudent resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeachingClassStudentItem(id: string, options?: any) {
            return TeachingClassStudentApiFp(configuration).deleteTeachingClassStudentItem(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves the collection of TeachingClassStudent resources.
         * @param {number} [teachingClassId] 
         * @param {Array<number>} [teachingClassId] 
         * @param {number} [studentId] 
         * @param {Array<number>} [studentId] 
         * @param {string} [invitationCode] 
         * @param {Array<string>} [invitationCode] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachingClassStudentCollection(teachingClassId?: number, teachingClassId?: Array<number>, studentId?: number, studentId?: Array<number>, invitationCode?: string, invitationCode?: Array<string>, page?: number, itemsPerPage?: number, options?: any) {
            return TeachingClassStudentApiFp(configuration).getTeachingClassStudentCollection(teachingClassId, teachingClassId, studentId, studentId, invitationCode, invitationCode, page, itemsPerPage, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves a TeachingClassStudent resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachingClassStudentItem(id: string, options?: any) {
            return TeachingClassStudentApiFp(configuration).getTeachingClassStudentItem(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates the TeachingClassStudent resource.
         * @param {string} id 
         * @param {TeachingClassStudentjsonldTeachingClassStudentWrite} [body] The updated TeachingClassStudent resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTeachingClassStudentItem(id: string, body?: TeachingClassStudentjsonldTeachingClassStudentWrite, options?: any) {
            return TeachingClassStudentApiFp(configuration).patchTeachingClassStudentItem(id, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Creates a TeachingClassStudent resource.
         * @param {TeachingClassStudentjsonldTeachingClassStudentWrite} [body] The new TeachingClassStudent resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTeachingClassStudentCollection(body?: TeachingClassStudentjsonldTeachingClassStudentWrite, options?: any) {
            return TeachingClassStudentApiFp(configuration).postTeachingClassStudentCollection(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Replaces the TeachingClassStudent resource.
         * @param {string} id 
         * @param {TeachingClassStudentjsonldTeachingClassStudentWrite} [body] The updated TeachingClassStudent resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTeachingClassStudentItem(id: string, body?: TeachingClassStudentjsonldTeachingClassStudentWrite, options?: any) {
            return TeachingClassStudentApiFp(configuration).putTeachingClassStudentItem(id, body, options)(fetch, basePath);
        },
    };
};

/**
 * TeachingClassStudentApi - object-oriented interface
 * @export
 * @class TeachingClassStudentApi
 * @extends {BaseAPI}
 */
export class TeachingClassStudentApi extends BaseAPI {
    /**
     * 
     * @summary Allows user to copy existing students to a specified teaching class.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingClassStudentApi
     */
    public apiAuthV1TeachingClassStudentCopyPost(options?: any) {
        return TeachingClassStudentApiFp(this.configuration).apiAuthV1TeachingClassStudentCopyPost(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Removes the TeachingClassStudent resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingClassStudentApi
     */
    public deleteTeachingClassStudentItem(id: string, options?: any) {
        return TeachingClassStudentApiFp(this.configuration).deleteTeachingClassStudentItem(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves the collection of TeachingClassStudent resources.
     * @param {number} [teachingClassId] 
     * @param {Array<number>} [teachingClassId] 
     * @param {number} [studentId] 
     * @param {Array<number>} [studentId] 
     * @param {string} [invitationCode] 
     * @param {Array<string>} [invitationCode] 
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingClassStudentApi
     */
    public getTeachingClassStudentCollection(teachingClassId?: number, teachingClassId?: Array<number>, studentId?: number, studentId?: Array<number>, invitationCode?: string, invitationCode?: Array<string>, page?: number, itemsPerPage?: number, options?: any) {
        return TeachingClassStudentApiFp(this.configuration).getTeachingClassStudentCollection(teachingClassId, teachingClassId, studentId, studentId, invitationCode, invitationCode, page, itemsPerPage, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves a TeachingClassStudent resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingClassStudentApi
     */
    public getTeachingClassStudentItem(id: string, options?: any) {
        return TeachingClassStudentApiFp(this.configuration).getTeachingClassStudentItem(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates the TeachingClassStudent resource.
     * @param {string} id 
     * @param {TeachingClassStudentjsonldTeachingClassStudentWrite} [body] The updated TeachingClassStudent resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingClassStudentApi
     */
    public patchTeachingClassStudentItem(id: string, body?: TeachingClassStudentjsonldTeachingClassStudentWrite, options?: any) {
        return TeachingClassStudentApiFp(this.configuration).patchTeachingClassStudentItem(id, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Creates a TeachingClassStudent resource.
     * @param {TeachingClassStudentjsonldTeachingClassStudentWrite} [body] The new TeachingClassStudent resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingClassStudentApi
     */
    public postTeachingClassStudentCollection(body?: TeachingClassStudentjsonldTeachingClassStudentWrite, options?: any) {
        return TeachingClassStudentApiFp(this.configuration).postTeachingClassStudentCollection(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Replaces the TeachingClassStudent resource.
     * @param {string} id 
     * @param {TeachingClassStudentjsonldTeachingClassStudentWrite} [body] The updated TeachingClassStudent resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingClassStudentApi
     */
    public putTeachingClassStudentItem(id: string, body?: TeachingClassStudentjsonldTeachingClassStudentWrite, options?: any) {
        return TeachingClassStudentApiFp(this.configuration).putTeachingClassStudentItem(id, body, options)(this.fetch, this.basePath);
    }

}
/**
 * TeachingClassTeacherApi - fetch parameter creator
 * @export
 */
export const TeachingClassTeacherApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Removes the TeachingClassTeacher resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeachingClassTeacherItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteTeachingClassTeacherItem.');
            }
            const localVarPath = `/api/auth/v1/teaching-class-teacher/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves the collection of TeachingClassTeacher resources.
         * @param {number} [teachingClassId] 
         * @param {Array<number>} [teachingClassId] 
         * @param {number} [teacherId] 
         * @param {Array<number>} [teacherId] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachingClassTeacherCollection(teachingClassId?: number, teachingClassId?: Array<number>, teacherId?: number, teacherId?: Array<number>, page?: number, itemsPerPage?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/teaching-class-teachers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (teachingClassId !== undefined) {
                localVarQueryParameter['teaching_class.id'] = teachingClassId;
            }

            if (teachingClassId) {
                localVarQueryParameter['teaching_class.id[]'] = teachingClassId;
            }

            if (teacherId !== undefined) {
                localVarQueryParameter['teacher.id'] = teacherId;
            }

            if (teacherId) {
                localVarQueryParameter['teacher.id[]'] = teacherId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a TeachingClassTeacher resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachingClassTeacherItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getTeachingClassTeacherItem.');
            }
            const localVarPath = `/api/auth/v1/teaching-class-teacher/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeachingClassTeacherApi - functional programming interface
 * @export
 */
export const TeachingClassTeacherApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Removes the TeachingClassTeacher resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeachingClassTeacherItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TeachingClassTeacherApiFetchParamCreator(configuration).deleteTeachingClassTeacherItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves the collection of TeachingClassTeacher resources.
         * @param {number} [teachingClassId] 
         * @param {Array<number>} [teachingClassId] 
         * @param {number} [teacherId] 
         * @param {Array<number>} [teacherId] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachingClassTeacherCollection(teachingClassId?: number, teachingClassId?: Array<number>, teacherId?: number, teacherId?: Array<number>, page?: number, itemsPerPage?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20018> {
            const localVarFetchArgs = TeachingClassTeacherApiFetchParamCreator(configuration).getTeachingClassTeacherCollection(teachingClassId, teachingClassId, teacherId, teacherId, page, itemsPerPage, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves a TeachingClassTeacher resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachingClassTeacherItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TeachingClassTeacherjsonldTeachingClassTeacherDetail> {
            const localVarFetchArgs = TeachingClassTeacherApiFetchParamCreator(configuration).getTeachingClassTeacherItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TeachingClassTeacherApi - factory interface
 * @export
 */
export const TeachingClassTeacherApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Removes the TeachingClassTeacher resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTeachingClassTeacherItem(id: string, options?: any) {
            return TeachingClassTeacherApiFp(configuration).deleteTeachingClassTeacherItem(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves the collection of TeachingClassTeacher resources.
         * @param {number} [teachingClassId] 
         * @param {Array<number>} [teachingClassId] 
         * @param {number} [teacherId] 
         * @param {Array<number>} [teacherId] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachingClassTeacherCollection(teachingClassId?: number, teachingClassId?: Array<number>, teacherId?: number, teacherId?: Array<number>, page?: number, itemsPerPage?: number, options?: any) {
            return TeachingClassTeacherApiFp(configuration).getTeachingClassTeacherCollection(teachingClassId, teachingClassId, teacherId, teacherId, page, itemsPerPage, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves a TeachingClassTeacher resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachingClassTeacherItem(id: string, options?: any) {
            return TeachingClassTeacherApiFp(configuration).getTeachingClassTeacherItem(id, options)(fetch, basePath);
        },
    };
};

/**
 * TeachingClassTeacherApi - object-oriented interface
 * @export
 * @class TeachingClassTeacherApi
 * @extends {BaseAPI}
 */
export class TeachingClassTeacherApi extends BaseAPI {
    /**
     * 
     * @summary Removes the TeachingClassTeacher resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingClassTeacherApi
     */
    public deleteTeachingClassTeacherItem(id: string, options?: any) {
        return TeachingClassTeacherApiFp(this.configuration).deleteTeachingClassTeacherItem(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves the collection of TeachingClassTeacher resources.
     * @param {number} [teachingClassId] 
     * @param {Array<number>} [teachingClassId] 
     * @param {number} [teacherId] 
     * @param {Array<number>} [teacherId] 
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingClassTeacherApi
     */
    public getTeachingClassTeacherCollection(teachingClassId?: number, teachingClassId?: Array<number>, teacherId?: number, teacherId?: Array<number>, page?: number, itemsPerPage?: number, options?: any) {
        return TeachingClassTeacherApiFp(this.configuration).getTeachingClassTeacherCollection(teachingClassId, teachingClassId, teacherId, teacherId, page, itemsPerPage, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves a TeachingClassTeacher resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingClassTeacherApi
     */
    public getTeachingClassTeacherItem(id: string, options?: any) {
        return TeachingClassTeacherApiFp(this.configuration).getTeachingClassTeacherItem(id, options)(this.fetch, this.basePath);
    }

}
/**
 * TeachingClassTeacherInvitationApi - fetch parameter creator
 * @export
 */
export const TeachingClassTeacherInvitationApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Allows user to send an invitation to a teaching class with a given invitation code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1TeachingClassTeacherInvitationPost(options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/teaching-class-teacher-invitation`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Accept Teaching Class Teacher Invitation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1TeachingClassTeacherInvitationTeachingClassTeacherInvitationIdAcceptPost(options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/teaching-class-teacher-invitation/{teachingClassTeacherInvitationId}/accept`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reject Teaching Class Teacher Invitation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1TeachingClassTeacherInvitationTeachingClassTeacherInvitationIdRejectPost(options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/teaching-class-teacher-invitation/{teachingClassTeacherInvitationId}/reject`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves the collection of TeachingClassTeacherInvitation resources.
         * @param {number} [teachingClassId] 
         * @param {Array<number>} [teachingClassId] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachingClassTeacherInvitationCollection(teachingClassId?: number, teachingClassId?: Array<number>, page?: number, itemsPerPage?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/teaching-class-teacher-invitations`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (teachingClassId !== undefined) {
                localVarQueryParameter['teaching_class.id'] = teachingClassId;
            }

            if (teachingClassId) {
                localVarQueryParameter['teaching_class.id[]'] = teachingClassId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a TeachingClassTeacherInvitation resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachingClassTeacherInvitationItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getTeachingClassTeacherInvitationItem.');
            }
            const localVarPath = `/api/auth/v1/teaching-class-teacher-invitation/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeachingClassTeacherInvitationApi - functional programming interface
 * @export
 */
export const TeachingClassTeacherInvitationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Allows user to send an invitation to a teaching class with a given invitation code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1TeachingClassTeacherInvitationPost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TeachingClassTeacherInvitationApiFetchParamCreator(configuration).apiAuthV1TeachingClassTeacherInvitationPost(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Accept Teaching Class Teacher Invitation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1TeachingClassTeacherInvitationTeachingClassTeacherInvitationIdAcceptPost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TeachingClassTeacherInvitationApiFetchParamCreator(configuration).apiAuthV1TeachingClassTeacherInvitationTeachingClassTeacherInvitationIdAcceptPost(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Reject Teaching Class Teacher Invitation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1TeachingClassTeacherInvitationTeachingClassTeacherInvitationIdRejectPost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = TeachingClassTeacherInvitationApiFetchParamCreator(configuration).apiAuthV1TeachingClassTeacherInvitationTeachingClassTeacherInvitationIdRejectPost(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves the collection of TeachingClassTeacherInvitation resources.
         * @param {number} [teachingClassId] 
         * @param {Array<number>} [teachingClassId] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachingClassTeacherInvitationCollection(teachingClassId?: number, teachingClassId?: Array<number>, page?: number, itemsPerPage?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20017> {
            const localVarFetchArgs = TeachingClassTeacherInvitationApiFetchParamCreator(configuration).getTeachingClassTeacherInvitationCollection(teachingClassId, teachingClassId, page, itemsPerPage, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves a TeachingClassTeacherInvitation resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachingClassTeacherInvitationItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<TeachingClassTeacherInvitationjsonldTeachingClassTeacherInvitationDetail> {
            const localVarFetchArgs = TeachingClassTeacherInvitationApiFetchParamCreator(configuration).getTeachingClassTeacherInvitationItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TeachingClassTeacherInvitationApi - factory interface
 * @export
 */
export const TeachingClassTeacherInvitationApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Allows user to send an invitation to a teaching class with a given invitation code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1TeachingClassTeacherInvitationPost(options?: any) {
            return TeachingClassTeacherInvitationApiFp(configuration).apiAuthV1TeachingClassTeacherInvitationPost(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Accept Teaching Class Teacher Invitation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1TeachingClassTeacherInvitationTeachingClassTeacherInvitationIdAcceptPost(options?: any) {
            return TeachingClassTeacherInvitationApiFp(configuration).apiAuthV1TeachingClassTeacherInvitationTeachingClassTeacherInvitationIdAcceptPost(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Reject Teaching Class Teacher Invitation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthV1TeachingClassTeacherInvitationTeachingClassTeacherInvitationIdRejectPost(options?: any) {
            return TeachingClassTeacherInvitationApiFp(configuration).apiAuthV1TeachingClassTeacherInvitationTeachingClassTeacherInvitationIdRejectPost(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves the collection of TeachingClassTeacherInvitation resources.
         * @param {number} [teachingClassId] 
         * @param {Array<number>} [teachingClassId] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachingClassTeacherInvitationCollection(teachingClassId?: number, teachingClassId?: Array<number>, page?: number, itemsPerPage?: number, options?: any) {
            return TeachingClassTeacherInvitationApiFp(configuration).getTeachingClassTeacherInvitationCollection(teachingClassId, teachingClassId, page, itemsPerPage, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves a TeachingClassTeacherInvitation resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeachingClassTeacherInvitationItem(id: string, options?: any) {
            return TeachingClassTeacherInvitationApiFp(configuration).getTeachingClassTeacherInvitationItem(id, options)(fetch, basePath);
        },
    };
};

/**
 * TeachingClassTeacherInvitationApi - object-oriented interface
 * @export
 * @class TeachingClassTeacherInvitationApi
 * @extends {BaseAPI}
 */
export class TeachingClassTeacherInvitationApi extends BaseAPI {
    /**
     * 
     * @summary Allows user to send an invitation to a teaching class with a given invitation code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingClassTeacherInvitationApi
     */
    public apiAuthV1TeachingClassTeacherInvitationPost(options?: any) {
        return TeachingClassTeacherInvitationApiFp(this.configuration).apiAuthV1TeachingClassTeacherInvitationPost(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Accept Teaching Class Teacher Invitation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingClassTeacherInvitationApi
     */
    public apiAuthV1TeachingClassTeacherInvitationTeachingClassTeacherInvitationIdAcceptPost(options?: any) {
        return TeachingClassTeacherInvitationApiFp(this.configuration).apiAuthV1TeachingClassTeacherInvitationTeachingClassTeacherInvitationIdAcceptPost(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Reject Teaching Class Teacher Invitation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingClassTeacherInvitationApi
     */
    public apiAuthV1TeachingClassTeacherInvitationTeachingClassTeacherInvitationIdRejectPost(options?: any) {
        return TeachingClassTeacherInvitationApiFp(this.configuration).apiAuthV1TeachingClassTeacherInvitationTeachingClassTeacherInvitationIdRejectPost(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves the collection of TeachingClassTeacherInvitation resources.
     * @param {number} [teachingClassId] 
     * @param {Array<number>} [teachingClassId] 
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingClassTeacherInvitationApi
     */
    public getTeachingClassTeacherInvitationCollection(teachingClassId?: number, teachingClassId?: Array<number>, page?: number, itemsPerPage?: number, options?: any) {
        return TeachingClassTeacherInvitationApiFp(this.configuration).getTeachingClassTeacherInvitationCollection(teachingClassId, teachingClassId, page, itemsPerPage, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves a TeachingClassTeacherInvitation resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeachingClassTeacherInvitationApi
     */
    public getTeachingClassTeacherInvitationItem(id: string, options?: any) {
        return TeachingClassTeacherInvitationApiFp(this.configuration).getTeachingClassTeacherInvitationItem(id, options)(this.fetch, this.basePath);
    }

}
/**
 * UserApi - fetch parameter creator
 * @export
 */
export const UserApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Validates a given email.
         * @param {string} email The email to validate.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPublicV1UserValidateEmailEmailGet(email: string, options: any = {}): FetchArgs {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling apiPublicV1UserValidateEmailEmailGet.');
            }
            const localVarPath = `/api/public/v1/user/validate/email/{email}`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Validates a given username.
         * @param {string} username The username to validate.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPublicV1UserValidateUsernameUsernameGet(username: string, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling apiPublicV1UserValidateUsernameUsernameGet.');
            }
            const localVarPath = `/api/public/v1/user/validate/username/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves the collection of User resources.
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCollection(id?: number, id?: Array<number>, page?: number, itemsPerPage?: number, options: any = {}): FetchArgs {
            const localVarPath = `/api/auth/v1/users`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (id) {
                localVarQueryParameter['id[]'] = id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = itemsPerPage;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves a User resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserItem(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getUserItem.');
            }
            const localVarPath = `/api/auth/v1/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Updates the User resource.
         * @param {string} id 
         * @param {UserjsonldUserWrite} [body] The updated User resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchUserItem(id: string, body?: UserjsonldUserWrite, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling patchUserItem.');
            }
            const localVarPath = `/api/auth/v1/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserUserWrite" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a User resource.
         * @param {UserjsonldUserCreate} [body] The new User resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserCollection(body?: UserjsonldUserCreate, options: any = {}): FetchArgs {
            const localVarPath = `/api/public/v1/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("Authorization")
					: configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserUserCreate" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Validates a given email.
         * @param {string} email The email to validate.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPublicV1UserValidateEmailEmailGet(email: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).apiPublicV1UserValidateEmailEmailGet(email, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Validates a given username.
         * @param {string} username The username to validate.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPublicV1UserValidateUsernameUsernameGet(username: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).apiPublicV1UserValidateUsernameUsernameGet(username, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves the collection of User resources.
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCollection(id?: number, id?: Array<number>, page?: number, itemsPerPage?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse20020> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).getUserCollection(id, id, page, itemsPerPage, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Retrieves a User resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserItem(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserjsonldUserDetail> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).getUserItem(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Updates the User resource.
         * @param {string} id 
         * @param {UserjsonldUserWrite} [body] The updated User resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchUserItem(id: string, body?: UserjsonldUserWrite, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserjsonldUserDetail> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).patchUserItem(id, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Creates a User resource.
         * @param {UserjsonldUserCreate} [body] The new User resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserCollection(body?: UserjsonldUserCreate, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserjsonldUserDetail> {
            const localVarFetchArgs = UserApiFetchParamCreator(configuration).postUserCollection(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Validates a given email.
         * @param {string} email The email to validate.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPublicV1UserValidateEmailEmailGet(email: string, options?: any) {
            return UserApiFp(configuration).apiPublicV1UserValidateEmailEmailGet(email, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Validates a given username.
         * @param {string} username The username to validate.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPublicV1UserValidateUsernameUsernameGet(username: string, options?: any) {
            return UserApiFp(configuration).apiPublicV1UserValidateUsernameUsernameGet(username, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves the collection of User resources.
         * @param {number} [id] 
         * @param {Array<number>} [id] 
         * @param {number} [page] The collection page number
         * @param {number} [itemsPerPage] The number of items per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserCollection(id?: number, id?: Array<number>, page?: number, itemsPerPage?: number, options?: any) {
            return UserApiFp(configuration).getUserCollection(id, id, page, itemsPerPage, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Retrieves a User resource.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserItem(id: string, options?: any) {
            return UserApiFp(configuration).getUserItem(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Updates the User resource.
         * @param {string} id 
         * @param {UserjsonldUserWrite} [body] The updated User resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchUserItem(id: string, body?: UserjsonldUserWrite, options?: any) {
            return UserApiFp(configuration).patchUserItem(id, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Creates a User resource.
         * @param {UserjsonldUserCreate} [body] The new User resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserCollection(body?: UserjsonldUserCreate, options?: any) {
            return UserApiFp(configuration).postUserCollection(body, options)(fetch, basePath);
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary Validates a given email.
     * @param {string} email The email to validate.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiPublicV1UserValidateEmailEmailGet(email: string, options?: any) {
        return UserApiFp(this.configuration).apiPublicV1UserValidateEmailEmailGet(email, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Validates a given username.
     * @param {string} username The username to validate.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public apiPublicV1UserValidateUsernameUsernameGet(username: string, options?: any) {
        return UserApiFp(this.configuration).apiPublicV1UserValidateUsernameUsernameGet(username, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves the collection of User resources.
     * @param {number} [id] 
     * @param {Array<number>} [id] 
     * @param {number} [page] The collection page number
     * @param {number} [itemsPerPage] The number of items per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserCollection(id?: number, id?: Array<number>, page?: number, itemsPerPage?: number, options?: any) {
        return UserApiFp(this.configuration).getUserCollection(id, id, page, itemsPerPage, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Retrieves a User resource.
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserItem(id: string, options?: any) {
        return UserApiFp(this.configuration).getUserItem(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Updates the User resource.
     * @param {string} id 
     * @param {UserjsonldUserWrite} [body] The updated User resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public patchUserItem(id: string, body?: UserjsonldUserWrite, options?: any) {
        return UserApiFp(this.configuration).patchUserItem(id, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Creates a User resource.
     * @param {UserjsonldUserCreate} [body] The new User resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public postUserCollection(body?: UserjsonldUserCreate, options?: any) {
        return UserApiFp(this.configuration).postUserCollection(body, options)(this.fetch, this.basePath);
    }

}
/**
 * UtilApi - fetch parameter creator
 * @export
 */
export const UtilApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Provides translations for a given locale.
         * @param {string} locale The locale code to that represents the language, e.g. \&quot;en\&quot; or \&quot;th\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPublicV1TranslationLocaleGet(locale: string, options: any = {}): FetchArgs {
            // verify required parameter 'locale' is not null or undefined
            if (locale === null || locale === undefined) {
                throw new RequiredError('locale','Required parameter locale was null or undefined when calling apiPublicV1TranslationLocaleGet.');
            }
            const localVarPath = `/api/public/v1/translation/{locale}`
                .replace(`{${"locale"}}`, encodeURIComponent(String(locale)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Provides meta information about a given app build number.
         * @param {number} buildNumber The build number of a mobile app.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPublicV1VersionBuildNumberGet(buildNumber: number, options: any = {}): FetchArgs {
            // verify required parameter 'buildNumber' is not null or undefined
            if (buildNumber === null || buildNumber === undefined) {
                throw new RequiredError('buildNumber','Required parameter buildNumber was null or undefined when calling apiPublicV1VersionBuildNumberGet.');
            }
            const localVarPath = `/api/public/v1/version/{buildNumber}`
                .replace(`{${"buildNumber"}}`, encodeURIComponent(String(buildNumber)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UtilApi - functional programming interface
 * @export
 */
export const UtilApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Provides translations for a given locale.
         * @param {string} locale The locale code to that represents the language, e.g. \&quot;en\&quot; or \&quot;th\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPublicV1TranslationLocaleGet(locale: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UtilApiFetchParamCreator(configuration).apiPublicV1TranslationLocaleGet(locale, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Provides meta information about a given app build number.
         * @param {number} buildNumber The build number of a mobile app.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPublicV1VersionBuildNumberGet(buildNumber: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = UtilApiFetchParamCreator(configuration).apiPublicV1VersionBuildNumberGet(buildNumber, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UtilApi - factory interface
 * @export
 */
export const UtilApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Provides translations for a given locale.
         * @param {string} locale The locale code to that represents the language, e.g. \&quot;en\&quot; or \&quot;th\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPublicV1TranslationLocaleGet(locale: string, options?: any) {
            return UtilApiFp(configuration).apiPublicV1TranslationLocaleGet(locale, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Provides meta information about a given app build number.
         * @param {number} buildNumber The build number of a mobile app.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPublicV1VersionBuildNumberGet(buildNumber: number, options?: any) {
            return UtilApiFp(configuration).apiPublicV1VersionBuildNumberGet(buildNumber, options)(fetch, basePath);
        },
    };
};

/**
 * UtilApi - object-oriented interface
 * @export
 * @class UtilApi
 * @extends {BaseAPI}
 */
export class UtilApi extends BaseAPI {
    /**
     * 
     * @summary Provides translations for a given locale.
     * @param {string} locale The locale code to that represents the language, e.g. \&quot;en\&quot; or \&quot;th\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilApi
     */
    public apiPublicV1TranslationLocaleGet(locale: string, options?: any) {
        return UtilApiFp(this.configuration).apiPublicV1TranslationLocaleGet(locale, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Provides meta information about a given app build number.
     * @param {number} buildNumber The build number of a mobile app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UtilApi
     */
    public apiPublicV1VersionBuildNumberGet(buildNumber: number, options?: any) {
        return UtilApiFp(this.configuration).apiPublicV1VersionBuildNumberGet(buildNumber, options)(this.fetch, this.basePath);
    }

}
